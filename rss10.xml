<?xml version="1.0"?>
<rdf:RDF
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns="http://purl.org/rss/1.0/"
>
<channel rdf:about="http://planet.sagemath.org">
	<title>Planet Sage</title>
	<link>http://planet.sagemath.org</link>
	<description>Planet Sage - http://planet.sagemath.org</description>

	<items>
		<rdf:Seq>
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/05/04/code-on-cake-poker-and-a-number-theory-classification-webapp/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/04/06/my-5-reasons-why-jekyll-with-github-is-a-terrible-teaching-tool/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/25/a_one_week_flipped_teaching_environment_to_introduce_object_oriented_programming/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/24/marrying_toys_and_students/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/23/cooperative_basketball_in_class/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/19/playing_stochastic_games_in_class/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Character-Theory/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/gametheory/2015/03/17/incomplete_information_games_in_class/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/gametheory/2015/03/17/discussing_the_game_theory_of_walking_in_class/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Animations/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/08/playing-an-infinitely-repeated-game-in-class/" />
			<rdf:li rdf:resource="http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/02/26/this-class-teaches-me-to-not-trust-my-classmates/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/code/2015/02/20/an-iterated-prisoners-dilemma-on-github/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/gametheory/2015/02/15/on-the-worst-play-in-superbowl-history/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Group-Ring-Regular-Representation/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/02/13/rock-paper-scissors-lizard-spock/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/02/07/playing_against_a_mixed_strategy_in_class/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Representation-Theory-Decomposing-Representations/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/01/29/recreating-golden-balls-in-class/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/01/26/introducing-game-theory-to-my-class/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Representation-Theory-Sums-Products/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Representation-Theory-Intro/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Subgroup-Explorer/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/code/2015/01/16/on-a-paper-about-inelligence-vs-conscientiousness/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/mathematics/2015/01/07/my_otis_king_calculator/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Subgroup-Lattice-Edges/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Holiday-Harmonograph/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/code/2014/12/23/using_python_and_selenium_for_a_jekyll_site/" />
			<rdf:li rdf:resource="http://quantumtetrahedron.wordpress.com/?p=2162" />
			<rdf:li rdf:resource="http://martinralbrecht.wordpress.com/?p=1099" />
			<rdf:li rdf:resource="http://sheaves.github.io/Subgroup-Lattice-Color-Vertices/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Subgroup-Lattice/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2014/12/14/a-busy-term/" />
			<rdf:li rdf:resource="http://quantumtetrahedron.wordpress.com/?p=2148" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/code/2014/12/10/sneak-preview-of-game-theory-in-sage-3-of-3/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/code/2014/11/22/on-divisibility-by-11/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Argument-Principle/" />
			<rdf:li rdf:resource="http://martinralbrecht.wordpress.com/?p=1090" />
			<rdf:li rdf:resource="http://sheaves.github.io/Partitions-and-Posets/" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-6365588202025292315.post-8239368345310276770" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2014/11/14/scaffolding_tutors_and_how_to_better_prepare_for_different_pedagogies/" />
			<rdf:li rdf:resource="http://sheaves.github.io/Hello-World/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2014/10/25/busy-office-hours/" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-6365588202025292315.post-3221518328989833144" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-6365588202025292315.post-5655260630534776590" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/pedagogy/2014/10/13/reflecting-on-a-first-week-of-learning/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/code/2014/10/12/A-playlist-of-introduction-to-latex-videos-using-sagemathcloud/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/other/2014/10/04/podcasts-i-listen-to/" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-6365588202025292315.post-4658363764746166473" />
			<rdf:li rdf:resource="http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/09/abelian-complexity-of-the-oldenburger-sequence" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/code/2014/09/24/greyscale-graphs-in-sage/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/code/2014/09/21/my-thoughts-on-plotly/" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/code/2014/09/19/the-expected-waiting-time-in-a-tandem-queue-with-blocking-using-sage/" />
			<rdf:li rdf:resource="http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/08/slabbe-0.1.spkg-released" />
			<rdf:li rdf:resource="http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/08/releasing-slabbe-my-own-sage-package" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-6365588202025292315.post-5041553718036647954" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-6365588202025292315.post-2620037689426510230" />
			<rdf:li rdf:resource="http://drvinceknight.github.io/unpeudemath/code/2014/08/27/sneak-preview-of-game-theory-in-sage-2-of-3/" />
		</rdf:Seq>
	</items>
</channel>

<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/05/04/code-on-cake-poker-and-a-number-theory-classification-webapp/">
	<title>Vince Knight: Code on cake, poker and a number theory classification web app</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/05/04/code-on-cake-poker-and-a-number-theory-classification-webapp/</link>
	<content:encoded>&lt;p&gt;I have just finished writing feedback and obtaining marks for my first year
students’ presentations. These presentations follow 11 weeks during which
students formed companies and worked together to come up with a ‘product’ which
had to involve mathematics and code (this semester comes just after 11 weeks of
learning Python and Sage). In this post I’ll briefly describe some of the great
things that the students came up with.&lt;/p&gt;

&lt;p&gt;I must say that I was blown away by the standard this year. Last year the
students did exceptionally well but this year the standard was even higher, I am
so grateful for the effort put in by more or less everyone.&lt;/p&gt;

&lt;p&gt;Some of the great projects included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A website that used a fitted utility function (obtained from questioning
family, friends, flatmates) to rank parking lots in terms of price and
distance from a given venue (the website was written in Django and the
function fitted using Sage).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A commando training app, with an actual reservist marine who is a student
of ours:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/venture.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A story based game with an original storyline stemming from the zodiac. The
presentation culminated in Geraint, Jason and I (who were the audience)
retaliating to their Nerf gun attack with our (hidden under the desk) Nerf guns (we had a hunch
that this group would ambush us…). The game mechanics itself was coded in
pure Python and the UI was almost written in Django (that
was the goal but they didn’t have the time to fully implement it).&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/cardiff_elite_four.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A Django site that had a graphical timeline of mathematics (on click you had
access to a quizz and info etc…). This was one I was
particularly excited about as it’s a tool I would love to use.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An outreach/educational package based around cryptography. They coded a
variety of cyphers in Python and also put together an excellent set of
teaching resources with really well drawn characters etc… They even threw in
my dog Auraya (the likeness of the drawing is pretty awesome :)):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/cryptogram.jpg&quot; alt=&quot;&quot; /&gt;
  &lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/auraya.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I ask my students to find an original way of showcasing their code. I don’t
actually know the right answer to that ‘challenge’. Most students showcase the
website and/or app, some will talk me through some code but this year one
group did something quite frankly awesome: &lt;strong&gt;code on cake&lt;/strong&gt;. Here’s some of
the code they wrote for their phone app (written with kivy):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/-1_cake.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One group built a fully functioning and hosted web app (after taking a look at
Django they decided that Flask was the way to go for this particular tool).
Their app takes in a natural number and classifies it against a number of
categories, go ahead and try it right now: &lt;a href=&quot;http://jayrobertvos.pythonanywhere.com/&quot;&gt;Categorising Numbers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One of the more fun presentations was for a poker simulation app that uses a
prime number representation of a hand of poker to simulate all possible
outcomes of a given state. This work remarkably fast and immediately spits out
(with neat graphics of the cards) the probability of winning given the current
cards. As well as an impressive app the students presented it very well and
invited me to play a game of poker (I lost, their mark was not affected…):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/team_super_awesome_funsies_selfie.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Here are a couple of screen shots of the app itself:&lt;/p&gt;

    &lt;p&gt;Home screen:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/oddson_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;The input card screen:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/oddson_0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am missing out a bunch of great projects (including an impressive &lt;em&gt;actual&lt;/em&gt;
business that I will be delighted to talk about more when appropriate). I am
very grateful to the efforts put in by all the students and wish them well
during their exams.&lt;/p&gt;</content:encoded>
	<dc:date>2015-05-04T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/04/06/my-5-reasons-why-jekyll-with-github-is-a-terrible-teaching-tool/">
	<title>Vince Knight: My 5 reasons why jekyll + github is a terrible teaching tool.</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/04/06/my-5-reasons-why-jekyll-with-github-is-a-terrible-teaching-tool/</link>
	<content:encoded>&lt;p&gt;For the past year or so I have been using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; for all
my courses.
If you do not know, in a nutshell, jekyll is a ruby framework that lets you
write templates for pages and build nice websites using static markdown files
for your content.
Here I will describe what I think of jekyll from a pedagogic point of view, in 5 main points.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-the-tutorial-is-too-well-written-and-easy-to-follow&quot;&gt;1. Jekyll is terrible because the tutorial is too well written and easy to follow.&lt;/h2&gt;

&lt;p&gt;First of all, as an academic I enjoy when things are difficult to read and
follow.
The Jekyll tutorial can get you up and running with a jekyll site in less than 5
minutes.
It is far too clear and easy to follow.
This sort of clear and to the point
explanation is very dangerous from a pedagogic point of view as students might
stumble upon it and raise their expectations of the educational process they are
going through.&lt;/p&gt;

&lt;p&gt;In all seriousness, the tutorial is well written and clear, with a basic
knowledge of the command line you can modify the base site and have a website
deployed in less than 10 minutes.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-it-works-too-seamlessly-with-github&quot;&gt;2. Jekyll is terrible because it works too seamlessly with github.&lt;/h2&gt;

&lt;p&gt;First of all gh-pages takes care of the hosting.
Not having to use a complicated server saves far too much time.
As academics we have too much free time already, I do not like getting bored.&lt;/p&gt;

&lt;p&gt;Github promotes the sharing and openness of code, resources and processes.
Using a jekyll site in conjunction with github means that others can
easily see and comment on all the materials as well as potentially
improve them.
This openness is dangerous as it ensures that courses are living and breathing
things as opposed to a set of notes/problem sheets that sit safely in a drawer
somewhere.&lt;/p&gt;

&lt;p&gt;The fact that jekyll uses markdown is also a problem.
On github anyone can easily read and send a pull request (which improves things)
without really knowing markdown (let alone git).
This is very terrible indeed, &lt;a href=&quot;https://github.com/drvinceknight/Computing_for_mathematics/commit/c9370a3e2880e0d6d2d3a0f4e3bb90a306783787&quot;&gt;here for example is a pull request sent to me by a
student&lt;/a&gt;.
The student in question found a mistake in a question sheet and asked me about it,
right there in the lab I just said ‘go ahead and fix it :)’ (and they did).
Involving students in the process of fixing/improving their course materials
has the potential for utter chaos.
Furthermore normalising mistakes is another big problem: all students should be
terrified of making a mistake and/or trying things.&lt;/p&gt;

&lt;p&gt;Finally, having a personal site as a github project gives you a site at the
following url:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;username.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By simply having a &lt;code&gt;gh-pages&lt;/code&gt; branch for each class site, this will
automatically be served at:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;username.github.io/class-site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is far too sensible and flexible.
Furthermore the promotion of decentralisation of content is dangerous.
If one of my class sites breaks: none of my others will be affected!!!
How can I expect any free time with such a robust system?
This is dangerously efficient.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-it-is-too-flexible&quot;&gt;3. Jekyll is terrible because it is too flexible.&lt;/h2&gt;

&lt;p&gt;You can (if you want to) include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://disqus.com/&quot;&gt;A disqus.com&lt;/a&gt; board to a template for a page which means
that students can easily comment and talk to you about materials.
Furthermore you can also use this to add things to your materials in a
discussion based way, for example I have been able to far too easily to add a
picture of a whiteboard explaining something students have asked.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.mathjax.org/&quot;&gt;Mathjax&lt;/a&gt;. With some escaping this works out of the
box. Being able to include nicely rendered mathematics misaligns students’
expectations as to what is on the web.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://sagecell.sagemath.org/&quot;&gt;Sage cells&lt;/a&gt; can be easily popped in to
worksheets allowing students to immediately use code to illustrate/explain a
concept.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and various others: you can just include any html/javascript etc…&lt;/p&gt;

&lt;p&gt;This promotion of interactive and modern resources by Jekyll is truly terrible
as it gets students away from what teaching materials should really be about:
dusty notes in the bottom of a drawer (worked fine for me).&lt;/p&gt;

&lt;p&gt;The flexibility of Jekyll is also really terrible as it makes me forget the
restrictions imposed on me by whatever VLE we are supposed to use.
This is making me weak and soft, when someone takes the choice away from me and
I am forced to use the VLE, I most probably won’t be ready.&lt;/p&gt;

&lt;p&gt;(A jekyll + github setup also implis that a wiki immediately exists for a page
and I am also experimenting with a &lt;a href=&quot;https://gitter.im&quot;&gt;gitter.im&lt;/a&gt; room for each class).&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-it-gives-a-responsive-site-out-of-the-box&quot;&gt;4. Jekyll is terrible because it gives a responsive site out of the box.&lt;/h2&gt;

&lt;p&gt;Students should consume their materials exactly when and how we want them to.
The base jekyll site cames with a basic responsive framework, here is a photo of
one of my class sheets (which also again shows the disgustingly beautifully
rendered mathematics):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/jekyll_site.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This responsive framework works right out of the box (you can also obviously use
further frameworks if you want to, see my point about flexibility) from the tutorial and this
encourages students to have access to the materials on whatever platform they
want whenever they want.
This cannot be a good thing.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-it-saves-me-too-much-time&quot;&gt;5. Jekyll is terrible because it saves me too much time.&lt;/h2&gt;

&lt;p&gt;The main point that is truly worrying about jekyll is how much time it saves me.
I have mentioned this before, as academics we need to constantly make sure we do
not get bored.
Jekyll does not help with this.&lt;/p&gt;

&lt;p&gt;I can edit my files using whatever system I want (I can even do this on github
directly if I wanted to), I push and the website is up to date.&lt;/p&gt;

&lt;p&gt;In the past I would have a lot of time taken up by compiling a LaTeX document
and uploading to our VLE.
I would sit back and worry about being bored before realising (thankfully) that
I had a typo and so needed to write, delete and upload again.&lt;/p&gt;

&lt;p&gt;Furthermore, I can easily use the github issue tracker to keep on top of to do
lists etc… (which I am actually beginning to do for more or less every aspect
of my life).
TAs can also easily fix/improve minor things without asking me to upload
whatever it is they wrote.&lt;/p&gt;

&lt;p&gt;Github + Jekyll works seamlessly and ensures that I have more time to respond to
student queries and think.
This time for reflection on teaching practice is dangerous: I might choose to do
things differently than how they have been done for the past 100 years.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;In case my tone is unclear: I am such a huge jekyll fan and think it is a
brilliant pedagogic tool.
There might well be various other static site generators and other options so please do
comment about them below :)&lt;/em&gt;)&lt;/p&gt;</content:encoded>
	<dc:date>2015-04-06T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/25/a_one_week_flipped_teaching_environment_to_introduce_object_oriented_programming/">
	<title>Vince Knight: A one week flipped learning environment to introduce Object Oriented Programming</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/25/a_one_week_flipped_teaching_environment_to_introduce_object_oriented_programming/</link>
	<content:encoded>&lt;p&gt;This post describes a teaching activity that is run for the Cardiff MSc. programmes.
The activity is revolves around a two day hackathon that gets students to use Python and object oriented programming to solve a challenge.
The activity is placed within a flipped learning environment and makes use of what I feel is a very nice form of assessment (we just get to know the students).&lt;/p&gt;

&lt;p&gt;This year is the third installment of this exercise which came as a result of the MSc advisory board requesting that object oriented programming be introduced to our MSc.&lt;/p&gt;

&lt;p&gt;Before describing the activity itself let me just put this simple diagram that describes the flipped learning environment here (if you would like more info about it be sure to talk to &lt;a href=&quot;https://plus.google.com/+RobertTalbert/posts&quot;&gt;Robert Talbert&lt;/a&gt; who has always been very helpful to me):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/flipped_environment.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;description-of-what-happens&quot;&gt;Description of what happens&lt;/h2&gt;

&lt;p&gt;After 3 iterations and a number of discussions about the format with &lt;a href=&quot;https://plus.google.com/u/0/+PaulHarper/posts&quot;&gt;Paul Harper&lt;/a&gt; (the director of the MSc) I think the last iteration is pretty spot on and it goes something like this:&lt;/p&gt;

&lt;h3 id=&quot;monday-transfer-of-content&quot;&gt;Monday: Transfer of content&lt;/h3&gt;

&lt;p&gt;We give a brief overview of Python (you can see the &lt;a href=&quot;http://vincent-knight.com/Introduction_to_OOP/&quot;&gt;slides here&lt;/a&gt;) up until and including basic syntax for classes.&lt;/p&gt;

&lt;h3 id=&quot;tuesday--wednesday-nothing&quot;&gt;Tuesday + Wednesday: Nothing&lt;/h3&gt;

&lt;p&gt;Students can, if they want to, read up about Python, look through videos at the website and elsewhere, look through past challenges etc…
&lt;strong&gt;This is in effect when the knowledge transfer happens&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;thursday-flying-solo-followed-by-feedback&quot;&gt;Thursday: Flying solo followed by feedback&lt;/h3&gt;

&lt;p&gt;Students are handed a challenge of some sort (you can see the past two &lt;a href=&quot;http://vincent-knight.com/Introduction_to_OOP/Challenges/&quot;&gt;here&lt;/a&gt;).
Students work in groups of 4 at attempting to solve the problem.
On this day, the two postgrads (&lt;a href=&quot;https://plus.google.com/u/0/+JasonYoung/posts&quot;&gt;Jason&lt;/a&gt; and &lt;a href=&quot;https://plus.google.com/u/0/118222786508884333473/posts&quot;&gt;Geraint&lt;/a&gt;) and myself observe the groups.
When we are asked questions we in general ask questions back.
This sometimes leads to a fair bit of frustration but is the difficult process that makes the rest of the process worthwhile.&lt;/p&gt;

&lt;p&gt;Here is a photo of some of the groups getting to work:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/oop_thursday_gp_1.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/oop_thursday_gp_2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the very end of the day (starting at 1600 for about 30 minutes with each group).
During this feedback session go through the code written by each group in detail, highlighting things they are having difficulty with and agreeing on a course of action for the next day.
&lt;strong&gt;This is the point at which the class ‘flips’ so to speak: transfer of content is done and difficulties are identified and conceptualised&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here is a photo of Jason, Geraint and I at the end of a very long day after the feedback sessions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/oop_post_feedback.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The other point of this day is that we start our continuous assessment: taking notes and discussing how each group is doing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Where are they progress wise?&lt;/li&gt;
  &lt;li&gt;What difficulties do we need to look out for?&lt;/li&gt;
  &lt;li&gt;How are the groups approaching the problem and working together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here you can see a photo of Jason in front of the board that we fill up over the 2 days with notes and comments:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/oop_board.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;friday-sprint-finish-with-more-assistance&quot;&gt;Friday: Sprint finish with more assistance&lt;/h3&gt;

&lt;p&gt;On the second/last day students are given slightly more assistance from Jason, Geraint and I but are still very much left to continue with their hard work.
The main difference being that when students ask questions we sometimes answer them.&lt;/p&gt;

&lt;p&gt;Here is one group who managed to crack something quite difficult on the second day:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/oop_friday_gp.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The final part of this day is to round all the students together and announce the marks, which brings us nicely to the assessment part of this activity.&lt;/p&gt;

&lt;h2 id=&quot;assessment&quot;&gt;Assessment&lt;/h2&gt;

&lt;p&gt;I really enjoy assessing this activity.
This is not something I say about assessment very often, but we are continuously assessing the students and are able to gain a true idea of how they do.
The final piece of code is not what everything is marked on as it is in essence not terribly important.&lt;/p&gt;

&lt;p&gt;Here is a photo of the team who did the best this year:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/oop_winners.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If I could sit with students over the 11 week period of the other courses I teach and get to know them and assess them that way, that is indeed how I would do it.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt; Summary&lt;/h2&gt;

&lt;p&gt;Here is a summary of how I feel this activity fits in the original diagram I had:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/oop_day_as_a_flipped_environment.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see despite ‘being in contact’ with students for most of Thursday I would not consider this contact time in the usual sense as most of that contact is part of the assessment.&lt;/p&gt;

&lt;p&gt;This is always a very fun (and exhausting) two days and I look forward to next year.&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-25T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/24/marrying_toys_and_students/">
	<title>Vince Knight: Marrying toys and students</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/24/marrying_toys_and_students/</link>
	<content:encoded>&lt;p&gt;In class yesterday we took a look at matching games.
These are sometimes referred to as stable marriage problems.
To have some data for us to play with I asked for some volunteers to marry.
Sadly I apparently am not allowed to ask students to rank each other in class and I also do not have the authority to marry.
So, &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/03/matching-games-in-class.html&quot;&gt;like last year&lt;/a&gt; I used some of my office toys and asked students to rank them.&lt;/p&gt;

&lt;p&gt;I brought three toys to class:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The best ninja turtle: Donatello&lt;/li&gt;
  &lt;li&gt;A tech deck&lt;/li&gt;
  &lt;li&gt;A foam football&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I asked 3 students to come down and rank them and in turn I let the toys rank the students.&lt;/p&gt;

&lt;p&gt;We discussed possible matchings with some great questions such as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Are we trying to make everyone as happy as possible?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer to that is: no.
We are simply trying to ensure that no one has an incentive to deviate from their current matching by breaking their match for someone they prefer and who also prefers them.&lt;/p&gt;

&lt;p&gt;Here is the stable matching we found together:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/matching_game.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that we can run the Gale-Shapley value using Sage:&lt;/p&gt;

&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;The 3 students got to hold on to the toys for the hour and I was half expecting the football to be thrown around but sadly that did not happen.
Perhaps next year.&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-24T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/23/cooperative_basketball_in_class/">
	<title>Vince Knight: Cooperative basketball in class</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/23/cooperative_basketball_in_class/</link>
	<content:encoded>&lt;p&gt;Today in class we repeated the game we played &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/03/basketball-and-cooperative-games-in.html&quot;&gt;last year&lt;/a&gt;.
3 teams of 3 students took part this year and here is a photo of the aftermath:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/basketball.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a class we watched the three teams attempt to free-throw as many crumpled up pieces of paper in to the bin as possible.&lt;/p&gt;

&lt;p&gt;Based on the total number we then tried to come up with how many each subset/coalition of players would have gotten in.
So for example, 2 out of 3 of the teams had one student crumple paper while the other 2 took shots.
So whilst that individual did not get any in, they contributed an important part to the team effort.&lt;/p&gt;

&lt;p&gt;Here are the characteristic functions that show what each team did:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/basketball-characteristic-functions.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is some &lt;a href=&quot;http://sagemath.org/&quot;&gt;Sage&lt;/a&gt; code that gives the Shapley value for each game (&lt;a href=&quot;http://vincent-knight.com/Year_3_game_theory_course/Content/Chapter_16_Cooperative_games/&quot;&gt;take a look at my class notes&lt;/a&gt; or at &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/03/basketball-and-cooperative-games-in.html&quot;&gt;last years post&lt;/a&gt; to see how to calculate this):&lt;/p&gt;

&lt;p&gt;Let us define the first game:&lt;/p&gt;

&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;If you click &lt;code&gt;Evaluate&lt;/code&gt; above you see that the Shapley value is given by:&lt;/p&gt;



&lt;p&gt;(This one we calculated in class)&lt;/p&gt;

&lt;p&gt;By changing the numbers above we get the following for the other two games.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Game 2:&lt;/p&gt;

    
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Game 3:&lt;/p&gt;

    
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was a bit of fun and most importantly from a class point of view gave us some nice numbers to work from and calculate the Shapley value together.&lt;/p&gt;

&lt;p&gt;If anyone would like to read about the Shapley value a bit more take a look at the &lt;a href=&quot;http://www.sagemath.org/doc/reference/game_theory/sage/game_theory/cooperative_game.html&quot;&gt;Sage documentation&lt;/a&gt; which not only shows how to calculate it using Sage but also goes over some of the mathematics (including another formulation).&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-23T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/19/playing_stochastic_games_in_class/">
	<title>Vince Knight: Playing stochastic games in class</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/19/playing_stochastic_games_in_class/</link>
	<content:encoded>&lt;p&gt;The final blog post I am late in writing is about the Stochastic game we played in class last week.
The particular type of game I am referring to is also called a Markov game where players play a series of Normal Form games, with the &lt;em&gt;next&lt;/em&gt; game being picked from a random distribution the nature of which depends on the strategy profiles.
In other words the choice of the players does not only impact on the utility gained by the players but also on the probability of what the net game will be…
I blogged about &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/03/playing-stochasticmarkov-games-in-class.html&quot;&gt;this last year&lt;/a&gt; so feel free to read about some of the details there.&lt;/p&gt;

&lt;p&gt;The main idea is that one stage game corresponds to this normal form game (a prisoner’s dilemma):&lt;/p&gt;



&lt;p&gt;at the other we play:&lt;/p&gt;



&lt;p&gt;The probability distributions, of the form \((x,1-x)\) where \(x\) is the probability with which we play the first game again are given by:&lt;/p&gt;



&lt;p&gt;and the probability distribution for the second game was \((0,1)\).
In essence the second game was an &lt;em&gt;absorption&lt;/em&gt; game and so players would try and avoid it.&lt;/p&gt;

&lt;p&gt;To deal with the potential for the game to last for ever we played this with a discounting factor \(\delta=1/2\).
Whilst that discounting factor will be interpreted as such in theory, for the purposes of playing the game in class we used that as a probability at which the game continues.&lt;/p&gt;

&lt;p&gt;You can see a photo of this all represented on the board:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/markov_game-game.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We played this as a team game and you can see the results here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/markov_game-results.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As opposed to last year no actual duel lasted more than one round: I had a coded dice to sample at each step.
The first random roll of the dice was to see if the game continued based on the \(\delta\) property (this in effect ‘deals with infinity’).
The second random sample was to find out which game we payed next and if we ever went to the absorption games things finished there.&lt;/p&gt;

&lt;p&gt;The winner was team B who in fact defected after the initial cooperation in the first game (perhaps that was enough to convince other teams they would be cooperative).&lt;/p&gt;

&lt;p&gt;After playing this, we calculated (using some basic algebra examining each potential pure equilibria) the Nash equilibria for this game and found that there were two pure equilibria: both players Cooperating and both players defecting.&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-19T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Character-Theory/">
	<title>Liang Ze: Character Theory Basics</title>
	<link>http://sheaves.github.io/Character-Theory/</link>
	<content:encoded>&lt;p&gt;This post illustrates some of SageMath’s character theory functionality, as well as some basic results about characters of finite groups. &lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;basic-definitions-and-properties&quot;&gt;Basic Definitions and Properties&lt;/h2&gt;

&lt;p&gt;Given a representation $(V,\rho)$ of a group $G$, its &lt;a href=&quot;http://en.wikipedia.org/wiki/Character_theory&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;character&lt;/strong&gt;&lt;/a&gt; is a map $ \chi: G \to \mathbb{C}$ that returns the &lt;a href=&quot;http://en.wikipedia.org/wiki/Trace_(linear_algebra)&quot; target=&quot;_blank&quot;&gt;trace&lt;/a&gt; of the matrices given by $\rho$:&lt;/p&gt;



&lt;p&gt;A character $\chi$ is &lt;strong&gt;irreducible&lt;/strong&gt; if the corresponding $(V,\rho)$ is &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/&quot; target=&quot;_blank&quot;&gt;irreducible&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Despite the simplicity of the definition, the (irreducible) characters of a group contain a surprising amount of information about the group. Some &lt;a href=&quot;http://en.wikipedia.org/wiki/Character_theory#Applications&quot; target=&quot;_blank&quot;&gt;big theorems&lt;/a&gt; in group theory depend heavily on character theory.&lt;/p&gt;

&lt;p&gt;Let’s calculate the character of the permutation representation of $D_4$. For each $g \in G$, we’ll display the pairs:&lt;/p&gt;



&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Many of the following properties of characters can be deduced from properties of the trace:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;strong&gt;dimension&lt;/strong&gt; of a character is the dimension of $V$ in $(V,\rho)$. Since $\rho(\text{Id})$ is always the identity matrix, the dimension of $\chi$ is $\chi(\text{Id})$.&lt;/li&gt;
  &lt;li&gt;Because the trace is &lt;a href=&quot;http://en.wikipedia.org/wiki/Similarity_invariance&quot; target=&quot;_blank&quot;&gt;invariant under similarity transformations&lt;/a&gt;, $\chi(hgh^{-1}) = \chi(g)$ for all $g,h \in G$. So characters are constant on conjugacy classes, and are thus &lt;a href=&quot;http://en.wikipedia.org/wiki/Class_function&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;class functions&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Let $\chi_V$ denote the character of $(V,\rho)$. Recalling the definitions of &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Sums-Products/&quot; target=&quot;_blank&quot;&gt;direct sums and tensor products&lt;/a&gt;, we see that&lt;/li&gt;
&lt;/ol&gt;



&lt;h2 id=&quot;the-character-table&quot;&gt;The Character Table&lt;/h2&gt;

&lt;p&gt;Let’s ignore the representation $\rho$ for now, and just look at the character $\chi$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;This is succinct, but we can make it even shorter. From point 2 above, $\chi$ is constant on conjugacy classes of $G$, so we don’t lose any information by just looking at the values of $\chi$ on each conjugacy class:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Even shorter, let’s just display the values of $\chi$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;This single row of numbers represents the character of &lt;em&gt;one&lt;/em&gt; representation of $G$. If we knew all the irreducible representations of $G$ and their corresponding characters, we could form a table with one row for each character. This is called the &lt;a href=&quot;http://en.wikipedia.org/wiki/Character_table&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;character table&lt;/strong&gt;&lt;/a&gt; of $G$.&lt;/p&gt;

&lt;p&gt;Remember how we had to define our representations by hand, one by one? We don’t have to do that for characters, because  SageMath has the &lt;a href=&quot;http://www.sagemath.org/doc/constructions/rep_theory.html&quot; target=&quot;_blank&quot;&gt;character tables of small groups built-in&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;This just goes to show how important the character of a group is. We can also access individual characters as a functions. Let’s say we want the last one:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Notice that the character we were playing with, $[4,2,0,0,0]$, is not in the table. This is because its representation $\rho$  is not irreducible. At the end of the post on &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Decomposing-Representations/&quot; target=&quot;_blank&quot;&gt;decomposing representations&lt;/a&gt;, we saw that $\rho$ splits into two $1$-dimensional irreducible representations and one $2$-dimensional one. It’s not hard to see that the character of $\rho$ is the sum of rows 1,4 and 5 in our character table:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Just as we could decompose every representation of $G$ into a sum of irreducible representations, we can express any character as a sum of irreducible characters. &lt;/p&gt;

&lt;p&gt;The next post discusses how to do this easily, by making use of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Schur_orthogonality_relations&quot;&gt;Schur orthogonality relations&lt;/a&gt;. These are really cool relations among the rows and columns of the character table. Apart from decomposing representations into irreducibles, we’ll also be able to prove that the character table is always square!&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-18T11:01:29+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/gametheory/2015/03/17/incomplete_information_games_in_class/">
	<title>Vince Knight: Incomplete information games in class</title>
	<link>http://drvinceknight.github.io/unpeudemath/gametheory/2015/03/17/incomplete_information_games_in_class/</link>
	<content:encoded>&lt;p&gt;Last week my class and I looked at the basics of games with incomplete information.
The main idea is that players do not necessarily know where there are in an extensive form game.
We repeated a game I played last year that you can read about &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/03/playing-game-with-incomplete.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a picture of the game we played (for details take a look at the post from last year):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/matchingpenniesunderuncertainty.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We played a round robing where everyone played against everyone else and you can see the results in these two notebook pages that Jason kept track off:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/2015-incomplete-info-game-1.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/2015-incomplete-info-game-2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that the winner was Reg, who on both occasions of being the second player: went with the coin.&lt;/p&gt;

&lt;p&gt;To find the Nash equilibria for this game we can translate it in to normal form game by doing the following two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Identify the strategy sets for the players&lt;/li&gt;
  &lt;li&gt;Averaging of the outcome probabilities&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This gives the following strategies:&lt;/p&gt;



&lt;p&gt;and&lt;/p&gt;



&lt;p&gt;The strategies for the second player correspond to a 2-vector indexed by the information sets of the second player.
In other words the first letter says what to do if the coin comes up as heads and the second letter says what to do if the coin comes up as tails:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;\(HH\): No matter what: play heads;&lt;/li&gt;
  &lt;li&gt;\(HT\): If the coin comes up as heads: play heads. If the coin comes up as tails: play tails.&lt;/li&gt;
  &lt;li&gt;\(TH\): If the coin comes up as heads: play tails. If the coin comes up as tails: play heads.&lt;/li&gt;
  &lt;li&gt;\(TT\): No matter what: play tails;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once we have done that and using the above ordering we can obtain the normal form game representation:&lt;/p&gt;



&lt;p&gt;In class we obtained the Nash equilibria for this game by realising that the third column strategy (\(TH\): always disagree with the coin) was dominated and then carrying out some indifference analysis.&lt;/p&gt;

&lt;p&gt;Here let us just throw it at Sage (&lt;a href=&quot;https://www.youtube.com/watch?v=QjXAvRiU4Og&quot;&gt;here is a video showing and explaining some of the code&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;The equilibria returned confirms what we did in class: the first player can more or less randomly (with bounds on the distribution) pick heads or tails but the second player should always agree with the coin.&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-17T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/gametheory/2015/03/17/discussing_the_game_theory_of_walking_in_class/">
	<title>Vince Knight: Discussing the game theory of walking/driving in class</title>
	<link>http://drvinceknight.github.io/unpeudemath/gametheory/2015/03/17/discussing_the_game_theory_of_walking_in_class/</link>
	<content:encoded>&lt;p&gt;Last week, in game theory class we looked at pairwise contest games.
To introduce this we began by looking at the particular game that one could use to model the situation of two individuals walking or driving towards each other:&lt;/p&gt;



&lt;p&gt;The above models people walking/driving towards each other and choosing a side of the road.
If they choose the same side they will not walk/drive in to each other.&lt;/p&gt;

&lt;p&gt;I got a coupe of volunteers to simulate this and ‘walk’ towards each other having picked a side.
We very quickly arrived at one of the stage Nash equilibria: both players choosing left and/or choosing right.&lt;/p&gt;

&lt;p&gt;I wrote a blog post about this a while ago when the BBC wrote an article about social convention.
You can read that &lt;a href=&quot;http://vincent-knight.com/unpeudemath/mathematics/2014/07/27/game-theory-and-pavement-etiquette/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We went on to compute the evolutionary stability of 3 potential stable equilibria:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Everyone driving on the left;&lt;/li&gt;
  &lt;li&gt;Everyone driving on the right;&lt;/li&gt;
  &lt;li&gt;Everyone randomly picking a side each time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that the above corresponds to the three Nash equilibria of the game itself.
You can see this using some Sage code immediately (&lt;a href=&quot;https://www.youtube.com/watch?v=QjXAvRiU4Og&quot;&gt;here is a video I just put together showing how one can use Sage to obtain Nash equilibria&lt;/a&gt;) - just click on ‘Evaluate’:&lt;/p&gt;

&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;We did this calculations in two ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;From first principles using the definitions of evolutionary stability (this took a while).
2 Using a clever theoretic result that in effect does the analysis for us once and for all.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both gave us the same result: driving on a given side of the road is evolutionarily stable whereas everyone randomly picking a side is not (a nudge in any given direction would ensure people picked a side).&lt;/p&gt;

&lt;p&gt;This kind of corresponds to the two (poorly drawn) pictures below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/stability.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To further demonstrate the instability of the ‘choose a random side’ situation here is a plot of the actual evolutionary process (&lt;a href=&quot;https://www.youtube.com/watch?v=Tz-lZy0AKRI&quot;&gt;here is a video that shows what is happening&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/evolution_from_random_walking.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that if we start by walking randomly the tiniest of mutation send everyone to picking a side.&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-17T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Animations/">
	<title>Liang Ze: Animated GIFs</title>
	<link>http://sheaves.github.io/Animations/</link>
	<content:encoded>&lt;p&gt;I really should be posting about character theory, but I got distracted making some aesthetic changes to this blog (new icon and favicon!) and creating animations like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://sheaves.github.io/images/harmonograph_loop.gif&quot; alt=&quot;harmonograph&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;no_out&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;I’m not putting this in a SageCell because this could take quite a while, especially if you increase the number of frames (by changing the parameters in &lt;code&gt;srange&lt;/code&gt;), but feel free to try it out on your own copy of Sage. It saves an animated GIF that loops forever (&lt;code&gt;iterations = 0&lt;/code&gt;) at the location specified by &lt;code&gt;savefile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more information, checkout the &lt;a href=&quot;http://www.sagemath.org/doc/reference/plotting/sage/plot/animate.html&quot;&gt;Sage reference for animated plots&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-12T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/08/playing-an-infinitely-repeated-game-in-class/">
	<title>Vince Knight: Playing an infinitely repeated game in class</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/08/playing-an-infinitely-repeated-game-in-class/</link>
	<content:encoded>&lt;p&gt;Following &lt;a href=&quot;http://vincent-knight.com/unpeudemath/pedagogy/2015/02/26/this-class-teaches-me-to-not-trust-my-classmates/&quot;&gt;the iterated Prisoner’s dilemma tournament my class I and I played last week&lt;/a&gt; we went on to play a version of the game where we repeated things infinitely many times.
This post will briefly describe what we got up to.&lt;/p&gt;

&lt;p&gt;As you can read in the post about this activity from &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/02/iterated-prisoners-dilemma-with-twist.html&quot;&gt;last year&lt;/a&gt;, the way we play for an infinite amount of time (that would take a while) is to apply a discounting factor \(\delta\) to the payoffs &lt;strong&gt;and&lt;/strong&gt; to interpret this factor as the probability with which the game continues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before I go any further (and put up pictures with the team names) I need to explain something (for the readers who are not my students).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For every class I teach I insist in spending a fair while going over a mid module feedback form that is used at Cardiff University (asking students to detail 3 things they like and don’t like about the class).
One student wrote (what is probably my favourite piece of feedback ever):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Vince is a dick… but in a good way.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anyway, I mentioned that to the class during my feedback-feedback session and that explains one of the team names (which I found pretty amusing):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Orange&lt;/li&gt;
  &lt;li&gt;Where’s the gun&lt;/li&gt;
  &lt;li&gt;We don’t know&lt;/li&gt;
  &lt;li&gt;Vince is a good dick&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we had the team names set up (and I stopped trying to stop laughing) I wrote some quick Python code that we could run after each iteration:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;continue_prob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue_prob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Game continues'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Game Over'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We started off by playing with (\delta=.5) and here are the results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/infinite_pd_2015_results.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the various duels here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/infinite_pd_2015_duels.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, very little cooperation happened this way and in fact because everyone could see what everyone else was doing Orange took advantage of the last round to create a coalition and win.
We also see one particular duel that cost two teams very highly (because the ‘dice rolls’ did not really help).&lt;/p&gt;

&lt;p&gt;After this I suggest to the class that we play again but that no one got to see what was happening to the other teams (this was actually suggested to me by students the year before).
We went ahead with this and used \(delta=.25\): so the game had a less chance of carrying on.&lt;/p&gt;

&lt;p&gt;You can see the result and duels here (this had to be squeezed on to a board that could be hidden):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/infinite_pd_2015_second_game.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on the theory we would expect more cooperation to be likely but as you can see this did not happen.&lt;/p&gt;

&lt;p&gt;The tie at the end was settled with a game of Rock Paper Scissors Lizard Spock which actually gave place to a rematch of the &lt;a href=&quot;http://vincent-knight.com/unpeudemath/pedagogy/2015/02/13/rock-paper-scissors-lizard-spock/&quot;&gt;Rock Paper Scissors Lizard Spock tournament&lt;/a&gt; we played earlier.
Except this time Laura, lost her crown :)&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-08T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences">
	<title>Sébastien Labbé: Arnoux-Rauzy-Poincaré sequences</title>
	<link>http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences</link>
	<content:encoded>&lt;div class=&quot;document&quot;&gt;
&lt;p&gt;In a recent article with Valérie Berthé &lt;a class=&quot;citation-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences#bl15&quot; id=&quot;id1&quot;&gt;[BL15]&lt;/a&gt;, we provided a multidimensional
continued fraction algorithm called Arnoux-Rauzy-Poincaré (ARP) to construct,
given any vector \(v\in\mathbb{R}_+^3\), an infinite word
\(w\in\{1,2,3\}^\mathbb{N}\) over a three-letter alphabet such that the
frequencies of letters in \(w\) exists and are equal to \(v\) and such that
the number of factors (i.e.  finite block of consecutive letters) of length
\(n\) appearing in \(w\) is linear and less than \(\frac{5}{2}n+1\). We
also conjecture that for almost all \(v\) the contructed word describes a
discrete path in the positive octant staying at a bounded distance from the
euclidean line of direction \(v\).&lt;/p&gt;
&lt;p&gt;In Sage, you can construct this word using the next version of my package
slabbe-0.2 (not released yet, email me to press me to finish it). The one with
frequencies of letters proportionnal to \((1, e, \pi)\) is:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: from slabbe.mcf import algo
sage: D = algo.arp.substitutions()
sage: it = algo.arp.coding_iterator((1,e,pi))
sage: w = words.s_adic(it, repeat(1), D)
word: 1232323123233231232332312323123232312323...
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;The factor complexity is close to 2n+1 and the balance is often less or equal
to three:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: w[:10000].number_of_factors(100)
202
sage: w[:100000].number_of_factors(1000)
2002
sage: w[:1000].balance()
3
sage: w[:2000].balance()
3
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Note that bounded distance from the euclidean line almost surely was proven in
&lt;a class=&quot;citation-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences#dhs2013&quot; id=&quot;id2&quot;&gt;[DHS2013]&lt;/a&gt; for Brun algorithm, another MCF algorithm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other approaches: Standard model and billiard sequences&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Other approaches have been proposed to construct such discrete lines.&lt;/p&gt;
&lt;p&gt;One of them is the standard model of Eric Andres &lt;a class=&quot;citation-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences#a03&quot; id=&quot;id3&quot;&gt;[A03]&lt;/a&gt;. It is also equivalent
to billiard sequences in the cube. It is well known that the factor complexity
of billiard sequences is quadratic \(p(n)=n^2+n+1\) &lt;a class=&quot;citation-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences#amst94&quot; id=&quot;id4&quot;&gt;[AMST94]&lt;/a&gt;.
Experimentally, we can verify this. We first create a billiard word of some
given direction:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: from slabbe import BilliardCube
sage: v = vector(RR, (1, e, pi))
sage: b = BilliardCube(v)
sage: b
Cubic billiard of direction (1.00000000000000, 2.71828182845905, 3.14159265358979)
sage: w = b.to_word()
sage: w
word: 3231232323123233213232321323231233232132...
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;We create some prefixes of \(w\) that we represent internally as &lt;tt class=&quot;docutils literal&quot;&gt;char*&lt;/tt&gt;.
The creation is slow because the implementation of billiard words in my
optional package is in Python and is not that efficient:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: p3 = Word(w[:10^3], alphabet=[1,2,3], datatype='char')
sage: p4 = Word(w[:10^4], alphabet=[1,2,3], datatype='char') # takes 3s
sage: p5 = Word(w[:10^5], alphabet=[1,2,3], datatype='char') # takes 32s
sage: p6 = Word(w[:10^6], alphabet=[1,2,3], datatype='char') # takes 5min 20s
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;We see below that exactly \(n^2+n+1\) factors of length \(n&amp;lt;20\) appears in
the prefix of length 1000000 of \(w\):&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: A = ['n'] + range(30)
sage: c3 = ['p_(w[:10^3])(n)'] + map(p3.number_of_factors, range(30))
sage: c4 = ['p_(w[:10^4])(n)'] + map(p4.number_of_factors, range(30))
sage: c5 = ['p_(w[:10^5])(n)'] + map(p5.number_of_factors, range(30)) # takes 4s
sage: c6 = ['p_(w[:10^6])(n)'] + map(p6.number_of_factors, range(30)) # takes 49s
sage: ref = ['n^2+n+1'] + [n^2+n+1 for n in range(30)]
sage: T = table(columns=[A,c3,c4,c5,c6,ref])
sage: T
  n    p_(w[:10^3])(n)   p_(w[:10^4])(n)   p_(w[:10^5])(n)   p_(w[:10^6])(n)   n^2+n+1
+----+-----------------+-----------------+-----------------+-----------------+---------+
  0    1                 1                 1                 1                 1
  1    3                 3                 3                 3                 3
  2    7                 7                 7                 7                 7
  3    13                13                13                13                13
  4    21                21                21                21                21
  5    31                31                31                31                31
  6    43                43                43                43                43
  7    52                55                56                57                57
  8    63                69                71                73                73
  9    74                85                88                91                91
  10   87                103               107               111               111
  11   100               123               128               133               133
  12   115               145               151               157               157
  13   130               169               176               183               183
  14   144               195               203               211               211
  15   160               223               232               241               241
  16   176               253               263               273               273
  17   192               285               296               307               307
  18   208               319               331               343               343
  19   224               355               368               381               381
  20   239               392               407               421               421
  21   254               430               448               463               463
  22   268               470               491               507               507
  23   282               510               536               553               553
  24   296               552               583               601               601
  25   310               596               632               651               651
  26   324               642               683               703               703
  27   335               687               734               757               757
  28   345               734               787               813               813
  29   355               783               842               871               871
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Billiard sequences generate paths that are at a bounded distance from an
euclidean line. This is equivalent to say that the balance is finite. The
balance is defined as the supremum value of difference of the number of
apparition of a letter in two factors of the same length. For billiard
sequences, the balance is 2:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: p3.balance()
2
sage: p4.balance() # takes 2min 37s
2
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Other approaches: Melançon and Reutenauer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Melançon and Reutenauer &lt;a class=&quot;citation-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences#mr13&quot; id=&quot;id5&quot;&gt;[MR13]&lt;/a&gt; also suggested a method that generalizes
Christoffel words in higher dimension. The construction is based on the
application of two substitutions generalizing the construction of sturmian
sequences. Below we compute the factor complexity and the balance of some of
their words over a three-letter alphabet.&lt;/p&gt;
&lt;p&gt;On a three-letter alphabet, the two morphisms are:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: L = WordMorphism('1-&amp;gt;1,2-&amp;gt;13,3-&amp;gt;2')
sage: R = WordMorphism('1-&amp;gt;13,2-&amp;gt;2,3-&amp;gt;3')
sage: L
WordMorphism: 1-&amp;gt;1, 2-&amp;gt;13, 3-&amp;gt;2
sage: R
WordMorphism: 1-&amp;gt;13, 2-&amp;gt;2, 3-&amp;gt;3
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Example 1: periodic case \(LRLRLRLRLR\dots\). In this example, the factor
complexity seems to be around \(p(n)=2.76n\) and the balance is at least 28:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: from itertools import repeat, cycle
sage: W = words.s_adic(cycle((L,R)),repeat('1'))
sage: W
word: 1213122121313121312212212131221213131213...
sage: map(W[:10000].number_of_factors, [10,20,40,80])
[27, 54, 110, 221]
sage: [27/10., 54/20., 110/40., 221/80.]
[2.70000000000000, 2.70000000000000, 2.75000000000000, 2.76250000000000]
sage: W[:1000].balance()  # takes 1.6s
21
sage: W[:2000].balance()  # takes 6.4s
28
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Example 2: \(RLR^2LR^4LR^8LR^{16}LR^{32}LR^{64}LR^{128}\dots\) taken from
the conclusion of their article. In this example, the factor complexity seems
to be \(p(n)=3n\) and balance at least as high (=bad) as \(122\):&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: W = words.s_adic([R,L,R,R,L,R,R,R,R,L]+[R]*8+[L]+[R]*16+[L]+[R]*32+[L]+[R]*64+[L]+[R]*128,'1')
sage: W.length()
330312
sage: map(W.number_of_factors, [10, 20, 100, 200, 300, 1000])
[29, 57, 295, 595, 895, 2981]
sage: [29/10., 57/20., 295/100., 595/200., 895/300., 2981/1000.]
[2.90000000000000,
 2.85000000000000,
 2.95000000000000,
 2.97500000000000,
 2.98333333333333,
 2.98100000000000]
sage: W[:1000].balance()  # takes 1.6s
122
sage: W[:2000].balance()  # takes 6s
122
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Example 3: some random ones. The complexity \(p(n)/n\) occillates between 2
and 3 for factors of length \(n=1000\) in prefixes of length 100000:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: for _ in range(10):
....:     W = words.s_adic([choice((L,R)) for _ in range(50)],'1')
....:     print W[:100000].number_of_factors(1000)/1000.
2.02700000000000
2.23600000000000
2.74000000000000
2.21500000000000
2.78700000000000
2.52700000000000
2.85700000000000
2.33300000000000
2.65500000000000
2.51800000000000
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;For ten randomly generated words, the balance goes from 6 to 27 which is much
more than what is obtained for billiard words or by our approach:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: for _ in range(10):
....:     W = words.s_adic([choice((L,R)) for _ in range(50)],'1')
....:     print W[:1000].balance(), W[:2000].balance()
12 15
8 24
14 14
5 11
17 17
14 14
6 6
19 27
9 16
12 12
&lt;/pre&gt;&lt;/div&gt;



&lt;div class=&quot;section&quot; id=&quot;references&quot;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;bl15&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences#id1&quot;&gt;[BL15]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;V. Berthé, S. Labbé,
Factor Complexity of S-adic words generated by the Arnoux-Rauzy-Poincaré Algorithm,
&lt;em&gt;Advances in Applied Mathematics&lt;/em&gt; 63 (2015) 90-130.
&lt;a class=&quot;reference external&quot; href=&quot;http://dx.doi.org/10.1016/j.aam.2014.11.001&quot;&gt;http://dx.doi.org/10.1016/j.aam.2014.11.001&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;dhs2013&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences#id2&quot;&gt;[DHS2013]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Delecroix, Vincent, Tomás Hejda, and Wolfgang Steiner. “Balancedness of
Arnoux-Rauzy and Brun Words.” In Combinatorics on Words, 119–31. Springer,
2013. &lt;a class=&quot;reference external&quot; href=&quot;http://link.springer.com/chapter/10.1007/978-3-642-40579-2_14&quot;&gt;http://link.springer.com/chapter/10.1007/978-3-642-40579-2_14&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;a03&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences#id3&quot;&gt;[A03]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;E. Andres,
Discrete linear objects in dimension n: the standard model,
Graphical Models 65 (2003) 92-111.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;amst94&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences#id4&quot;&gt;[AMST94]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;P. Arnoux, C. Mauduit, I. Shiokawa, J. I. Tamura,
Complexity of sequences defined by billiards in the cube,
Bull. Soc. Math. France 122 (1994) 1-12.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;mr13&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2015/02/arnoux-rauzy-poincare-sequences#id5&quot;&gt;[MR13]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;G. Melançon, C. Reutenauer,
On a class of Lyndon words extending Christoffel words and related to a
multidimensional continued fraction algorithm.
J. Integer Seq. 16, No. 9, Article 13.9.7, 30 p., electronic only (2013).
&lt;a class=&quot;reference external&quot; href=&quot;https://cs.uwaterloo.ca/journals/JIS/VOL16/Reutenauer/reut3.html&quot;&gt;https://cs.uwaterloo.ca/journals/JIS/VOL16/Reutenauer/reut3.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2015-02-26T16:22:00+00:00</dc:date>
	<dc:creator>Sébastien Labbé</dc:creator>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/02/26/this-class-teaches-me-to-not-trust-my-classmates/">
	<title>Vince Knight: This class teaches me to not trust my classmates: An iterated prisoners dilemma in class</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/02/26/this-class-teaches-me-to-not-trust-my-classmates/</link>
	<content:encoded>&lt;p&gt;On Monday, in class we played an iterated prisoner’s dilemma tournament.
I have done this many times (both in outreach events with &lt;a href=&quot;http://www.profpaulharper.com/&quot;&gt;Paul Harper&lt;/a&gt; and in this class).
This is always a lot of fun but none more so than last year when Paul’s son Thomas joined us.
You can read about that one &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/02/iterated-prisoners-dilemma-tournament.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The format of the game is as close to that of Axelrod’s original tournament as I think it can be.
I split the class in to 4 teams and we create a round robin where each team plays every other team at 8 consecutive rounds of the prisoner’s dilemma:&lt;/p&gt;



&lt;p&gt;The utilities represent ‘years in prison’ and over the 3 matches that each team will play (against every other team) the goal is to reduce the total amount of time spent in prison.&lt;/p&gt;

&lt;p&gt;Here are some photos from the game:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/pd_2015_01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/pd_2015_02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/pd_2015_03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are the scores:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/pd_2015_results.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that ‘We will take the gun’ acquired the least total score and so they won the collection of cookies etc…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/pd_2015_cookies.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(The names followed a promise from me to let the team with the coolest name have a nerf gun… Can’t say this had the wanted effect…)&lt;/p&gt;

&lt;p&gt;At one point during the tournament, one team actually almost declared a strategy which was cool:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We will cooperate until you defect at which point we will reevaluate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was pretty cool as I hadn’t discussed at all what a strategy means in a repeated game (ie I had not discussed the fact that a strategy in a repeated game takes count of both play histories).&lt;/p&gt;

&lt;p&gt;Here are all the actual duels:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/pd_2015_duels.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll also notice at the end that a coalition formed and one team agreed to defect so that they could share the prize.
This happens about 50% of the time when we play this game but I never cease to be amused by it.
Hopefully everyone found this fun and perhaps some even already agree with a bit of feedback I received on this course last year:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘This class teaches me to not trust my classmates’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the other really cool things that happened after this class was H asking for a hand to submit a strategy to my Axelrod repository.
She built a strategy called ‘Once Bitten’ that performs pretty well!
You can see it &lt;a href=&quot;https://github.com/drvinceknight/Axelrod/blob/master/axelrod/strategies/oncebitten.py&quot;&gt;here&lt;/a&gt; (click on ‘Blame’ and you can see the code that she wrote).&lt;/p&gt;

&lt;p&gt;(Big thanks to Jason for keeping track of the scores and to Geraint for helping and grabbing some nice pictures)&lt;/p&gt;</content:encoded>
	<dc:date>2015-02-26T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/code/2015/02/20/an-iterated-prisoners-dilemma-on-github/">
	<title>Vince Knight: An iterated prisoners dilemma on github</title>
	<link>http://drvinceknight.github.io/unpeudemath/code/2015/02/20/an-iterated-prisoners-dilemma-on-github/</link>
	<content:encoded>&lt;p&gt;In the 1980s Axelrod ran a computer tournament inviting people to contribute code that specified strategies in an iterated prisoner’s dilemma tournament.
I have just finished putting the final pieces on a Python repository on github (&lt;a href=&quot;https://github.com/drvinceknight/Axelrod&quot;&gt;github.com/drvinceknight/Axelrod&lt;/a&gt;) to carry out the same tournament and would be delighted for people to contribute strategies via pull request (or indeed via any way possible: just get in touch).
In this post I’ll describe the process of adding a strategy to the repository (the first 3 minutes of a video at the end of this post show you exactly what you are required to do).&lt;/p&gt;

&lt;p&gt;For a good overview of the iterated prisoner’s dilemma take a look at this page about &lt;a href=&quot;http://cs.stanford.edu/people/eroberts/courses/soco/projects/1998-99/game-theory/axelrod.html&quot;&gt;Axelrod’s tournament&lt;/a&gt; but in a nutshell the idea is that two players (prisoners) repeatedly play the following game:&lt;/p&gt;



&lt;p&gt;If in a particular round they both cooperate (first row/column) they both accrue 2 years in prison.
If one defects (second row/column) and the other cooperates: the defector gets 0 extra years in prison and the cooperator 5.
If they both defect they each accrue 4 years in prison.&lt;/p&gt;

&lt;p&gt;Axelrod’s tournament invited contribution of strategies that took account of the history of both players over several rounds.
Thus a strategy that punished defectors would perhaps wait until a defection to do that (cooperating until then).
The tournament was a round robin with the lowest total/mean years in prison being deemed the winner.&lt;/p&gt;

&lt;p&gt;This tournament has often been used to describe how cooperation can emerge in a population: the tit for tat strategy (which starts by cooperating and then simply repeats the previous action) won! (In fact it won both times as the tournament was repeated.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I have put together a github repository that allows anyone to contribute a strategy using Python to this tournament.&lt;/strong&gt;
You can find it here: &lt;a href=&quot;https://github.com/drvinceknight/Axelrod&quot;&gt;https://github.com/drvinceknight/Axelrod&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At present I have only implemented 6 strategies and you can see the result here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/axelrod_results.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To contribute you really only need to write very simple python code.
Here is the code for the tit for tat strategy:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axelrod&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TitForTat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    A player starts by cooperating and then mimics previous move by opponent.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Begins by playing 'C':&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        This is affected by the history of the opponent: the strategy simply repeats the last action of the opponent&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;IndexError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__repr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        The string method for the strategy.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Tit For Tat'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is more or less just 3 lines of code.
I’ll now briefly describe adding another strategy to &lt;a href=&quot;https://github.com/drvinceknight/Axelrod&quot;&gt;this repository&lt;/a&gt; (and I will do it entirely using the github web interface).&lt;/p&gt;

&lt;p&gt;I am going to add a strategy called: ‘alternator’ which simply alternates strategies.&lt;/p&gt;

&lt;p&gt;First I navigate to this url: &lt;a href=&quot;https://github.com/drvinceknight/Axelrod/tree/master/axelrod/strategies&quot;&gt;https://github.com/drvinceknight/Axelrod/tree/master/axelrod/strategies&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/strategies_on_github.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here I can just click on the &lt;code&gt;+&lt;/code&gt; at the top of the page (after: &lt;code&gt;Axelrod/axelrod/strategies/+&lt;/code&gt;).
As this is my own github repository I can just immediately start creating a file, anyone else would be taken the github process of forking the repository:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/creating_alternator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After writing the code I simply scroll down to the bottom where I am able to commit the change but others would be able to submit a pull request:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/committing_alternator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us take a look at the actual code I wrote for the alternator class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axelrod&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Alternator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    A player who alternates between cooperating and defecting&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Alternate 'C' and 'D'&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'D'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__repr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        The string method for the strategy:&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Alternator'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This just inherits from a &lt;code&gt;Player&lt;/code&gt; class I have created previously and all it really requires are two methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;strategy&lt;/code&gt;: this takes in the player itself (&lt;code&gt;self&lt;/code&gt;) and the opponent and must return either &lt;code&gt;C&lt;/code&gt; or &lt;code&gt;D&lt;/code&gt;.
  Take a look through the other strategies to see how this can be written.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;__repr__&lt;/code&gt;: this just returns what we want the strategy to look like when printed out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After writing the code itself we also need to modify the &lt;code&gt;__init__.py&lt;/code&gt; file in the &lt;code&gt;strategies&lt;/code&gt; directory.
Here I have added the relevant lines:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cooperator&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;defector&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grudger&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;titfortat&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gobymajority&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;alternator&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# &amp;lt;- Adding this line&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Defector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Cooperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TitForTat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Grudger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GoByMajority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Alternator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# And adding this line&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now if you want to be super awesome you can also add a test for your strategy (this helps keep things organised and working but do not let this be an obstacle to contributing a strategy).
If you want to see what the test for the alternator looks like you can find it &lt;a href=&quot;https://github.com/drvinceknight/Axelrod/blob/master/axelrod/tests/test_alternator.py&quot;&gt;here&lt;/a&gt; (the README has info as to how to run the tests).&lt;/p&gt;

&lt;p&gt;The latest results (which as of the time of writing now only include the alternator as an extra strategy - &lt;strong&gt;EDIT&lt;/strong&gt; Just before publishing this Geraint sent me a pull request for another strategy: this image is the live one from the github repo so will have more and more strategies) can be found seen here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/drvinceknight/Axelrod/raw/master/results.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you clone &lt;a href=&quot;https://github.com/drvinceknight/Axelrod&quot;&gt;this repository&lt;/a&gt; you can obtain that plot by running:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python run_tournament.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;: Please contribute a strategy to this Python based version of Axelrod’s tournament on github: &lt;a href=&quot;https://github.com/drvinceknight/Axelrod&quot;&gt;https://github.com/drvinceknight/Axelrod&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This would hopefully be of interest if:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You are slightly interested in Axelrod’s work&lt;/li&gt;
  &lt;li&gt;You like Python&lt;/li&gt;
  &lt;li&gt;You like Game Theory&lt;/li&gt;
  &lt;li&gt;You have never had a pull request accepted before&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a short video showing exactly how to contribute using nothing else than the github web interface (the first 3 minutes are all you really need to do):&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
    
    
&lt;/div&gt;</content:encoded>
	<dc:date>2015-02-20T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/gametheory/2015/02/15/on-the-worst-play-in-superbowl-history/">
	<title>Vince Knight: On the worst play in superbowl history</title>
	<link>http://drvinceknight.github.io/unpeudemath/gametheory/2015/02/15/on-the-worst-play-in-superbowl-history/</link>
	<content:encoded>&lt;p&gt;In my last game theory class I gave students the choice between starting to rigorously look at extensive form games or to look at the last play of this years superbowl.
No one objected to looking at the superbowl play (which has been called &lt;a href=&quot;https://www.youtube.com/watch?v=CZSqjfYaX4M&quot;&gt;‘the worst play in superbowl history’&lt;/a&gt;) as an opportunity to go over all the normal form game theory we have seen so far.&lt;/p&gt;

&lt;p&gt;First of all I had to give a brief overview of American football so I drew a couple of pictures on the board, here is more or less what I drew:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/football_field.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I highlighted that the offensive team (the blue guys in my picture) can basically at any point do one of two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pass&lt;/strong&gt;: the quarter back throws the ball down field.
  This works better when there is more room down the field for guys to get open but in general is a high risk high reward player.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Run&lt;/strong&gt;: the quarter back hands the ball to the &lt;em&gt;running back&lt;/em&gt;.
  This in general ensures a small gain of yards and is less risky (but has less reward).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The defence can (at a very simplistic level) set up in two ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Defend the pass&lt;/strong&gt;: they might drop some of guys (red circles) ‘out of the box’ in a way as to cover blue guys trying to get open.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Defend the run&lt;/strong&gt;: they might drop more guys (red crosses) ‘in to the box’, leaving less people to cover the pass but having more people ready to stop the running back from gaining yards.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This immediately lets us set up (in a simplistic way) every phase of play in American Football as a two player normal form game where the &lt;em&gt;Offense&lt;/em&gt; has strategy set: \(S_O=\{\text{P},\text{R}\}\) and the &lt;em&gt;Defense&lt;/em&gt; has strategy set: \(S_D=\{\text{DP},\text{DR}\}\).&lt;/p&gt;

&lt;p&gt;Now, to return to what is being called ‘the worst play in superbowl history’:&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
        
    
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The Seahawks have one of the best running backs in the game (funny interview of his &lt;a href=&quot;https://www.youtube.com/watch?v=G1kvwXsZtU8&quot;&gt;here&lt;/a&gt;);&lt;/li&gt;
  &lt;li&gt;They had the ball very close to the score line with downs (attempts) to spare.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everyone seems to be saying that ‘not rushing’ was an idiotic thing to do.
&lt;a href=&quot;http://www.economist.com/blogs/gametheory/2015/02/game-theory-american-football&quot;&gt;This article by the Economist&lt;/a&gt; explains things pretty well (including the back story), but in my class on Friday I thought I would go through the mathematics of it all.&lt;/p&gt;

&lt;p&gt;First of all let us build some basic utilities (to be clear I am more or less pulling these out of a hat although I will carry out some Monte Carlo simulation at the end of this blog post).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let us assume (because Lynch is awesome) that on average running against a run defence would work 60% of the time;&lt;/li&gt;
  &lt;li&gt;Running against a pass defence would work 98% of the time;&lt;/li&gt;
  &lt;li&gt;Passing against a rush defence would work 90% of the time;&lt;/li&gt;
  &lt;li&gt;Passing against a pass defence would work 50% of the time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our normal form game then looks like this (assuming that the game is zero sum):&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;If the Seahawks were 100% going to run the ball&lt;/strong&gt;, in such a way as that the defence were in no doubt then the obvious best response is to use a rush defence (in reality this is actually what happened and the defensive player that was fairly isolated just made an amazing play).
Then, the chance of the Seahawks scoring is 60%.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does game theory say should happen?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all what should the offence do to ensure that the defense sometimes defends the pass?
The theory tells us that the offence should make the defense indifferent.
So let us assume that the offence runs \(x\) of the time so that the player is playing mixed strategy: \(\sigma_{\text{O}}=(x,1-x)\).
The Nash equilibrium strategy for the offence would then obey the following equation:&lt;/p&gt;



&lt;p&gt;the above corresponds to:&lt;/p&gt;



&lt;p&gt;which has solution: \(x=20/30\approx.51\).
So to make the defense indifferent, the offense should run &lt;em&gt;only&lt;/em&gt; 51% of the time!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This in itself is not a Nash equilibria:&lt;/strong&gt; we need to calculate the strategy that the defense should play so as to make the offense indifferent.
We let \(\sigma_{\text{D}}=(y,1,y)\) and now need to solve:&lt;/p&gt;



&lt;p&gt;the above corresponds to:&lt;/p&gt;



&lt;p&gt;which has solution: \(y=8/13\approx.62\).
So to make the offense indifferent, the defense should defend the run 62% of the time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How good is the Nash equilibria?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We discussed earlier that if the offense passed with 0 probability (so in fact &lt;strong&gt;always&lt;/strong&gt; ran in that situation) then the probability of scoring would be 60% (because the defense would know and just defend the run).
The Nash equilibria we have calculated ensured that the play calling is balanced: which ‘keeps the defense honest’.
What is the effect of this on offenses chances of scoring?&lt;/p&gt;

&lt;p&gt;To find this out we can simply calculate the utility at the Nash equilibria.
We can do this by calculating:&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;or&lt;/strong&gt; because of the indifference ensured earlier we can just calculate:&lt;/p&gt;



&lt;p&gt;So the Nash Equilibria makes things \(74.62/60\approx 1.24\) times better for the offense.
Thus, in way, by picking a strategy in that particular instance that ended up not paying off, the offense ensured a larger long term chance of scoring in a similar situation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some sensitivity analysis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have completely picked numbers more or less out of a hat.
Thankfully we can combine the above analysis with some &lt;a href=&quot;http://en.wikipedia.org/wiki/Monte_Carlo_method&quot;&gt;Monte Carlo simulation&lt;/a&gt; to see how much of an effect the assumptions have.&lt;/p&gt;

&lt;p&gt;Let us consider the general form of our game as:&lt;/p&gt;



&lt;p&gt;If the &lt;strong&gt;offense always runs&lt;/strong&gt; then the expected chance of scoring is simply \(A\).&lt;/p&gt;

&lt;p&gt;Let us make the following assumptions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Running against a pass defense is always better than running against a run defense: \(A&amp;lt;B\).&lt;/li&gt;
  &lt;li&gt;Passing against a run defense is always better than passing against a pass defense: \(C&amp;gt;D\).&lt;/li&gt;
  &lt;li&gt;Passing against a run defense is always better than running against a run defense: \(A&amp;lt;C\).&lt;/li&gt;
  &lt;li&gt;Running against a pass defense is always better than passing against a pass defense: \(B&amp;gt;D\).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This simple set of assumptions ensures that no strategies are dominated for either player and so our Nash equilibria will be a mixed Nash equilibrium.
Let us find the expected chance of scoring for the offence at the Nash equilibrium.&lt;/p&gt;

&lt;p&gt;The defense will ensure that the offense is indifferent:&lt;/p&gt;



&lt;p&gt;which is equivalent to:&lt;/p&gt;



&lt;p&gt;This has solution:&lt;/p&gt;



&lt;p&gt;(which thanks to our assumptions is indeed a probability distribution.)&lt;/p&gt;

&lt;p&gt;Now thanks to this we can compute \(\alpha\) which will be some measure of how much better things are for the offense at the Nash equilibria (calculated as \(1.24\) earlier on).&lt;/p&gt;



&lt;p&gt;which we can compute at Nash equilibrium as:&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Monte carlo simulation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that that hard work is done let us write some very simple Python code that will randomly sample values for \(A,B,C,D\) according to our assumptions and then we can see what effect this has on \(alpha\).&lt;/p&gt;

&lt;p&gt;Let us sample our input parameters according to the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\(A \sim \mathcal{N} (60,10^2)\): normal distribution with mean 60 and standard deviation 10.
  Running against a run defense would work on average 60% of the time with a fair bit of variation.&lt;/li&gt;
  &lt;li&gt;\(B \sim \mathcal{N} (95,5^2)\): normal distribution with mean 95 and standard deviation 5.
  Running against a pass defense works predictably well.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;\(C \sim \mathcal{N} (85,15^2)\): normal distribution with mean 85 and standard deviation 15.
  Passing against a run defense works well but not robustly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;\(D \sim \mathcal{N} (50,20^2)\): normal distribution with mean 50 and standard deviation 20.
  Passing against a pass defense does not well very well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After sampling each parameter, a set of parameters is only accepted as valid if it follows the assumptions mentioned earlier (all the inequalities).
Here is what the parameters look like after running 100000 simulations:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/parameters.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now to look at some of the results.
Here is what \(y\) looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/y.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recall that \(y\) is the probability with which the defense should defend the run.
Finally, let us take a look at what \(\alpha\) looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/alpha.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recall that \(\alpha\) denotes the ratio of the scoring probability when the Nash equilibrium is played over the ‘just run all the time’.
The graph is rather unhelpful as the tail is extremely long &lt;em&gt;but&lt;/em&gt; there are some instances of our Monte Carlo simulation that have yielded a ten fold increase in scoring probability (this will occur when \(A\) is pretty low to begin with).&lt;/p&gt;

&lt;p&gt;The mean ratio (based on our assumptions) is \(1.24\) and importantly the minimum is greater than \(1\).&lt;/p&gt;

&lt;p&gt;All of this shows that even with a very broad relaxation of our assumptions it makes sense to &lt;em&gt;at times&lt;/em&gt; run the ball.
So game theory does in effect say that this was not ‘the worst play in super bowl history’ as it makes sense to &lt;em&gt;at times&lt;/em&gt; pass in that situation.&lt;/p&gt;

&lt;p&gt;TLDR: (Based on the assumptions) the coach who truly will at time pass in that situation will win the superbowl 24% more of the time than the coach who would only ever run.&lt;/p&gt;

&lt;p&gt;Nonetheless this is ignoring a lot of the subtleties of the game itself, non more so than the fact the Patriots in fact came out in a run defense formation and the game was simply won by a great defensive play.&lt;/p&gt;

&lt;p&gt;The code for all this can be found &lt;a href=&quot;https://gist.github.com/33a13a6ce053178c3c52&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-02-15T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Group-Ring-Regular-Representation/">
	<title>Liang Ze: The Group Ring and the Regular Representation</title>
	<link>http://sheaves.github.io/Group-Ring-Regular-Representation/</link>
	<content:encoded>&lt;p&gt;In the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Decomposing-Representations/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt;, we saw how to decompose a given group representation into irreducibles. But we still don’t know much about the irreducible representations of a (finite) group. What do they look like? How many are there? Infinitely many?&lt;/p&gt;

&lt;p&gt;In this post, we’ll construct the &lt;a href=&quot;http://en.wikipedia.org/wiki/Group_ring&quot; target=&quot;_blank&quot;&gt;group ring&lt;/a&gt; of a group. Treating this as a vector space, we get the &lt;a href=&quot;http://en.wikipedia.org/wiki/Regular_representation&quot; target=&quot;_blank&quot;&gt;regular representation&lt;/a&gt;, which turns out to contain &lt;em&gt;all&lt;/em&gt; the irreducible representations of $G$!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;the-group-ring-fg&quot;&gt;The group ring $FG$&lt;/h2&gt;

&lt;p&gt;Given a (finite) group $G$ and a field $F$, we can treat each element of $G$ as a basis element of a vector space over $F$. The resulting vector space generated by $g \in G$ is&lt;/p&gt;



&lt;p&gt;Let’s do this is Sage with the group $G = D_4$ and the field $F = \mathbb{Q}$:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;We can view $v \in FG$ as vector in $F^n$, where $n$ is the size of $G$ : &lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Here, we’re treating each $g \in G$ as a basis element of $FG$&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Vectors in $FG$ are added component-wise:&lt;/p&gt;



&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;multiplication-as-a-linear-transformation&quot;&gt;Multiplication as a linear transformation&lt;/h2&gt;

&lt;p&gt;In fact $FG$ is also a  &lt;em&gt;ring&lt;/em&gt; (called the &lt;a href=&quot;http://en.wikipedia.org/wiki/Group_ring&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;group ring&lt;/strong&gt;&lt;/a&gt;), because we can multiply vectors using the multiplication rule of the group $G$:&lt;/p&gt;



&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;That wasn’t very illuminating. However, treating multiplication by $v \in FG$ as a function&lt;/p&gt;



&lt;p&gt;one can check that each $T_v$ is a linear transformation! We can thus represent $T_v$ as a matrix whose columns are $T_v(g), g \in G$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;the-regular-representation&quot;&gt;The regular representation&lt;/h2&gt;

&lt;p&gt;We’re especially interested in $T_g, g \in G$. These are invertible, with inverse $T_{g^{-1}}$, and their matrices are all permutation matrices, because multiplying by $g \in G$ simply permutes elements of $G$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Define a function $\rho_{FG}$ which assigns to each $g\in G$ the corresponding $T_g$:&lt;/p&gt;



&lt;p&gt;Then $(FG,\rho_{FG})$ is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Regular_representation&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;regular representation&lt;/strong&gt;&lt;/a&gt; of $G$ over $F$. &lt;/p&gt;

&lt;p&gt;The regular representation of any non-trivial group is not irreducible. In fact, it is a direct sum of &lt;em&gt;all&lt;/em&gt; the irreducible representations of $G$! What’s more, if $(V,\rho)$ is an irreducible representation of $G$ and $\dim V = k$, then $V$ occurs $k$ times in the direct-sum decomposition of $FG$!&lt;/p&gt;

&lt;p&gt;Let’s apply the decomposition algorithm in the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Decomposing-Representations/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt; to $(FG,\rho_{FG})$ (this might take a while to run):&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;So the regular representation of $D_4$ decomposes into four (distinct) $1$-dim representations and two (isomorphic) $2$-dim ones.&lt;/p&gt;

&lt;h2 id=&quot;building-character&quot;&gt;Building character&lt;/h2&gt;

&lt;p&gt;We’ve spent a lot of time working directly with representations of a group. While more concrete, the actual matrix representations themselves tend to be a little clumsy, especially when the groups in question get large. &lt;/p&gt;

&lt;p&gt;In the next few posts, I’ll switch gears to &lt;a href=&quot;http://en.wikipedia.org/wiki/Character_theory&quot; target=&quot;_blank&quot;&gt;character theory&lt;/a&gt;, which is a simpler but more powerful way of working with group representations.&lt;/p&gt;</content:encoded>
	<dc:date>2015-02-15T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/02/13/rock-paper-scissors-lizard-spock/">
	<title>Vince Knight: Rock paper scissors lizard spock tournament</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/02/13/rock-paper-scissors-lizard-spock/</link>
	<content:encoded>&lt;p&gt;At the beginning of the week we played had one of my favourite class activity for my game theory class: the rock paper scissors lizard tournament :)
In this post I will briefly go over some of the results.&lt;/p&gt;

&lt;p&gt;If you are not familiar with &lt;a href=&quot;http://bigbangtheory.wikia.com/wiki/Rock_Paper_Scissors_Lizard_Spock&quot;&gt;Rock Paper Scissors Lizard Spock&lt;/a&gt; this is a good video that explains it:&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
        
    
&lt;/div&gt;

&lt;p&gt;This is the second time I play this in class and you can read about the first time &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/02/a-rock-paper-scissors-lizard-spock.html&quot;&gt;on my old blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is how the game went (thanks to Geraint for noting everything down and Saniya for grabbing the pictures!):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/plot_rpsls.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(You can find the tikz code to draw that &lt;a href=&quot;https://gist.github.com/drvinceknight/5260648fcab53f66ff30&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Here is a plot of the strategies played during the 1st, 2nd and 3rd rounds:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/round1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/round2.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/round3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The overall strategy profile played is here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/allstrategies.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just like last year we are not exactly at Nash equilibria.
In fact it seems that Scissors and Rock are being played a bit more often, so someone entering in to this game should respond by playing Spock (he vaporises Rock and smashes Scissors).&lt;/p&gt;

&lt;p&gt;Here are the strategies that at some point won a duel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/winningstrategies.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and here are the losing strategies:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/losingstrategies.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(All the code used to draw and analyse those plots is &lt;a href=&quot;https://gist.github.com/drvinceknight/17b2798f08a08989d474&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Hopefully my class found this interesting and fun.&lt;/p&gt;</content:encoded>
	<dc:date>2015-02-13T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/02/07/playing_against_a_mixed_strategy_in_class/">
	<title>Vince Knight: Playing against a mixed strategy in class</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/02/07/playing_against_a_mixed_strategy_in_class/</link>
	<content:encoded>&lt;p&gt;This post if very late but I have been very busy with some really exciting things.
I will describe some of the data gathered in class when we played against a random strategy played by a computer.
I have recently helped organise a conference in &lt;a href=&quot;https://www.python-namibia.org&quot;&gt;Namibia&lt;/a&gt; teaching Python.
It was a tremendous experience and I will write a post about that soon.&lt;/p&gt;

&lt;p&gt;We played against a modified version of matching pennies which we have used quite a few times:&lt;/p&gt;



&lt;p&gt;I wrote a sage interact that allows for a quick visualisation of a random sample from a mixed strategy.
You can find the code for that &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/02/best-responses-to-mixed-strategies-in.html&quot;&gt;at the blog post I wrote last year&lt;/a&gt;.
You can also find a python script with all the data from this year &lt;a href=&quot;https://gist.github.com/d9af5f1bc6b24b9033d2&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I handed out sheets of papers on which students would input their preferred strategies (‘H’ or ‘T’) whilst I sampled randomly from 3 different mixed strategies:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;\(\sigma_1 = (.2, .8)\)&lt;/li&gt;
  &lt;li&gt;\(\sigma_1 = (.9, .1)\)&lt;/li&gt;
  &lt;li&gt;\(\sigma_1 = (1/3, 2/3\)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Based on the class notation that implies that the computer was the row player and the students the column player.
The sampled strategies were (we played 6 rounds for each mixed strategy):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;TTTTTH&lt;/li&gt;
  &lt;li&gt;HHHHHH&lt;/li&gt;
  &lt;li&gt;HTTTHH&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;round-1&quot;&gt;Round 1&lt;/h3&gt;

&lt;p&gt;This mixed strategy (recall \(\sigma_1=(.2,.8)\)) implies that the computer will be mainly playing T (the second strategy equivalent to the second row), and so based on the bi-matrix it is in the students interest to play H.
Here is a plot of the mixed strategy played by all the students:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/0strategiesvbestresponse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The mixed strategy played was \(\sigma_2=(.71,.29)\).
Note that in fact in this particular instance that actual best response is to play \(\sigma_2=(1,0)\).
This will indeed maximise the expected value of:&lt;/p&gt;



&lt;p&gt;Indeed: the above is an increasing linear function in \(x\) so the highest value is obtained when \(x=1\).&lt;/p&gt;

&lt;p&gt;The mean score for this round by everyone was: 2.09.
The theoretical mean score (when playing the best response for six consecutive games is): \(6(-.2\times 2+.8)=2.4\), so everybody was not too far off.&lt;/p&gt;

&lt;p&gt;Here is a distribution of the scores:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/0score_histogram.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that there were very few losers in this round, however no students obtained the best possible score: 7.&lt;/p&gt;

&lt;h3 id=&quot;round-2&quot;&gt;Round 2&lt;/h3&gt;

&lt;p&gt;Here the mixed strategy is \(\sigma_1=(.9,.1)\), implying that students should play T more often than H.
Here is a plot of the mixed strategy played by all the students:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/1strategiesvbestresponse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The mixed strategy played was \(\sigma_2=(.05,.95)\).
Similarly to before this is close to the actual best response which is \((0,1)\) (due to the expected utility now being a decreasing linear function in \(x\).&lt;/p&gt;

&lt;p&gt;The mean score for this round by everyone was: 10.69
The theoretical mean score (when playing the best response for six consecutive games is): \(6(.9\times 2-.1)=10.2\), which is less than the score obtained by the class (mainly because the random sampler did not actually pick T at any point).&lt;/p&gt;

&lt;p&gt;Here is a distribution of the scores:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/1score_histogram.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No one lost on this round and a fair few maxed out at 12.&lt;/p&gt;

&lt;h3 id=&quot;round-3&quot;&gt;Round 3&lt;/h3&gt;

&lt;p&gt;Here is where things get interesting.
The mixed strategy played by the computer is here \(\sigma_1=(1/3,2/3)\), it is not now obvious which strategy is worth going for!&lt;/p&gt;

&lt;p&gt;Here is the distribution played:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/2strategiesvbestresponse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The mixed strategy is \(\sigma_2=(.61,.39)\) and the mean score was -.3.
Here is what the distribution looked like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/2score_histogram.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks like we have a few more losers than winners but not by much.
In fact I would suggest (because I know the theory covered in Chapter 5 of my class) that the students were in fact indifferent against this \(\sigma_1\).
Indeed:&lt;/p&gt;



&lt;p&gt;and&lt;/p&gt;



&lt;p&gt;In fact, this particular \(\sigma_1\) ensures that the expected result for the students is not influenced by what they &lt;em&gt;actually&lt;/em&gt; do:&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;What strategy could the students have played to ensure the same situation for the computer’s strategy?&lt;/strong&gt;
At the moment, the mixed strategy \(\sigma_2=(.61,.39)\) has expected utility for player 1 (the computer):&lt;/p&gt;



&lt;p&gt;As this is an increasing function in \(x\) we see that the computer should in fact change \(\sigma_1\) to be \((1,0)\).&lt;/p&gt;

&lt;p&gt;Thus if the original \(\sigma_1\) of this round is being played, so that the choice of \(\sigma_2\) does in fact not have an effect, students might as well play a strategy that ensures that the computer has no incentive to deviate (ie we are at a Nash equilibrium).&lt;/p&gt;

&lt;p&gt;This can be calculated by solved the following linear equation:&lt;/p&gt;



&lt;p&gt;which corresponds to:&lt;/p&gt;



&lt;p&gt;which gives a strategy at which the computer has no incentive to deviated: \((1/2,1/2)\).
Thus at \(\sigma_1=(1/3,2/3)\) and \(\sigma_2=(1/2,1/2)\) no players have an incentive to move: we are at a Nash equilibrium.
This actually brings us back to another post I’ve written this term so please do go take a look at &lt;a href=&quot;http://vincent-knight.com/unpeudemath/pedagogy/2015/01/26/introducing-game-theory-to-my-class/&quot;&gt;this post which involved students playing against each other and comparing to the Nash equilibrium&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-02-07T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Representation-Theory-Decomposing-Representations/">
	<title>Liang Ze: Decomposing Representations</title>
	<link>http://sheaves.github.io/Representation-Theory-Decomposing-Representations/</link>
	<content:encoded>&lt;p&gt;In this post, we’ll implement an algorithm for decomposing representations that &lt;a href=&quot;http://www.ams.org/journals/mcom/1970-24-111/S0025-5718-1970-0280611-6/S0025-5718-1970-0280611-6.pdf&quot; target=&quot;_blank&quot;&gt;Dixon published in 1970&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;As a motivating example, I’ll use the permutation matrix representation of $D_4$ that we saw in an &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Intro/&quot; target=&quot;_blank&quot;&gt;earlier post&lt;/a&gt;. To make the code more generally applicable, let’s call the group $G$ and the representation $\rho$:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;We’ll see that this is decomposable, and find out what its irreducible components are.&lt;/p&gt;

&lt;h3 id=&quot;unitary-representations&quot;&gt;Unitary representations&lt;/h3&gt;

&lt;p&gt;A short remark before we begin: The algorithm assumes that $\rho$ is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Unitary_representation&quot; target=&quot;_blank&quot;&gt;unitary representation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i.e. for all $g \in G$,&lt;/p&gt;



&lt;p&gt;where $A*$ is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Conjugate_transpose&quot; target=&quot;_blank&quot;&gt;conjugate transpose&lt;/a&gt; of a matrix $A$. 
For $G$ a finite group, all representations can be made unitary under an appropriate change of basis, so we need not be too concerned about this. In any case, permutation representations are always unitary, so we can proceed with our example.&lt;/p&gt;

&lt;h2 id=&quot;finding-non-scalar-commuting-matrices&quot;&gt;Finding non-scalar, commuting matrices&lt;/h2&gt;

&lt;p&gt;At the end of the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt; we saw that in order to decompose a representation $(V,\rho)$, it is enough to find a non-scalar matrix $T$ that commutes with $\rho(g)$ for every $g \in G$.  This first step finds a &lt;a href=&quot;http://en.wikipedia.org/wiki/Hermitian_matrix&quot; target=&quot;_blank&quot;&gt;Hermitian&lt;/a&gt; non-scalar $H$ that commutes with $\rho(G)$ (if there is one to be found).&lt;/p&gt;

&lt;p&gt;Let $E_{rs}$ denote the $n \times n$ matrix with a $1$ in the $(r,s)$th entry and zeros everywhere else. Here $n$ is the dimension of $V$ in the representation $(V,\rho)$. Define&lt;/p&gt;



&lt;p&gt;then the set of matrices $H_{rs}$ forms a Hermitian basis for the $n \times n$ matrices over $\mathbb{C}$.&lt;/p&gt;

&lt;p&gt;Now for each $r,s$, compute the sum&lt;/p&gt;



&lt;p&gt;Observe that $H$ has the following properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it is hermitian&lt;/li&gt;
  &lt;li&gt;it commutes with $\rho(g)$ for all $g \in G$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If $\rho$ is irreducible, then $H$ is a scalar matrix for all $r,s$. Otherwise, it turns out that there &lt;strong&gt;will&lt;/strong&gt; be some $r,s$ such that $H$ is non-scalar (this is due to the fact that the $H_{rs}$ matrices form a basis of the $n \times n$ matrices$).&lt;/p&gt;

&lt;p&gt;Let’s test this algorithm on our permutation representation of $D_4$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;We get a non-scalar $H$! So the permutation representation of $D_4$ is reducible!&lt;/p&gt;

&lt;h2 id=&quot;using-h-to-decompose-rho&quot;&gt;Using $H$ to decompose $\rho$&lt;/h2&gt;

&lt;p&gt;Our next step is to use the eigenspaces of $H$ to decompose $\rho$. At the end of the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt;, we saw that $\rho(g)$ preserves the eigenspaces of $H$, so we need only find the eigenspaces of $H$ to decompose $\rho$. &lt;/p&gt;

&lt;p&gt;Since $H$ is hermitian, it is &lt;a href=&quot;http://en.wikipedia.org/wiki/Diagonalizable_matrix&quot; target=&quot;_blank&quot;&gt;diagonalizable&lt;/a&gt;, so its eigenvectors form a basis of $V$. We can find this basis by computing the &lt;a href=&quot;http://en.wikipedia.org/wiki/Jordan_normal_form&quot; target=&quot;_blank&quot;&gt;Jordan decomposition&lt;/a&gt; of $H$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Finally, we observe that $P^{-1} \rho(g) P$ has the same block-diagonal form for each $g \in G$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;We have thus decomposed $\rho$ into two 1-dimensional representations and one 2-dimensional one! &lt;/p&gt;

&lt;h2 id=&quot;decomposing-into-irreducibles&quot;&gt;Decomposing into irreducibles&lt;/h2&gt;

&lt;p&gt;Finally, to get a decomposition into irreducibles,  we can apply the algorithm recursively on each of the subrepresentations to see if they further decompose. &lt;/p&gt;

&lt;p&gt;Here’s a stand-alone script that decomposes a representation into its irreducible components:&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;getting-all-irreducible-representations&quot;&gt;Getting all irreducible representations&lt;/h2&gt;

&lt;p&gt;Now we know how to test for irreducibility and decompose reducible representations. But we still don’t know how many irreducible representations a group has. &lt;/p&gt;

&lt;p&gt;It turns out that finite groups have finitely many irreducible representations! In the &lt;a href=&quot;http://sheaves.github.io/Group-Ring-Regular-Representation/&quot;&gt;next post&lt;/a&gt;, we’ll construct a representation for any finite group $G$ that contains &lt;em&gt;all&lt;/em&gt; the irreducible representations of $G$.&lt;/p&gt;</content:encoded>
	<dc:date>2015-02-02T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/01/29/recreating-golden-balls-in-class/">
	<title>Vince Knight: Recreating golden balls in class</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/01/29/recreating-golden-balls-in-class/</link>
	<content:encoded>&lt;p&gt;Here is a blog post that mirrors &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/02/an-attempt-at-golden-balls-in-class.html&quot;&gt;this post&lt;/a&gt; from last year.
I will describe the attempt at playing Golden Balls in class.&lt;/p&gt;

&lt;p&gt;The purpose of this was to discuss the concept of Dominance.
If you are not familiar with Golden Balls take a look at this video:&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
    
    
&lt;/div&gt;

&lt;p&gt;This is what we did.&lt;/p&gt;

&lt;p&gt;Firstly we played a series of four games where the score of the row player would correspond to a total of chocolates that both players would share at the end of the game (given that all the games are zero sum this is equivalent to the opposite of the score of the column player).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;No strategy is dominated:&lt;/p&gt;

    

    &lt;p&gt;In this instance both players went for the column strategy.
 There is no real explanation for this: in essence they got lucky :)
 Thus at this stage we had 1 bar of chocolate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The first row strategy is dominated:&lt;/p&gt;

    

    &lt;p&gt;From here it is obvious that the row player would go for their second strategy.
 This indeed happened and the column player went for their first strategy (which in fact makes no difference: the column strategy could have played either strategy).
 Thus at this stage we had 2 bars of chocolate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;No strategies are dominated:&lt;/p&gt;

    

    &lt;p&gt;This is very similar to the first game except I upped the number of chocolate bars available.
 Both players played their second strategy and thus we had a total of 4 bars of chocolate at this stage.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The first row strategy is dominated:&lt;/p&gt;

    

    &lt;p&gt;The row played went with their first strategy (as expected given the domination) however the column player went with their second strategy.
 This is possibly due to the slightly ‘fake’ setup of the game in terms of chocolates.
 Picking the second strategy ensured that they would not &lt;em&gt;lose&lt;/em&gt; chocolates.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At the end of this I added another chocolate bar to the stash so that we had a nice even number of 6.
At this point the players actually played a version of Golden Balls:&lt;/p&gt;



&lt;p&gt;The utility in that game corresponded to the share of the chocolates: so a score of 1 implies they would both get 6, a score of 1.5 would imply they both got 9.&lt;/p&gt;

&lt;p&gt;Both player here managed to stay away from the Nash equilibrium (which is the pair of second strategies due to iterated elimination of dominated strategies) and ended up with 6 chocolates each.
Well done to G and K who were good sports and without whom we would not have been able to play the game.&lt;/p&gt;

&lt;p&gt;This was in stark contrast with the cool result from &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/02/an-attempt-at-golden-balls-in-class.html&quot;&gt;last year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After this I proceeded to play a best out of three game of tic-tac-toe with J to get to the idea of a game like that being pre defined: no one should really ever win that unless someone makes a mistake (or indeed plays irrationally: on that note I owe J a chocolate bar).&lt;/p&gt;

&lt;p&gt;Here is Randall Munroe’s &lt;a href=&quot;http://xkcd.com/832/&quot;&gt;solution of tic-tac toe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This leads us to the idea of best responses which is the subject of another game we played in class and one for which I’m about to start reading in the data.
If you’re inpatient take a look at the &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/02/best-responses-to-mixed-strategies-in.html&quot;&gt;corresponding post from last year&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-01-29T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/01/26/introducing-game-theory-to-my-class/">
	<title>Vince Knight: Introducing Game Theory to my class</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/01/26/introducing-game-theory-to-my-class/</link>
	<content:encoded>&lt;p&gt;Here is a blog post that mirrors &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/01/matching-pennies-in-class.html&quot;&gt;this post&lt;/a&gt; from last year.&lt;/p&gt;

&lt;p&gt;I will be using my blog to extend the class meetings my Game Theory class and I have.&lt;/p&gt;

&lt;p&gt;After playing the 2/3rds of the average game (you can see a plot of the results from last year and this year in the comments of &lt;a href=&quot;http://vincent-knight.com/Year_3_game_theory_course/Content/Chapter_01-Introduction/&quot;&gt;the intro chapter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;After this we moved on to normal form games, and in particular discussed the matching pennies game:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Two players each show a coin with either ‘Heads’ or ‘Tails’ showing. If both coins match then the 1st player (the row player) wins, otherwise the 2nd player (the column player) wins.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This can be described as:&lt;/p&gt;



&lt;p&gt;If you’d like to read a description of what each number represents take a look at my &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/01/matching-pennies-in-class.html&quot;&gt;blog post from last year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I asked all the students to get in to pairs and play against each other, collecting all the results with forms that you can find at &lt;a href=&quot;https://github.com/drvinceknight/Year_3_game_theory_course/tree/master/Activities&quot;&gt;this github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After this we changed the game slightly to look like this:&lt;/p&gt;



&lt;p&gt;The main point of this is to make sure that everyone understands the normal form game convention (by breaking the symmetry) and also to make it slightly more interesting (the row player now has more to win/lose by playing Heads).&lt;/p&gt;

&lt;p&gt;I played both games with S and recorded the results to demo what was happening:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/matching_pennies_v_saniya.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is not what this post is about: I’m going to analyse the data collected :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/drvinceknight/f562ccbda8113733b404&quot;&gt;Here’s a python script that contains the data as well as the matplotlib code to obtain the plot for the initial game&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The plot shows the probability with which players played ‘Heads’ as the rounds of the game played out:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/matching_pennies.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that we are very close at an overall probability of playing ‘Heads’ with probability 0.5.
This is more or less what is expected.
Now for something a bit more interesting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/drvinceknight/3cdd6bde6c0ff0f129cb&quot;&gt;Here’s a python script that contains the data as well as the matplotlib code to obtain the plot for the modified game&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/modified_matching_pennies.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is (&lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/01/matching-pennies-in-class.html&quot;&gt;just like last year&lt;/a&gt;) not quite what we expect (which is cool).
It’s pretty late as I’m writing this and I need to head to sleep so I’ll point you towards the post from last year (&lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/01/matching-pennies-in-class.html&quot;&gt;here&lt;/a&gt;) and encourage you to read that and perhaps offer your own interpretation of what is happening :)&lt;/p&gt;

&lt;p&gt;Finally: &lt;strong&gt;a big thanks&lt;/strong&gt; to my students for engaging so much, I really appreciate it.&lt;/p&gt;</content:encoded>
	<dc:date>2015-01-26T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/">
	<title>Liang Ze: Irreducible and Indecomposable Representations</title>
	<link>http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/</link>
	<content:encoded>&lt;p&gt;Following up from the questions I asked at the end of the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Sums-Products/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt;, I’ll define (ir)reducible and (in)decomposable representations, and discuss how we might detect them. Unlike previous posts, this post will have just text, and no code. This discussion will form the basis of the algorithm in the next post.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;decomposability&quot;&gt;Decomposability&lt;/h2&gt;

&lt;p&gt;In the previous post, I showed how to form the direct sum $(V_1 \oplus V2,\rho)$ of two representations $(V_1,\rho_1)$ and $(V_2,\rho_2)$. The matrices given by $\rho$ looked like this:&lt;/p&gt;



&lt;p&gt;A representation $(V,\rho)$ is &lt;strong&gt;decomposable&lt;/strong&gt; if there is a basis of $V$ such that each $\rho(g)$ takes this block diagonal form. If $(V,\rho)$ does not admit such a decomposition, it is &lt;strong&gt;indecomposable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Equivalently, $(V,\rho)$ is decomposable if there is an invertible matrix $P$ such that for all $g\in G$,&lt;/p&gt;



&lt;p&gt;and indecomposable otherwise. Here, $P$ is a change of basis matrix and conjugating by $P$ changes from the standard basis to the basis given by the columns of $P$. &lt;/p&gt;

&lt;h2 id=&quot;reducibility&quot;&gt;Reducibility&lt;/h2&gt;

&lt;p&gt;Notice that if $\rho(g)$ were block diagonal, then writing $v \in V$ as ${v_1 \choose v_2}$, where $v_1$ and $v_2$ are vectors whose dimensions agree with the blocks of $\rho(g)$, we see that&lt;/p&gt;



&lt;p&gt;Let $V_1$ be the subspace of $V$ corresponding to vectors of the form ${v_1 \choose 0}$, and $V_2$ be the subspace of vectors of the form ${0 \choose v_2}$. Then for all $g \in G, v \in V_i$,&lt;/p&gt;



&lt;p&gt;Now suppose instead that for all $g \in G, \rho(g)$ has the block upper-triangular form&lt;/p&gt;



&lt;p&gt;where $ * $ represents an arbitrary matrix (possibly different for each $g \in G$). If $*$ is not the zero matrix for some $g$, then we will still have $\rho(g) v \in V_1 \,\, \forall v \in V_1$, but we no longer have $\rho(g) v \in V_2 \,\, \forall v \in V_2$. In this case, we say that $V_1$ is a subrepresentation of $V$ whereas $V_2$ is not.&lt;/p&gt;

&lt;p&gt;Formally, if we have a subspace $W \subset V$ such that for all $g \in G, w \in W$,&lt;/p&gt;



&lt;p&gt;then $W$ is a $G$-&lt;strong&gt;invariant&lt;/strong&gt; subspace of $V$, and $(W,\rho)$ is a  &lt;strong&gt;subrepresentation&lt;/strong&gt; of $(V,\rho)$.&lt;/p&gt;

&lt;p&gt;Any representation $(V,\rho)$ has at least two subrepresentations: $(0,\rho)$ and $(V,\rho)$. If there are no other subrepresentations, then $(V,\rho)$ is &lt;a href=&quot;http://en.wikipedia.org/wiki/Irreducible_representation&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;irreducible&lt;/strong&gt;&lt;/a&gt;. Otherwise, it is &lt;strong&gt;reducible&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Equivalently, $(V,\rho)$ is reducible if there is an invertible matrix $P$ such that for all $g \in G$,&lt;/p&gt;



&lt;p&gt;and irreducible otherwise.&lt;/p&gt;

&lt;h2 id=&quot;maschkes-theorem&quot;&gt;Maschke’s Theorem&lt;/h2&gt;

&lt;p&gt;Note that a decomposable representation is also reducible, but the converse is not generally true.
(Equivalently: an irreducible representation is also indecomposable, but the converse is not generally true.)
&lt;a href=&quot;http://en.wikipedia.org/wiki/Maschke%27s_theorem&quot; target=&quot;_blank&quot;&gt;Maschke’s Theorem&lt;/a&gt; tells us that the converse is true over fields of characteristic zero! In other words:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Suppose $V$ is a vector space over a field of characteristic zero, say $\mathbb{C}$, and $(V,\rho)$ has a subrepresentation $(W_1,\rho)$. Then there is a subspace $W_2$ (called the direct complement of $W_1$) such that $V = W_1 \oplus W_2$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since we will be working over $\mathbb{C}$, we can thus treat (in)decomposability as equivalent to (ir)reducibility. To understand representations of $G$, we need only understand its irreducible representations, because any other representation can be decomposed into a direct sum of irreducibles.&lt;/p&gt;

&lt;h2 id=&quot;schurs-lemma&quot;&gt;Schur’s Lemma&lt;/h2&gt;

&lt;p&gt;How may we detect (ir)reducible representations? We’ll make use of the following linear algebraic properties:&lt;/p&gt;

&lt;p&gt;Given an eigenvalue $\lambda$ of a matrix $A \in \mathbb{C}^{n \times n}$, its $\lambda$-eigenspace is&lt;/p&gt;



&lt;p&gt;Clearly, each eigenspace is an invariant subspace of $A$. If we have another matrix $B \in \mathbb{C}^{n \times n}$ such that $AB = BA$, then $B$ preserves the eigenspaces of $A$ as well. To see this, take $v \in E_\lambda$, then&lt;/p&gt;



&lt;p&gt;so $E_\lambda$ is also an invariant subspace of $B$!&lt;/p&gt;

&lt;p&gt;Now suppose we have a representation $(V,\rho)$ and a linear map $T:V \to V$ such that for all $g \in G, v \in V$,&lt;/p&gt;



&lt;p&gt;Treating $T$ as a matrix, this is equivalent to saying that $\rho(g)T = T\rho(g)$ for all $g \in G$. In that case, the eigenspaces of $T$ are $G$-invariant subspaces, and will yield decompositions of $(V,\rho)$  if they are not the whole of $V$. But if $E_\lambda = V$, then $Tv = \lambda v$ for all $v \in V$, so in fact $T = \lambda I$, where $I$ is the identity matrix. We have thus shown a variant of &lt;a href=&quot;http://en.wikipedia.org/wiki/Schur%27s_lemma&quot; target=&quot;_blank&quot;&gt;Schur’s lemma&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If $(V,\rho)$ is irreducible, and $\rho(g) T = T \rho(g)$ for all $g \in G$, then $T =\lambda I$ for some $\lambda$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We already know that scalar matrices (i.e. matrices of the form $\lambda I$) commute with all matrices. If $(V,\rho)$ is irreducible, this result says that there are no other matrices that commute with all $\rho(g)$. The converse is also true:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If $(V,\rho)$ is a reducible, then there is some $T \neq \lambda I$ such that $\rho(g) T = T\rho(g)$ for all $g \in G$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I won’t prove this, but note that if $V$ has a decomposition $W_1 \oplus W_2$, then the projection onto either $W_i$ will have the desired properties.  If we have such a $T$, then its eigenspaces will give a decomposition of $(V,\rho)$. This will be the subject of the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Decomposing-Representations/&quot;&gt;next post&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-01-26T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Representation-Theory-Sums-Products/">
	<title>Liang Ze: Direct Sums and Tensor Products</title>
	<link>http://sheaves.github.io/Representation-Theory-Sums-Products/</link>
	<content:encoded>&lt;p&gt;In this short post, we will show two ways of combining existing representations to obtain new representations.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;recall&quot;&gt;Recall&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Intro/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt;, we saw two representations of $D_4$: the permutation representation, and the representation given in this &lt;a href=&quot;http://en.wikipedia.org/wiki/Dihedral_group#Matrix_representation&quot; target=&quot;_blank&quot;&gt;Wikipedia example&lt;/a&gt;. Let’s first define these in Sage:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;direct-sums&quot;&gt;Direct Sums&lt;/h2&gt;

&lt;p&gt;If $(V_1,\rho_1), (V_2,\rho_2)$ are representations of $G$, the &lt;a href=&quot;http://groupprops.subwiki.org/wiki/Direct_sum_of_linear_representations&quot; target=&quot;_blank&quot;&gt;direct sum&lt;/a&gt; of these representations is $(V_1 \oplus V_2, \rho)$, where $\rho$ sends $g \in G$ to the &lt;a href=&quot;http://en.wikipedia.org/wiki/Block_matrix#Block_diagonal_matrices&quot; target=&quot;_blank&quot;&gt;block diagonal matrix&lt;/a&gt; &lt;/p&gt;



&lt;p&gt;Here $\rho_1(g), \rho_2(g)$ and the “zeros” are all &lt;em&gt;matrices&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It’s best to illustrate with an example. We can define a function &lt;code&gt;direct_sum&lt;/code&gt; in Sage that takes two representations and returns their direct sum.&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;tensor-products&quot;&gt;Tensor products&lt;/h2&gt;
&lt;p&gt;We can also form the &lt;a href=&quot;http://groupprops.subwiki.org/wiki/Tensor_product_of_linear_representations&quot; target=&quot;_blank&quot;&gt;tensor product&lt;/a&gt; $(V_1 \otimes V_2,\rho)$, where $\rho$ sends $g \in G$ to the &lt;a href=&quot;http://en.wikipedia.org/wiki/Kronecker_product&quot; target=&quot;_blank&quot;&gt;Kronecker product&lt;/a&gt; of the matrices $\rho_1(g)$ and $\rho_2(g)$.&lt;/p&gt;

&lt;p&gt;We define a function &lt;code&gt;tensor_prod&lt;/code&gt; that takes two representations and returns their tensor product.&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Observe that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$\dim V_1 \oplus V_2 = \dim V_1 + \dim V_2$,&lt;/li&gt;
  &lt;li&gt;$\dim V_1 \otimes V_2 = \dim V_1 \times \dim V_2$,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;which motivates the terms direct &lt;em&gt;sum&lt;/em&gt; and tensor &lt;em&gt;product&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We can keep taking direct sums and tensor products of existing representations to obtain new ones:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;decomposing-representations&quot;&gt;Decomposing representations&lt;/h2&gt;
&lt;p&gt;Now we know how to build new representations out of old ones. One might be interested in the inverse questions: &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Is a given representation a direct sum of smaller representations?&lt;/li&gt;
  &lt;li&gt;Is a given representation a tensor product of smaller representations?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It turns out that Q1 is a much more interesting question to ask than Q2.&lt;/p&gt;

&lt;p&gt;A (very poor) analogy of this situation is the problem of “building up” natural numbers. We have two ways of building up new integers from old: we can either add numbers, or multiply them. Given a number $n$, it’s easy (and not very interesting) to find smaller numbers that add up to $n$. However, &lt;a href=&quot;http://en.wikipedia.org/wiki/Integer_factorization&quot; target=&quot;_blank&quot;&gt;finding numbers whose product is $n$&lt;/a&gt; is &lt;em&gt;much much&lt;/em&gt; harder (especially for large $n$) and much more &lt;a href=&quot;http://en.wikipedia.org/wiki/Algebraic_number_theory&quot; target=&quot;_blank&quot;&gt;rewarding&lt;/a&gt;. Prime numbers also play a special role in the latter case: every positive integer has a unique factorization into primes.&lt;/p&gt;

&lt;p&gt;The analogy is a poor one (not least because the roles of “sum” and “product” are switched!). However, it motivates the question &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What are the analogues of “primes” for representations?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll try to answer this last question and Q1 in the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/&quot;&gt;next few posts&lt;/a&gt;, and see what it means for us when working with representations in Sage.&lt;/p&gt;</content:encoded>
	<dc:date>2015-01-24T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Representation-Theory-Intro/">
	<title>Liang Ze: Representation Theory in Sage - Basics</title>
	<link>http://sheaves.github.io/Representation-Theory-Intro/</link>
	<content:encoded>&lt;p&gt;This is the first of a series of posts about working with group representations in Sage.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;basic-definitions&quot;&gt;Basic Definitions&lt;/h2&gt;

&lt;p&gt;Given a group $G$, a linear representation of $G$ is a group homomorphism $\rho: G \to \mathrm{GL}(V)$ 
such that &lt;/p&gt;



&lt;p&gt;For our purposes, we will assume that $G$ is a finite group and $V$ is an $n$-dimensional vector space over $\mathbb{C}$. Then $\mathrm{GL}(V)$ is isomorphic to the invertible $n \times n$ matrices over $\mathbb{C}$, which we will denote $\mathrm{GL}_n \mathbb{C}$. &lt;/p&gt;

&lt;p&gt;So a representation is just a function that takes group elements and returns invertible matrices, in such a way that the above equation holds.&lt;/p&gt;

&lt;p&gt;Various authors refer to the map $\rho$, the vector space $V$, or the tuple $(V,\rho)$ as a representation; this shouldn’t cause any confusion, as it’s usually clear from context whether we are referring to a map or a vector space. When I need to be extra precise, I’ll use $(V,\rho)$.&lt;/p&gt;

&lt;h2 id=&quot;some-simple-examples&quot;&gt;Some simple examples&lt;/h2&gt;

&lt;h3 id=&quot;trivial-representation&quot;&gt;Trivial representation&lt;/h3&gt;
&lt;p&gt;The simplest representation is just the trivial representation that sends every element of $G$ to the identity matrix (of some fixed dimension $n$). Let’s do this for the symmetric group $S_3$:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;We can verify that this is indeed a group homomorphism (warning: There are 6 elements in $S_3$, which means we have to check $6^2 = 36$ pairs!):&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;permutation-representation&quot;&gt;Permutation representation&lt;/h3&gt;
&lt;p&gt;This isn’t very interesting. However, we also know that $S_3$ is the group of permutations of the 3-element set {$1,2,3$}. We can associate to each permutation a &lt;a href=&quot;http://mathworld.wolfram.com/PermutationMatrix.html&quot; target=&quot;_blank&quot;&gt;permutation matrix&lt;/a&gt;. Sage already has this implemented for us, via the method &lt;code&gt;matrix()&lt;/code&gt; for a group element &lt;code&gt;g&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Qn: From the permutation matrix, can you tell which permutation $g$ corresponds to?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can again verify that this is indeed a representation. Let’s not print out all the output; instead, we’ll only print something if it is &lt;em&gt;not&lt;/em&gt; a representation. If nothing pops up, then we’re fine:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;defining-a-representation-from-generators&quot;&gt;Defining a representation from generators&lt;/h3&gt;
&lt;p&gt;We could define permutation representations so easily only because Sage has them built in. But what if we had some other representation that we’d like to work with in Sage? Take the &lt;a href=&quot;http://en.wikipedia.org/wiki/Dihedral_group&quot; target=&quot;_blank&quot;&gt;dihedral group&lt;/a&gt; $D_4$. Wikipedia tells us that this group has &lt;a href=&quot;http://en.wikipedia.org/wiki/Dihedral_group#Matrix_representation&quot; target=&quot;_blank&quot;&gt;a certain matrix representation&lt;/a&gt;. How can we recreate this in Sage?&lt;/p&gt;

&lt;p&gt;We could hard-code the relevant matrices in our function definition. However, typing all these matrices can be time-consuming, especially if the group is large.&lt;/p&gt;

&lt;p&gt;But remember that representations are group homomorphisms. If we’ve defined $\rho(g)$ and $\rho(h)$, then we can get $\rho(gh)$ simply by multiplying the matrices $\rho(g)$ and $\rho(h)$! If we have a &lt;a href=&quot;http://en.wikipedia.org/wiki/Generating_set_of_a_group&quot; target=&quot;_blank&quot;&gt;set of generators&lt;/a&gt; of a group, then we only need to define $\rho$ on these generators. Let’s do that for the generators of $D_4$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;We see that $D_4$ has a generating set of 2 elements (note: the method &lt;code&gt;gens()&lt;/code&gt; need not return a &lt;em&gt;minimal&lt;/em&gt; generating set, but in this case, we do get a minimal generating set). Let’s call these $r$ and $s$. We know that elements of $D_4$ can be written $r^is^j$, where $i = 0,1,2,3$ and $j = 0,1$. We first run through all such pairs $(i,j)$ to create a &lt;a href=&quot;https://docs.python.org/2/tutorial/datastructures.html#dictionaries&quot; target=&quot;_blank&quot;&gt;dictionary&lt;/a&gt; that tells us which group elements are given by which $(i,j)$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Now for $g = r^i s^j \in D_4$, we can define $\rho(g) = \rho(r)^i \rho(s)^j$ and we will get a representation of $D_4$. We need only choose the matrices we want for $\rho(r)$ and $\rho(s)$.&lt;/p&gt;

&lt;p&gt;$r$ and $s$ correspond to $R_1$ and $S_0$, resp., in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Dihedral_group#Matrix_representation&quot; target=&quot;_blank&quot;&gt;Wikipedia example&lt;/a&gt;, so let’s use their matrix representations to generate our representation:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;One can verify that this does indeed give the same matrices as the Wikipedia example, albeit in a different order.&lt;/p&gt;

&lt;h2 id=&quot;we-can-do-better&quot;&gt;We can do better!&lt;/h2&gt;
&lt;p&gt;All the representations we’ve defined so far aren’t very satisfying! For the last example, we required the special property that all elements in $D_4$ have the form $r^i s^j$. In general, it isn’t always easy to express a given group element in terms of the group’s generators (this is known as the &lt;a href=&quot;http://en.wikipedia.org/wiki/Word_problem_for_groups&quot; target=&quot;_blank&quot;&gt;word problem&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We’ve also been constructing representations in a rather ad-hoc manner. Is there a more general way to construct representations? And how many are representations are there?&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Sums-Products/&quot;&gt;next post&lt;/a&gt;, I’ll run through two simple ways of combining existing representations to get new ones: the direct sum and the tensor product. I’ll also define &lt;em&gt;irreducible&lt;/em&gt; representations, and state some results that will shed some light on the above questions.&lt;/p&gt;</content:encoded>
	<dc:date>2015-01-20T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Subgroup-Explorer/">
	<title>Liang Ze: Subgroup Explorer</title>
	<link>http://sheaves.github.io/Subgroup-Explorer/</link>
	<content:encoded>&lt;p&gt;&lt;img src=&quot;http://sheaves.github.io/images/SubgroupExplorer.png&quot; alt=&quot;Subgroup Explorer&quot; title=&quot;Subgroup Lattice Generator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve written a subgroup lattice generator for all groups of size up to 32. It’s powered by Sage and GAP, and allows you to view the lattice of subgroups or subgroup conjugacy classes of a group from your browser.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;Click &lt;strong&gt;Go!&lt;/strong&gt; below to refresh the viewer, or if it doesn’t load.&lt;/p&gt;

&lt;div class=&quot;go&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Normal_subgroup&quot; target=&quot;_blank&quot;&gt;Normal subgroups&lt;/a&gt; are colored green. Additionally, the &lt;a href=&quot;http://en.wikipedia.org/wiki/Center_%28group_theory%29&quot; target=&quot;_blank&quot;&gt;center&lt;/a&gt; is blue while the &lt;a href=&quot;http://en.wikipedia.org/wiki/Commutator_subgroup&quot; target=&quot;_blank&quot;&gt;commutator subgroup&lt;/a&gt; is pink.&lt;/p&gt;

&lt;p&gt;Showing the full subgroup lattice can get messy for large groups. If the option &lt;code&gt;Conjugacy classes of subgroups&lt;/code&gt; is selected, the viewer only shows the &lt;a href=&quot;http://en.wikipedia.org/wiki/Conjugacy_class#Conjugacy_of_subgroups_and_general_subsets&quot; target=&quot;_blank&quot;&gt;conjugacy classes of subgroups&lt;/a&gt; (i.e. all subgroups that are conjugate are combined into a single vertex).&lt;/p&gt;

&lt;p&gt;The edge labels indicate how many subgroups of one conjugacy class a given representative subgroup of another conjugacy class &lt;strong&gt;contains&lt;/strong&gt;, or how many subgroups of one conjugacy class a given representative subgroup of another conjugacy class is &lt;strong&gt;contained by&lt;/strong&gt;. The labels are omitted if these numbers are 1. The edge colors indicate whether the subgroups in the “smaller” conjugacy class are normal subgroups of those in “larger” conjugacy class.&lt;/p&gt;

&lt;p&gt;In the image at the top of the post, the group &lt;code&gt;C15 : C4&lt;/code&gt; (the colon stands for &lt;a href=&quot;http://en.wikipedia.org/wiki/Semidirect_product&quot; target=&quot;_blank&quot;&gt;semi-direct product&lt;/a&gt; and is usually written $\rtimes$) contains 5 subgroups isomorphic to &lt;code&gt;C3 : C4&lt;/code&gt;, which in turn contains 3 subgroups isomorphic to &lt;code&gt;C4&lt;/code&gt; and 1 subgroup isomorphic to &lt;code&gt;C6&lt;/code&gt; (the 5 belows to another edge). The edge colors indicate that &lt;code&gt;C6&lt;/code&gt; is a normal subgroup of &lt;code&gt;C3 : C3&lt;/code&gt; whereas &lt;code&gt;C4&lt;/code&gt; is not. For further information on group descriptors, click &lt;a href=&quot;http://groupprops.subwiki.org/wiki/GAP:StructureDescription#Aspects_of_structure_description&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And here’s the code for a version that you can run on &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt;. It allows you to input much larger groups. This was used to produce the image at the top of the post. Don’t try running it here, however, since the SageCellServer doesn’t have the &lt;code&gt;database_gap&lt;/code&gt; package installed.&lt;/p&gt;

&lt;div class=&quot;no_eval&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Finally, while verifying the results of this program, I found an error in &lt;a href=&quot;http://www.cambridge.org/us/academic/subjects/mathematics/algebra/representations-groups-computational-approach&quot; target=&quot;_blank&quot;&gt;this book&lt;/a&gt;!
The correction has been pencilled in. The original number printed was 1.
&lt;img src=&quot;http://sheaves.github.io/images/A5Lattice_CompareSmall.jpg&quot; alt=&quot;A5 Lattice&quot; title=&quot;A5 Subgroup Lattice&quot; /&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2015-01-17T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/code/2015/01/16/on-a-paper-about-inelligence-vs-conscientiousness/">
	<title>Vince Knight: On a paper about conscientiousness</title>
	<link>http://drvinceknight.github.io/unpeudemath/code/2015/01/16/on-a-paper-about-inelligence-vs-conscientiousness/</link>
	<content:encoded>&lt;p&gt;After hearing about it on &lt;a href=&quot;http://www.twis.org/&quot;&gt;TWIS&lt;/a&gt; I spent some time reading &lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S104160801400106X&quot;&gt;Other-rated personality and academic performance: Evidence and implications &lt;/a&gt; by &lt;a href=&quot;http://www.griffith.edu.au/health/school-applied-psychology/staff/dr-arthur-poropat&quot;&gt;Poropat&lt;/a&gt;.
This paper is a meta analysis of various works and (TLDR): indicates that ‘intelligence’ is not as good an indicator of academic performance as is ‘conscientiousness’ (my loose interpretation of this is: ‘willingness to work hard’) and ‘openness’ (my loose interpretation of this is: ‘curiosity and interest in a subject’).&lt;/p&gt;

&lt;p&gt;My ears really perked up when this was mentioned on the TWIS podcast as it is something I have always believed myself.
This is possibly something to do with my interaction with &lt;a href=&quot;http://vincent-knight.com/research/students/&quot;&gt;research students&lt;/a&gt;.
I also believe it is linked to my own educational trajectory that really benefited from my high school physics teacher who managed to show me that hard work paid off.
I blogged about that &lt;a href=&quot;http://blogs.nature.com/soapboxscience/2012/07/02/science-mentoring-im-just-not-clever&quot;&gt;here&lt;/a&gt; where this photo (showing a report card claiming that I did not work hard enough) is posted:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/IpjUgdvq4LAeLR0BPse-EWdsDIC6Z2qgdnUCKDcaw5ygg8RT25hgYNdBXvAPdhUhODPvBCha3nxpo4CEFqc03h0hOVOwDCp9GqsV6N6Z3e6HeEl-lmU&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-paper&quot;&gt;The paper&lt;/h2&gt;

&lt;h3 id=&quot;overview-of-factors-that-potentially-have-an-impact-on-academic-performance&quot;&gt;Overview of factors that potentially have an impact on academic performance.&lt;/h3&gt;

&lt;p&gt;The paper starts off by giving an overview of the ‘general intelligence factor’ denoted by &lt;em&gt;g&lt;/em&gt; which has apparently been closely associated to academic performance.
The contrast to this (again discussed in the paper) is the &lt;strong&gt;Five Factor Model&lt;/strong&gt; for personality which maps individual personality to the following 5 dimensions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Agreeableness&lt;/li&gt;
  &lt;li&gt;Conscientiousness&lt;/li&gt;
  &lt;li&gt;Emotional Stability&lt;/li&gt;
  &lt;li&gt;Extraversion&lt;/li&gt;
  &lt;li&gt;Openness&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the difficulties I had with understanding this paper was with the psychological vocabulary that I was not familiar with.
Those 5 dimensions are not always easy to define but a loose (and almost certainly) incorrect interpretation of Conscientiousness is an individual’s ‘work-hard-ability’.
My interpretation of Openness is an individual’s ‘want-to-learn-stuff-ability’ but the paper goes in to a pretty good discussion of each of those so I would recommend taking a look.&lt;/p&gt;

&lt;p&gt;The paper gives a nice description and review of each dimension.
I am mainly going to concentrate on what the paper says about Openness and Conscientiousness but there was one particular thing said about Extraversion that I thought was worth noting:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Although more extraverted students may get greater attention leading to higher performance at primary level, the reduced strength of teacher student relationships at higher levels of education appear to eliminate this effect.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whilst this effect no longer being present at higher levels of education is perhaps a positive I feel that it does not show a ‘levelling of the playing field’ but rather that the student specific education has a lesser emphasis at higher levels of education (that is a beast of a long and terribly written sentence, it is late and I am too tired to fix it so instead added this parenthesis that makes it even longer; if you have read this far: I congratulate you).
I will not dwell on this as I am not sure it is the main point of the paper nor that there is a quick solution (I teach 150+ students in my first year class…) but I thought it was interesting.&lt;/p&gt;

&lt;h3 id=&quot;self-vs-non-self-evaluation&quot;&gt;Self vs non-self evaluation&lt;/h3&gt;

&lt;p&gt;One of the important things when trying to correlate academic performance and personality is obviously getting the correct measurement for the Five Factor Model.
An in depth overview of self versus non self evaluation is then given in the paper and Poropat describes how various studies have shown that non-self evaluation is a better predictor of academic performance than self evaluation (note that at this point no comparison is given to the general intelligence factor - that comes later).
I think this kind of points to the idea that ‘teachers and peers know you better than you know yourself’ (or at least in terms of the Five Factor Model).
It is particularly relevant to the work of Poropat’s paper as he then collects studies that look at the correlation of the Five Factor Model with academic performance: in particular only non-self evaluation studies are considered.&lt;/p&gt;

&lt;h3 id=&quot;using-the-five-factor-model&quot;&gt;Using the Five Factor Model&lt;/h3&gt;

&lt;p&gt;One interesting aspect of the paper is that it emphasises that certain pedagogic approaches would be better suited to certain personalities:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“For example, discovery learning approaches help students who are higher in openness to learn while students lower on openness are aided by programmed instruction…”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I need to think about this in relation to the fact that there is other research that shows that &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/05/reflecting-on-evidence-for-benefits-of.html&quot;&gt;students achieve better academic performance in an active learning environment&lt;/a&gt; (such as discovery learning which is apparently another term for inquiry based learning).&lt;/p&gt;

&lt;h3 id=&quot;hard-work-and-curiosity-are-better-predictors-of-academic-performance-than-intellect&quot;&gt;Hard work and curiosity are better predictors of academic performance than intellect&lt;/h3&gt;

&lt;p&gt;This is one of the nicer takeaways of the paper, by analysing 16 reports of studies that linked the five factor model to academic performance; Poropat shows that the correlation of Conscientiousness is stronger than the correlation of Openness.
This is in turn stronger than previously reported correlations of the general intelligence factor.&lt;/p&gt;

&lt;p&gt;I am sure that there will be studies and findings that report different things but I know that I’ll be using this meta analysis as a basis for further pedagogic work (in particular this paper will be very helpful for my current undergraduate research student and I: we are looking at student personality in a flipped classroom).&lt;/p&gt;

&lt;p&gt;I know that I have always had a major preference to work with students that are (according to my personal evaluation) high on the Conscientiousness scale.&lt;/p&gt;

&lt;h3 id=&quot;tldr-summary&quot;&gt;&lt;strong&gt;TLDR&lt;/strong&gt;: Summary&lt;/h3&gt;

&lt;p&gt;I realise that I really have rambled in the above (the notes in my notebook are far messier still) so here are 3 bullet points I would take away from this paper:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There exists a 5 dimensional measure of personality;&lt;/li&gt;
  &lt;li&gt;Non-self evaluated versions of this measure are more accurate with regards to academic performance;&lt;/li&gt;
  &lt;li&gt;There is evidence that hard work is a better predictor than intellect for academic performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If there was one point I wish all students would &lt;strong&gt;believe&lt;/strong&gt; it would be that last one.
I often feel that some students believe that they have to settle for a certain level of achievement (‘because that is just how smart they are’) and this is something I have never personally been satisfied with.
This is mentioned in particular in Poropat’s paper as there is evidence that personality can be modified more easily than general intelligence factor (even in older students).&lt;/p&gt;

&lt;p&gt;It also seems evident as students of higher intellect would perhaps have been used to getting by without effort.
Once things became ‘hard’ then perhaps those students who are used to working hard could indeed achieve success…&lt;/p&gt;

&lt;h3 id=&quot;my-personal-experience&quot;&gt; My personal experience&lt;/h3&gt;

&lt;p&gt;To finish off this blog I thought I would throw in an xkcd style graph of my own personal ‘academic journey’ (to fully understand it, the blog post about my Physics teacher I linked to earlier is probably of interest):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/xkcd_vks_learning.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://gist.github.com/drvinceknight/296e5765ab3921f93b08&quot;&gt;Matplotlib code here if it is of interest&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;As a general summary I can certainly say that I firmly believe that any/all of my academic achievements have had very little to do with my ‘intellectual ability’ as opposed to my work ethic.
Here’s a quote of Larry Bird that I really fell in love with the first time I heard it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve got a theory that if you give 100% all of the time, somehow things will work out in the end.&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded>
	<dc:date>2015-01-16T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/mathematics/2015/01/07/my_otis_king_calculator/">
	<title>Vince Knight: My Otis King Calculator</title>
	<link>http://drvinceknight.github.io/unpeudemath/mathematics/2015/01/07/my_otis_king_calculator/</link>
	<content:encoded>&lt;p&gt;I was given a very cool present this Christmas period by my in laws (Check out Rachel’s fitness blog &lt;a href=&quot;http://rbhfitness.blogspot.co.uk/&quot;&gt;here&lt;/a&gt; and also this pretty incredible photo of Bryn in Antartica &lt;a href=&quot;https://twitter.com/RachelPrytherch/status/533148818163134464&quot;&gt;here&lt;/a&gt;). It’s an old school &lt;a href=&quot;http://en.wikipedia.org/wiki/Otis_King&quot;&gt;Otis King calulator&lt;/a&gt; which based on wikipedia was made sometime between 1922 and 1972.&lt;/p&gt;

&lt;p&gt;Here it is in it’s box:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/calculator_in_box.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The box contains some (pretty old looking) instructions and the calculator itself:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/calculator_out_of_box.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This calculator allows you to carry out multiplication and division pretty easily thanks to the use of a logarithmic scale.&lt;/p&gt;

&lt;p&gt;This video is a pretty good demonstration of how to work it:&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
        
    
&lt;/div&gt;

&lt;p&gt;If you don’t have time to look at that short video here’s the basics of trying to multiply 14 by 6.
The calculator is made up of two cylinders seperated by a slider with two markers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/standing_calculator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First we put the bottom marker on 14:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/calculator_step_1_of_multiplication.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we have done that we align the top marker with a ‘ONE’ (there are three of them) at the top or bottom (of the upper cylinder).
We do this by keeping the bottom marker aligned on the 14:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/calculator_step_2_of_multiplication.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The final step is to move the top marker to 6 and read the result of the product on the bottom marker:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/calculator_step_3_of_multiplication.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As can be shown in the photo the result is 84.&lt;/p&gt;

&lt;p&gt;As you can see in the video (and or might be able to work out) it’s pretty simple to invert this process to carry out division also.
For example the following photo shows the last step of 84/5= 16.8.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/calculator_step_3_of_division.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is such a neat little calculator and a very cool gift.
Not quite sure I’ll be letting go of my smart phone just yet but this will go really nicely on the desk in my office.&lt;/p&gt;</content:encoded>
	<dc:date>2015-01-07T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Subgroup-Lattice-Edges/">
	<title>Liang Ze: Lattice of Subgroups III - Coloring Edges</title>
	<link>http://sheaves.github.io/Subgroup-Lattice-Edges/</link>
	<content:encoded>&lt;p&gt;This post will cover the coloring of edges in the lattice of subgroups of a group. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://sheaves.github.io/images/C3semiC8.png&quot; alt=&quot;Lattice of subgroups of $C3:C8$&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Coloring edges is almost as simple as &lt;a href=&quot;http://sheaves.github.io/Subgroup-Lattice-Color-Vertices/&quot;&gt;coloring vertices&lt;/a&gt;, so we’ll start with that. &lt;/p&gt;

&lt;h2 id=&quot;generating-small-groups&quot;&gt;Generating small groups&lt;/h2&gt;
&lt;p&gt;As we’ve done in previous posts, let’s start by choosing a group and generate its lattice of subgroups. This can be done by referring to this list of &lt;a href=&quot;http://www.sagemath.org/doc/constructions/groups.html#construction-instructions-for-every-group-of-order-less-than-32&quot;&gt;constructions for every group of order less than 32 &lt;/a&gt;. These instructions allow us to construct every group on Wikipedia’s &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_small_groups&quot;&gt;list of small groups&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;For this post, we’ll use $G = C_3 \rtimes C_8$ (or $\mathbb{Z}_3 \rtimes \mathbb{Z}_8$). First, we’ll generate $G$ and display it’s poset of subgroups. For simplicity, we’ll label by cardinality, and we won’t color the vertices.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;coloring-edges&quot;&gt;Coloring edges&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&quot;http://sheaves.github.io/Subgroup-Lattice-Color-Vertices/&quot;&gt;previous post&lt;/a&gt;, we colored vertices according to whether the corresponding subgroup was normal (or abelian, or a Sylow subgroup, etc.) These are properties that depend only on each individual subgroup.&lt;/p&gt;

&lt;p&gt;However, suppose we want to see the subnormal series of the group. A &lt;a href=&quot;http://en.wikipedia.org/wiki/Subgroup_series#Normal_series.2C_subnormal_series&quot;&gt;subnormal series&lt;/a&gt; is a series of subgroups where each subgroup is a normal subgroup of the next group in the series. Checking whether a particular series of subgroups is a subnormal series requires checking &lt;em&gt;pairs&lt;/em&gt; of subgroups to see whether one is a normal subgroup of the other. This suggests that we color &lt;em&gt;edges&lt;/em&gt; according to whether one of its endpoints is a normal subgroup of the other endpoint.&lt;/p&gt;

&lt;p&gt;The edges of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Hasse_diagram&quot;&gt;Hasse diagram&lt;/a&gt; of a poset are the pairs $(h,k)$ where $h$ is &lt;a href=&quot;http://en.wikipedia.org/wiki/Covering_relation&quot;&gt;covered by&lt;/a&gt; $k$ in the poset. This means that $h &amp;lt; k$, with nothing else in between. We thus obtain all the edges of a Hasse diagram by calling &lt;code&gt;P.cover_relations()&lt;/code&gt; on the poset $P$.&lt;/p&gt;

&lt;p&gt;To color edges of a graph, we create a dictionary &lt;code&gt;edge_colors&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;up-next&quot;&gt;Up next…&lt;/h3&gt;
&lt;p&gt;This is the last post describing relatively simple things one can do to visualize subgroup lattices (or more generally, posets) in Sage. In the next post, I’ll write code to label edges. Doing this requires extracting the Hasse diagram of a poset as a graph and modifying the edge labels. Also, subgroup lattices tend to get unwieldy for large groups. In the next post, we’ll restrict our attention to conjugacy classes of subgroups, rather than all subgroups.&lt;/p&gt;

&lt;p&gt;After that, I hope to write a bit about doing some simple representation theory things in Sage.&lt;/p&gt;</content:encoded>
	<dc:date>2014-12-27T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Holiday-Harmonograph/">
	<title>Liang Ze: Holiday Harmonograph</title>
	<link>http://sheaves.github.io/Holiday-Harmonograph/</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;(Guest post from the Annals of Harmonography)&lt;/em&gt;
&lt;img src=&quot;http://sheaves.github.io/images/harmonograph_loop.gif&quot; alt=&quot;harmonograph&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;When it’s snowing outside (or maybe not),&lt;/p&gt;

&lt;p&gt;And your feet are cold (or maybe hot),&lt;/p&gt;

&lt;p&gt;When it’s dark as day (or bright as night),&lt;/p&gt;

&lt;p&gt;And your heart is heavy (and head is light),&lt;/p&gt;

&lt;p&gt;What should you do (what should you say)&lt;/p&gt;

&lt;p&gt;To make it all right (to make it okay)?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;Just pick up a pen (a pencil will do),&lt;/p&gt;

&lt;p&gt;Set up a swing (or &lt;a href=&quot;http://www.karlsims.com/harmonograph/&quot;&gt;three&lt;/a&gt;, or two),&lt;/p&gt;

&lt;p&gt;And while the world spins (or comes to a still),&lt;/p&gt;

&lt;p&gt;In your own little room (or on top of a hill),&lt;/p&gt;

&lt;p&gt;Let your pendulum sway (in its time, in its way),&lt;/p&gt;

&lt;p&gt;And watch as the pen draws your worries away!&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Click inside the colored box to choose a color. Then click outside and watch it update.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;auto_out&quot;&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;related-articles&quot;&gt;Related Articles:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;7 celebrities and their harmonographs&lt;/li&gt;
  &lt;li&gt;What your harmonograph says about you&lt;/li&gt;
  &lt;li&gt;10 tips for a happier harmonograph&lt;/li&gt;
  &lt;li&gt;Harmonograph secrets… revealed!&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2014-12-25T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/code/2014/12/23/using_python_and_selenium_for_a_jekyll_site/">
	<title>Vince Knight: Using Python and Selenium to write functional tests for a Jekyll site</title>
	<link>http://drvinceknight.github.io/unpeudemath/code/2014/12/23/using_python_and_selenium_for_a_jekyll_site/</link>
	<content:encoded>&lt;p&gt;Over the past six months or so I’ve become a huge Jekyll fan.
In this post I’ll briefly show how to write functional tests using Selenium for a Jekyll site.&lt;/p&gt;

&lt;h3 id=&quot;what-are-functional-tests&quot;&gt;What are functional tests?&lt;/h3&gt;

&lt;p&gt;This is all extremely well described in &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000000754/ch01.html&quot;&gt;Test Driven Development with Python&lt;/a&gt;.
Functional tests are one aspect of test driven development (TDD).
They concentrate on testing that software works as it is expected to when used by the user.
TDD is the (awesome) framework in which the first thing one should do when writing code is to write a test, then check that it fails and then write code that makes it pass.
Or to put it simple “Obey the Testing Goat! Do Nothing Until You Have a Test” (that is a direct quote from the book I mentioned above).&lt;/p&gt;

&lt;p&gt;Testing takes various forms, two of which are (the hyper links there go to the corresponding Python library):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/doctest.html&quot;&gt;Doctests&lt;/a&gt;: this involves writing tests directly in the documentation of the code you are writing.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/unittest.html&quot;&gt;Unittests&lt;/a&gt;: this involves writing more robust tests in a separate script.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;let-us-fire-up-a-jekyll-site-skip-this-if-you-are-a-jekyll-regular&quot;&gt;Let us fire up a Jekyll site (skip this if you are a jekyll regular)&lt;/h3&gt;

&lt;p&gt;This is very easy to do, after installing jekyll (see &lt;a href=&quot;http://jekyllrb.com/docs/installation/&quot;&gt;jekyll installation instructions&lt;/a&gt;), the following will create a base site:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll new site_for_tests
New jekyll site installed in /Users/vince/site_for_tests.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simply navigate to that new folder and run the following jekyll command to fire up the base site:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve
Configuration file: /Users/vince/site_for_tests/_config.yml
            Source: /Users/vince/site_for_tests
       Destination: /Users/vince/site_for_tests/_site
      Generating...
                    &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
 Auto-regeneration: disabled. Use --watch to enable.
Configuration file: /Users/vince/site_for_tests/_config.yml
    Server address: http://0.0.0.0:4000/
  Server running... press ctrl-c to stop.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then open up a browser and throw &lt;code&gt;http://0.0.0.0:4000/&lt;/code&gt; in to the url, the base site will come up:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/base_jekyll.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we are ready to write a Selenium testing framework&lt;/p&gt;

&lt;h3 id=&quot;writing-an-initial-selenium-test&quot;&gt;Writing an initial Selenium test&lt;/h3&gt;

&lt;p&gt;So now we are going to write a test that indeed checks that the website acts like we expect.
First of all let us install the Python selenium library:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install selenium&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let us write some tests!
Open up a file called &lt;code&gt;functional_tests.py&lt;/code&gt; and fill it with this:&lt;/p&gt;



&lt;p&gt;Run the tests:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python functional_tests.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will open up Firefox and (assuming all is well) return nothing in the shell.&lt;/p&gt;

&lt;p&gt;So now let us modify the test file:&lt;/p&gt;



&lt;p&gt;Note that I am getting ready to change the base jekyll template and build my site about writing tests.
Run the tests:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python new_functional_tests.py
File &lt;span class=&quot;s2&quot;&gt;&quot;new_functional_tests.py&quot;&lt;/span&gt;, line 6, in &amp;lt;module&amp;gt;
    assert &lt;span class=&quot;s1&quot;&gt;'How to write tests'&lt;/span&gt; in browser.title  &lt;span class=&quot;c&quot;&gt;# This checks that the required title is in browser title&lt;/span&gt;
AssertionError&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This time around we get an assertion error :)&lt;/p&gt;

&lt;p&gt;Now we can go about changing our site (we are doing some TDD right now).
Here is the new config file (note I have only changed the &lt;code&gt;title&lt;/code&gt; field):&lt;/p&gt;



&lt;p&gt;Now when we run the tests we get no assertion error:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python new_functional_tests.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This frees us up to write another test and then write another feature etc…&lt;/p&gt;

&lt;h3 id=&quot;taking-things-further&quot;&gt;Taking things further&lt;/h3&gt;

&lt;p&gt;The above is an extremely simple example of what Selenium can do and also of how to write tests.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you know how to write unit tests but are not sure about Selenium take a look at &lt;a href=&quot;http://docs.seleniumhq.org/docs/03_webdriver.jsp&quot;&gt;the Selenium site&lt;/a&gt; (you can click on a button for Python or indeed whatever interface you would like to use). That site has a good collection of what Selenium can do (check what happens when clicking on links, checking content etc…). This is also helpful: &lt;a href=&quot;https://selenium-python.readthedocs.org/&quot;&gt;https://selenium-python.readthedocs.org/&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;If you are happy with Selenium but not unit tests then there are a variety of great tutorials around but to be honest I cannot recommend the &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000000754/ch01.html&quot;&gt;Test Driven Development with Python Book&lt;/a&gt; enough. &lt;a href=&quot;https://twitter.com/hjwp&quot;&gt;Harry Percival&lt;/a&gt; did a great job.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are some tests I wrote today for the site my students have put together for &lt;a href=&quot;http://cardiffmathematicscodeclub.github.io/&quot;&gt;Code Club&lt;/a&gt;:&lt;/p&gt;



&lt;p&gt;In there you can see examples of all of the above (clicking on links, checking content, checking things against a database etc…) but also the way I document the code (using what is called a ‘User Story’ which explains what a user should/would see).
You can also see the way to properly ‘tear down’ the tests (so that Firefox closes).&lt;/p&gt;

&lt;p&gt;I hope this is helpful for some: in essence you can use Selenium via Python for any site, to use it with jekyll all you need to do is have the local server running.&lt;/p&gt;</content:encoded>
	<dc:date>2014-12-23T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://quantumtetrahedron.wordpress.com/?p=2162">
	<title>David Horgan (quantumtetrahedron): hyperequ1sage26jvscosLv3</title>
	<link>http://quantumtetrahedron.wordpress.com/2014/12/21/numerical-work-with-sagemath-23-wigner-reduced-rotation-matrix-elements-as-limits-of-6j-symbols/</link>
	<content:encoded>&lt;p&gt;This work is based on the paper &amp;#8220;Exact Computation and Asymptotic Approximations of 6j Symbols: Illustration of Their Semiclassical Limits by Mirco Ragni et al which I&amp;#8217;ll be reviewing in my next post.&lt;/p&gt;
&lt;p&gt;The 6j symbols tend asymptotically to &lt;a class=&quot;zem_slink&quot; title=&quot;Eugene Wigner&quot; href=&quot;http://en.wikipedia.org/wiki/Eugene_Wigner&quot; target=&quot;_blank&quot; rel=&quot;wikipedia&quot;&gt;Wigner&lt;/a&gt; d&lt;sup&gt;l&lt;/sup&gt;&lt;sub&gt;nm&lt;/sub&gt; functions when some &lt;a class=&quot;zem_slink&quot; title=&quot;Angular momentum&quot; href=&quot;http://en.wikipedia.org/wiki/Angular_momentum&quot; target=&quot;_blank&quot; rel=&quot;wikipedia&quot;&gt;angular momenta&lt;/a&gt; are large where θ assumes certain discrete values.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ10.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2165&quot; src=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ10.gif?w=474&quot; alt=&quot;hyperequ10&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ11.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2166&quot; src=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ11.gif?w=474&amp;h=38&quot; alt=&quot;hyperequ11&quot; width=&quot;474&quot; height=&quot;38&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ12.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2167&quot; src=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ12.gif?w=474&quot; alt=&quot;hyperequ12&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;These formulas are illustrated below:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperfig2.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2168&quot; src=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperfig2.gif?w=474&quot; alt=&quot;hyperfig2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;This can be modelled using sagemath.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ1sage1.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2170&quot; src=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ1sage1.gif?w=474&amp;h=248&quot; alt=&quot;hyperequ1sage1&quot; width=&quot;474&quot; height=&quot;248&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The routine gives some great results:&lt;/p&gt;
&lt;p&gt;For N=320, M=320, n=0, m=0, l=20, L=0,  Lmax=640&lt;/p&gt;
&lt;p&gt;Wigner 6j vs cosθ&lt;sub&gt;L&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ1sage26jvscosl1.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2173&quot; src=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ1sage26jvscosl1.gif?w=474&amp;h=234&quot; alt=&quot;hyperequ1sage26jvscosL&quot; width=&quot;474&quot; height=&quot;234&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For N=320, M=320, n=0, m=0, l=10, L=0,  Lmax=640&lt;/p&gt;
&lt;p&gt;Wigner 6j vs cosθ&lt;sub&gt;L&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ1sage26jvscoslv2.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2174&quot; src=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ1sage26jvscoslv2.gif?w=474&amp;h=229&quot; alt=&quot;hyperequ1sage26jvscosLv2&quot; width=&quot;474&quot; height=&quot;229&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For N=320, M=320, n=0, m=0, l=5, L=0,  Lmax=640&lt;/p&gt;
&lt;p&gt;Wigner 6j vs cosθ&lt;sub&gt;L&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ1sage26jvscoslv31.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2176&quot; src=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ1sage26jvscoslv31.gif?w=474&amp;h=234&quot; alt=&quot;hyperequ1sage26jvscosLv3&quot; width=&quot;474&quot; height=&quot;234&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/hyperequ1sage26jvscoslv3.gif&quot;&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gocomments/quantumtetrahedron.wordpress.com/2162/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/quantumtetrahedron.wordpress.com/2162/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://pixel.wp.com/b.gif?host=quantumtetrahedron.wordpress.com&amp;blog=54584330&amp;post=2162&amp;subd=quantumtetrahedron&amp;ref=&amp;feed=1&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-12-21T23:20:34+00:00</dc:date>
</item>
<item rdf:about="http://martinralbrecht.wordpress.com/?p=1099">
	<title>Martin Albrecht: martinralbrecht</title>
	<link>http://martinralbrecht.wordpress.com/2014/12/17/looking-back-and-forward-for-open-source-mathematics-software-2014/</link>
	<content:encoded>&lt;p&gt; When a year ends people make lists. I can only guess that several people are currently busy with writing “The 5 most revised papers on &lt;a href=&quot;https://eprint.iacr.org&quot;&gt;eprint&lt;/a&gt; ” and “The 8 best IACR flagship conference rump session presentations of 2014”. Since all the good lists are taken, my list has to be a little bit more personal. Alas, here is my list of stuff that happened in open-source computational mathematics in 2014 around me. That is, below I list what developments happened in 2014 and try to provide an outlook for 2015 (so that I can come back in a year to notice that nothing played out as planned). &lt;/p&gt;
&lt;p&gt; If you are interested in any of the projects below feel invited to get involved. Also, if you are student and you are interested in working on one of the (bigger) projects listed below over the summer, get in touch: we could try to turn it into a &lt;a href=&quot;https://www.google-melange.com/gsoc/homepage/google/gsoc2015&quot;&gt;Google Summer of Code 2015&lt;/a&gt; project. &lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-1099&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;fplll: lattice reduction&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt; This year I mainly worked on lattice-based cryptography. At the heart of this line of research is the assumption that finding short vectors in discrete subgroups of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BR%7D%5En&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;\mathbb{R}^n&quot; title=&quot;\mathbb{R}^n&quot; class=&quot;latex&quot; /&gt; (think of a vector space, but only integer linear combinations are allowed) is hard. The main tool for finding such short vectors is lattice reduction. &lt;/p&gt;
&lt;p&gt; The first algorithm for lattice reduction was the LLL algorithm which proved to be incredibly useful for many applications in cryptography and beyond. LLL is implemented in &lt;a href=&quot;http://www.shoup.net/ntl/doc/LLL.txt&quot;&gt;NTL&lt;/a&gt;, &lt;a href=&quot;http://pari.math.u-bordeaux.fr/dochtml/html.stable/Vectors,_matrices,_linear_algebra_and_sets.html&quot;&gt;Pari&lt;/a&gt;, &lt;a href=&quot;https://github.com/dstehle/fplll/blob/master/src/lll.h&quot;&gt;fplll&lt;/a&gt; and – &lt;a href=&quot;https://groups.google.com/d/topic/flint-devel/zdNBXow63z4/discussion&quot;&gt;as of this summer&lt;/a&gt; – in FLINT 2; fplll typically seems to be the fastest implementation (cf. the link above for a comparison with FLINT 2). &lt;/p&gt;
&lt;p&gt; While LLL runs in polynomial time (read: fast) it only gives a “short vector” which is about &lt;img src=&quot;http://s0.wp.com/latex.php?latex=2%5E%7Bn%2F4%7D&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;2^{n/4}&quot; title=&quot;2^{n/4}&quot; class=&quot;latex&quot; /&gt; longer than the actually shortest vector in the lattice (read: not so good). This is good enough for many applications but not good enough to, e.g. solve LWE. &lt;/p&gt;
&lt;p&gt; To produce shorter vectors we typically employ the BKZ algorithm which is parameterised by a block size. The larger the block size the better the output but the longer it takes. BKZ is implemented in &lt;a href=&quot;http://www.shoup.net/ntl/doc/LLL.txt&quot;&gt;NTL&lt;/a&gt; and &lt;a href=&quot;https://github.com/dstehle/fplll/blob/master/src/bkz.h&quot;&gt;fplll&lt;/a&gt;, typically fplll is faster. &lt;/p&gt;
&lt;p&gt; At AsiaCrypt 2011 Chen and Nguyen presented their &lt;a href=&quot;http://www.iacr.org/archive/asiacrypt2011/70730001/70730001.pdf&quot;&gt;results&lt;/a&gt; of combining various known techniques for speeding up the BKZ algorithm. They call the result BKZ 2.0. They also applied BKZ 2.0 to various benchmark problems and claimed substantial improvements over the public state of the art.  However, for some reasons only known to the authors and the AsiaCrypt 2011 programme committee, their paper was accepted without them publishing their source code. Since then we’re in the somewhat strange situation that everybody believes BKZ can be made to run much faster (you might even get your paper rejected because you are not using the state of the art, i.e. BKZ 2.0) but no one has publicly reproduced these results. &lt;/p&gt;
&lt;p&gt; In autumn we took some first steps towards fixing this situation by adding &lt;a href=&quot;https://github.com/dstehle/fplll/pull/6&quot;&gt;better pre-processing&lt;/a&gt; and an &lt;a href=&quot;https://github.com/dstehle/fplll/commit/df3720b8362c4464a59f2d64da5e3573da03b418&quot;&gt;easier linear pruning interface&lt;/a&gt; to fplll. I know that others have patched fplll as well, but as far as I know they never made their changes public. In the process, we also moved fplll’s development to &lt;a href=&quot;https://github.com/dstehle/fplll&quot;&gt;Github&lt;/a&gt;, so send your pull requests. &lt;/p&gt;
&lt;p&gt; While the result is an improvement over plain BKZ, there’s still a lot of work to be done to come even close to the results of Chen and Nguyen. For example, they use &lt;a href=&quot;http://www.iacr.org/archive/eurocrypt2010/66320257/66320257.pdf&quot;&gt;extreme pruning&lt;/a&gt; instead of the simple linear pruning strategy currently implemented in fplll and it’s not clear how to pick pruning parameters for extreme pruning … however, there’s a &lt;a href=&quot;http://arxiv.org/abs/1406.0342&quot;&gt;paper on the arXiv&lt;/a&gt; which promises an answer to this question. Furthermore, currently the user has to pick pre-processing parameters by hand, something the implementation should take care off by default. Finally, a recent &lt;a href=&quot;http://eprint.iacr.org/2014/980&quot;&gt;paper on ePrint&lt;/a&gt; claims that phase-based enumeration is much faster than the Kannan-Helfrich enumeration algorithm which is implemented everywhere including fplll. I’d consider addressing any of these issues a valuable contribution. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;dgs: sampling from a discrete Gaussian distribution&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt; A central step in most lattice-based cryptography is to sample from a discrete Gaussian. A discrete Gaussian distribution over the Integers is a distribution where the integer &lt;i&gt;x&lt;/i&gt; is sampled with probability proportional to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmbox%7Bexp%7D%28-%28x-c%29%5E2%2F%282%5Csigma%5E2%29%29&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;\mbox{exp}(-(x-c)^2/(2\sigma^2))&quot; title=&quot;\mbox{exp}(-(x-c)^2/(2\sigma^2))&quot; class=&quot;latex&quot; /&gt; where &lt;i&gt;σ&lt;/i&gt; is the width parameter (close to the standard deviation) and &lt;i&gt;c&lt;/i&gt; is the centre. There are several algorithms to choose from to sample from such a distribution each being better or worse in some situations. Somewhat surprisingly, though, when I got started implementing some lattice-based crypto there was no &lt;code&gt;C&lt;/code&gt; library available that allows to sample from a discrete Gaussian with reasonable efficiency. Now there &lt;a href=&quot;https://bitbucket.org/malb/dgs&quot;&gt;is&lt;/a&gt;. The library is called dgs and it is included in Sage by default and also unpins our &lt;a href=&quot;https://bitbucket.org/malb/gghlite-flint&quot;&gt;GGHLite implementation&lt;/a&gt;, so it has seen some usage. &lt;/p&gt;
&lt;p&gt; A few things still need to be done, though. &lt;a href=&quot;https://bitbucket.org/malb/dgs/commits/9bcdaa853cb458a6ad6055c991cab74647703e40&quot;&gt;Some&lt;/a&gt; &lt;a href=&quot;https://bitbucket.org/malb/dgs/commits/0206f9dd025fb8dc6021d37c652924e39c14d423&quot;&gt;bugs&lt;/a&gt; &lt;a href=&quot;https://bitbucket.org/malb/dgs/commits/7ce070313a4de4ee61cd886c2ad82f13046233fd&quot;&gt;were&lt;/a&gt; &lt;a href=&quot;https://bitbucket.org/malb/dgs/commits/76bd4344ea26e111c619288d16fb60c24690d222&quot;&gt;fixed&lt;/a&gt; in the stand-alone library but not ported back to Sage, yet. Also, the library would benefit from &lt;a href=&quot;https://bitbucket.org/malb/dgs/issue/2/test-mp-code&quot;&gt;more tests&lt;/a&gt; being run by &lt;code&gt;make check&lt;/code&gt;. Finally, implementing the &lt;a href=&quot;https://bitbucket.org/malb/dgs/issue/1/implement-discrete-ziggurat&quot;&gt;Discrete Ziggurat&lt;/a&gt; algorithm would complete the picture. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;oz: computing in some Cyclotomic number rings&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt; Most of the interesting code in our &lt;a href=&quot;https://bitbucket.org/malb/gghlite-flint&quot;&gt;GGHLite&lt;/a&gt; implementation is in the oz &lt;a href=&quot;https://bitbucket.org/malb/gghlite-flint/src/0e39e3a6309ff7320985450667815abe683f78f1/oz/?at=master&quot;&gt;submodule&lt;/a&gt; which implements arithmetic in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BZ%7D%5Bx%5D%2F%28x%5En%2B1%29&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;\mathbb{Z}[x]/(x^n+1)&quot; title=&quot;\mathbb{Z}[x]/(x^n+1)&quot; class=&quot;latex&quot; /&gt;, where &lt;i&gt;n&lt;/i&gt; is a power of two, and with all operations in quasi-linear time. While the code is already fairly modular, i.e. we separated crypto applications from arithmetic, it might make sense to outsource this module into a separate library so it can used more easily by other projects should they wish to. &lt;/p&gt;
&lt;p&gt; When we are doing this, we should probably also split up the dgsl &lt;a href=&quot;https://bitbucket.org/malb/gghlite-flint/src/0e39e3a6309ff7320985450667815abe683f78f1/dgsl/?at=master&quot;&gt;module&lt;/a&gt;. This module implements sampling from a discrete Gaussian distribution over arbitrary lattices (in contrast to dgs which implements it over the integers). This module contains two essentially independent parts. One part samples from  lattices represented by a basis matrix using the &lt;a href=&quot;http://www.cc.gatech.edu/~cpeikert/pubs/trap_lattice.pdf&quot;&gt;GPV algorithm&lt;/a&gt;. Another part samples from ideal lattices represented by an ideal generator in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BZ%7D%5Bx%5D%2F%28x%5En%2B1%29&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;\mathbb{Z}[x]/(x^n+1)&quot; title=&quot;\mathbb{Z}[x]/(x^n+1)&quot; class=&quot;latex&quot; /&gt; using &lt;a href=&quot;http://www.cc.gatech.edu/~cpeikert/pubs/pargauss.pdf&quot;&gt;Peikert’s algorithm&lt;/a&gt;. The latter relies heavily on oz (as well as dgs) and might as well be moved there, the former has no connection to oz and could be either included in dgs (which would entail making FLINT a dependency of dgs) or remain independent. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Linear algebra over small finite fields&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt; I didn’t work as much on linear algebra over small finite fields as I would have liked to in 2014. I doubt I’ll make it a priority of mine in 2015 either, so if anybody wants to jump in to help, that’d be much appreciated. &lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-1&quot;&gt;M4RI&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-1&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://bitbucket.org/malb/m4ri/&quot;&gt;M4RI&lt;/a&gt; implements dense linear algebra over &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BF%7D_2&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;\mathbb{F}_2&quot; title=&quot;\mathbb{F}_2&quot; class=&quot;latex&quot; /&gt;, i.e. the field with two elements 0 and 1. We released one &lt;a href=&quot;https://bitbucket.org/malb/m4ri/commits/tag/release-20140914&quot;&gt;bugfix release&lt;/a&gt; of M4RI this year. &lt;/p&gt;
&lt;p&gt; If you read this blog, you probably know that &lt;a href=&quot;http://www.ing.unitn.it/~bertolaz/&quot;&gt;Enrico’s&lt;/a&gt; &lt;a href=&quot;https://github.com/ebertolazzi/GF2toolkit&quot;&gt;implementation&lt;/a&gt; of Gaussian elimination is faster than our own. As far as I can tell the advantage of GF2Toolkit over M4RI comes from avoiding a lot of management overhead. To illustrate this point, consider the following output of Google’s &lt;a href=&quot;https://code.google.com/p/gperftools/&quot;&gt;perf tools&lt;/a&gt; on running M4RI’s Gaussian elimination on a 4096 x 4096 dense full rank matrix: &lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
     .      . 1121:      switch(__M4RI_M4RM_NTABLES) {
    42    131 1122:   case 8: t[7] = T[ 7]-&amp;gt;rows[ L[7][ (a &amp;gt;&amp;gt; 7*k) &amp;amp; bm ] ];
    57     79 1123:   case 7: t[6] = T[ 6]-&amp;gt;rows[ L[6][ (a &amp;gt;&amp;gt; 6*k) &amp;amp; bm ] ];
    27     47 1124:   case 6: t[5] = T[ 5]-&amp;gt;rows[ L[5][ (a &amp;gt;&amp;gt; 5*k) &amp;amp; bm ] ];
    14     25 1125:   case 5: t[4] = T[ 4]-&amp;gt;rows[ L[4][ (a &amp;gt;&amp;gt; 4*k) &amp;amp; bm ] ];
    29     52 1126:   case 4: t[3] = T[ 3]-&amp;gt;rows[ L[3][ (a &amp;gt;&amp;gt; 3*k) &amp;amp; bm ] ];
    15     34 1127:   case 3: t[2] = T[ 2]-&amp;gt;rows[ L[2][ (a &amp;gt;&amp;gt; 2*k) &amp;amp; bm ] ];
    14     27 1128:   case 2: t[1] = T[ 1]-&amp;gt;rows[ L[1][ (a &amp;gt;&amp;gt; 1*k) &amp;amp; bm ] ];
     6     17 1129:   case 1: t[0] = T[ 0]-&amp;gt;rows[ L[0][ (a &amp;gt;&amp;gt; 0*k) &amp;amp; bm ] ];
     .      . 1130:         break;
     .      . 1131:   default:

&amp;lt;snip&amp;gt;
     .      . 1137:   switch(__M4RI_M4RM_NTABLES) {
   970   1946 1138:     case 8: _mzd_combine_8(c, t, wide); break;
&lt;/pre&gt;
&lt;p&gt; The numbers in the first two columns indicate how much time we spent in each line. As you can see, we’re spending between 20% and 25% of the time it takes to perform additions (&lt;code&gt;_mzd_combine_8&lt;/code&gt;) with setting them up (everything else); We are performing 4096/128 · 8 = 256 XORs in &lt;code&gt;_mzd_combine_8&lt;/code&gt;, which isn’t much and so our setup overhead is hurting us. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-2&quot;&gt;M4RIE&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-2&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://bitbucket.org/malb/m4rie/&quot;&gt;M4RIE&lt;/a&gt; is a library for fast arithmetic with matrices over small even characteristic fields, i.e. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BF%7D_2%5Bx%5D%2Ff%28x%29&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;\mathbb{F}_2[x]/f(x)&quot; title=&quot;\mathbb{F}_2[x]/f(x)&quot; class=&quot;latex&quot; /&gt; where &lt;i&gt;f(x)&lt;/i&gt; is an irreducible polynomial over &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BF%7D_2%5Bx%5D&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;\mathbb{F}_2[x]&quot; title=&quot;\mathbb{F}_2[x]&quot; class=&quot;latex&quot; /&gt; of degree up to 16. We released one &lt;a href=&quot;https://bitbucket.org/malb/m4rie/commits/tag/release-20140914&quot;&gt;bugfix release&lt;/a&gt; of M4RIE this year. &lt;/p&gt;
&lt;p&gt; Last year I &lt;a href=&quot;https://plus.google.com/+martinalbrecht/posts/JRyv4SXv6Z7&quot;&gt;added&lt;/a&gt; some code to M4RIE for computing with matrices over &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BF%7D_2%5Bx%5D&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;\mathbb{F}_2[x]&quot; title=&quot;\mathbb{F}_2[x]&quot; class=&quot;latex&quot; /&gt;, i.e. where the entries are high(er) degree polynomials over &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BF%7D_2&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;\mathbb{F}_2&quot; title=&quot;\mathbb{F}_2&quot; class=&quot;latex&quot; /&gt;. The strategy I implemented is some “evaluation,  pointwise-multiplication, interpolation” scheme where I use Dan Bernstein’s &lt;a href=&quot;http://binary.cr.yp.to/linearmod2-20090830.pdf&quot;&gt;“Optimizing linear maps modulo 2”&lt;/a&gt; to cut down the cost of first and last step. Unfortunately, I didn’t get around to work more on this code this year. While I still don’t know an application for this, it would be fun to see how far we can push this. But I guess to do this properly, we’d need to also take another look at the Number Theoretic Transform to realise such multiplications, at least when the dimension of the matrices is not much bigger than the degree of the polynomials. &lt;/p&gt;
&lt;p&gt; Another area for improvement is that the formulas we use to realise multiplication for degrees up to 16 are not always optional. In particular, we know that the following improvements are possible for degree 6 (18 → 15), degree 8 (27 → 24), degree 9 (31 → 30), degree 10 (36 → 33), degree 11 (40 → 39), degree 12 (45 → 42), degree 13 (49 → 38), degree 14 (55 → 51), degree 15 (60 → 54), degree 16 (64 → 60), where the numbers in brackets are the current and the best known number of multiplications over &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BF%7D_2&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;\mathbb{F}_2&quot; title=&quot;\mathbb{F}_2&quot; class=&quot;latex&quot; /&gt;. Some of these improvements can be realised by simply dropping in known better formulas, some of them would be a bit more involved because they rely on finite field embeddings. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;CryptoMiniSAT&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://github.com/msoos/cryptominisat&quot;&gt;CryptoMiniSAT&lt;/a&gt; is the SAT solver with the best integration into Sage. However, Sage is still using CryptoMiniSAT 2.9.6 instead the more recent 4.x series. This is partly because we can’t get our act together and partly because Máté decided to go with CMake instead of Autotools in the current CryptoMiniSat series. There’s a &lt;a href=&quot;https://github.com/msoos/cryptominisat/pulls&quot;&gt;pull request&lt;/a&gt; idling around which improves Autotools support for CryptoMiniSAT. I should probably follow up on this. Once this is taken care of (which shouldn&amp;#8217;t take more than 1-2 hours), we should &lt;a href=&quot;http://trac.sagemath.org/ticket/15674&quot;&gt;update CryptoMiniSAT in Sage&lt;/a&gt;. The interface of CryptoMiniSAT hasn&amp;#8217;t changed much, so this second step shouldn&amp;#8217;t be too hard either. Some options might have changed, so I would guess &lt;a href=&quot;https://github.com/sagemath/sage/blob/master/src/sage/sat/solvers/cryptominisat/solverconf_helper.cpp&quot;&gt;solverconf_helper.cpp&lt;/a&gt; would need to be adapted slightly. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;Sage&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://sagemath.org&quot;&gt;Sage&lt;/a&gt; saw four major releases in 2014. &lt;a href=&quot;http://boxen.math.washington.edu/home/release/sage-6.1/sage-6.1.txt&quot;&gt;Sage 6.1&lt;/a&gt; in February, &lt;a href=&quot;http://boxen.math.washington.edu/home/release/sage-6.2/sage-6.2.txt&quot;&gt;Sage 6.2&lt;/a&gt; in May, &lt;a href=&quot;http://boxen.math.washington.edu/home/release/sage-6.3/sage-6.3.txt&quot;&gt;Sage 6.3&lt;/a&gt; in August and &lt;a href=&quot;https://martinralbrecht.wordpress.com/2014/11/16/sage-6-4/&quot;&gt;Sage 6.4&lt;/a&gt; in November. &lt;/p&gt;
&lt;p&gt; My main contributions this year were to add better support for computing with lattices: I mainly worked on the fplll interface (see above) and on sampling from discrete Gaussian distributions (also above). I also fixed the occational bug and reviewed the occational ticket, but not as much as I would have liked to. In fact, there’s just been a friendly reminder that we have way too many tickets for Sage with status &lt;a href=&quot;https://groups.google.com/d/topic/sage-devel/9Jw4viVgDKc/discussion&quot;&gt;“needs review”&lt;/a&gt; which means that someone contributed some code and that code is now waiting to be reviewed so it can be included (or revised). &lt;/p&gt;
&lt;p&gt; As always there’s much to be done for Sage, but too little time. Here are some examples. &lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-1&quot;&gt;SAT Solvers&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-1&quot;&gt;
&lt;p&gt; Besides the tasks listed under the CryptoMiniSAT heading, more work should be done on Sage’s SAT solving capabilities. Currently, Sage will fail to solve any SAT problem without installing additional software because it believes that no SAT solver is included by default. Turns out, this is not correct. That is, Sage ships with GLPK and GLPK can be used as a SAT solver. That won’t break any performance records but it’s better than nothing. So we should use &lt;a href=&quot;http://trac.sagemath.org/ticket/16862&quot;&gt;GLPK as the poor person&amp;#8217;s SAT Solver&lt;/a&gt;. Indeed, adding support for this should be fairly straight forward. Here’s what &lt;a href=&quot;http://www.steinertriples.fr/ncohen/&quot;&gt;Nathann Cohen&lt;/a&gt; had to say who pointed me towards GLPK: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; There are some sentences about it at the end of that : &lt;a href=&quot;http://en.wikibooks.org/wiki/GLPK/Mixing_GLPK_with_other_solver_packages&quot;&gt;http://en.wikibooks.org/wiki/GLPK/Mixing_GLPK_with_other_solver_packages&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; And this page says that there is a dedicated pdf in GLPK&amp;#8217;s doc: &lt;a href=&quot;http://en.wikibooks.org/wiki/GLPK/Literature#Official_GLPK_documentation&quot;&gt;http://en.wikibooks.org/wiki/GLPK/Literature#Official_GLPK_documentation&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; … &lt;/p&gt;
&lt;p&gt; But it seems that the interface is pretty basic, and may have to work through files&amp;#x2026; or though LP ! But as you can already produce DIMACS SAT instances with you code, perhaps you can just call GLPK on that?  It would be better than nothing, plus you can say that the feature is standard, and also write everywhere that users can download a &amp;#8220;real solver&amp;#8221; if they want to. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; Secondly, while Sage currently is happy to write DIMACS files (the standard format for SAT problems) it does not &lt;a href=&quot;http://trac.sagemath.org/ticket/16924&quot;&gt;read DIMACS files&lt;/a&gt;. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-2&quot;&gt;FGB&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-2&quot;&gt;
&lt;p&gt; For a while now I&amp;#8217;ve had adding an interface to &lt;a href=&quot;http://www-polsys.lip6.fr/~jcf/Software/FGb/&quot;&gt;FGB&lt;/a&gt; on my TODO list. FGB is &lt;a href=&quot;http://www-polsys.lip6.fr/~jcf/&quot;&gt;Jean-Charles Faugère’s&lt;/a&gt; implementation of the F4 Gröbner basis algorithm. It is not open source, but it is a good implementation of F4, something which isn&amp;#8217;t exactly widely available in the open-source world. Besides, being able to easily compare with FGB surely would be useful. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-3&quot;&gt;SCIP&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-3&quot;&gt;
&lt;p&gt; When I worked on solving multivariate systems of equations with noise I added support for the SCIP constraint integer programming solver to Sage. Constrained integer programming allows to solve non-linear systems of equations and inequalities. For example, it allows to model and solve systems which contain constrains like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x+%5Ccdot+y+%2B+4x+%2B+1+%5Cgeq+0&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;x \cdot y + 4x + 1 \geq 0&quot; title=&quot;x \cdot y + 4x + 1 \geq 0&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=z+%3D+x%5C+%5Cmbox%7BOR%7D%5C+y&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;z = x\ \mbox{OR}\ y&quot; title=&quot;z = x\ \mbox{OR}\ y&quot; class=&quot;latex&quot; /&gt; which comes in handy from time to time. SCIP is open source in the sense that you can read the source code, but its license does not live up the standards of the &lt;a href=&quot;http://opensource.org/&quot;&gt;Open Source Initiative&lt;/a&gt; and we can’t ship it. Still, it is typically faster than real open-source solutions and the developers are &lt;a href=&quot;https://martinralbrecht.wordpress.com/2011/03/07/constraint-integer-programming-in-sage/#comments&quot;&gt;happy to help&lt;/a&gt;. I&amp;#8217;ve not touched this code in a while because I don&amp;#8217;t work in this area at the moment, so someone who does should pick up the project. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;br /&gt;  &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gocomments/martinralbrecht.wordpress.com/1099/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/martinralbrecht.wordpress.com/1099/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://pixel.wp.com/b.gif?host=martinralbrecht.wordpress.com&amp;blog=14622449&amp;post=1099&amp;subd=martinralbrecht&amp;ref=&amp;feed=1&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-12-17T16:53:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Subgroup-Lattice-Color-Vertices/">
	<title>Liang Ze: Lattice of Subgroups II - Coloring Vertices</title>
	<link>http://sheaves.github.io/Subgroup-Lattice-Color-Vertices/</link>
	<content:encoded>&lt;p&gt;In my &lt;a href=&quot;http://sheaves.github.io/Subgroup-Lattice/&quot;&gt;previous post&lt;/a&gt;, I showed how to use Sage to generate the subgroup lattice of a group, and define labels for the subgroups. In this post, I’ll demonstrate how to color subgroups with different colors according to some desired property. If you’re not interested in code, scroll to the bottom of the post for a visual collection of groups and their subgroup lattices. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://sheaves.github.io/images/Dic3Lattice.png&quot; alt=&quot;Lattice of the dicyclic group $Dic_3$&quot; title=&quot;Lattice of the dicyclic group $Dic_3$&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, let’s rerun the code from the previous post. We’ll choose a group we like and generate its poset. For this post, I’ll label the subgroups by their cardinality. If you’re trying this code in &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud&lt;/a&gt; or your own version of  Sage that has the &lt;code&gt;database_gap&lt;/code&gt; package installed, I strongly recommend labelling the subgroups using &lt;code&gt;structure_description()&lt;/code&gt; instead).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;normal-subgroups&quot;&gt;Normal subgroups&lt;/h2&gt;
&lt;p&gt;Now suppose we wish to know which subgroups are &lt;a href=&quot;http://en.wikipedia.org/wiki/Normal_subgroup&quot;&gt;normal&lt;/a&gt;. We can do so with the following:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Coloring takes place after labelling, so when we’re defining the color dictionary, we have to use the (re)labelled vertices rather than the original vertices. Hence the use of &lt;code&gt;label[x]&lt;/code&gt; instead of just &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are some more examples. They’re all just variations of the above.&lt;/p&gt;

&lt;h2 id=&quot;abelian-subgroups-and-the-center&quot;&gt;Abelian subgroups and the center&lt;/h2&gt;
&lt;p&gt;Let’s say we want to highlight the &lt;a href=&quot;http://en.wikipedia.org/wiki/Abelian_group&quot;&gt;abelian&lt;/a&gt; subgroups, with special emphasis on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Center_%28group_theory%29&quot;&gt;center&lt;/a&gt; of the group. We can do this with a slight modification to the color dictionary:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;maximal-subgroups-and-the-frattini-subgroup&quot;&gt;Maximal subgroups and the Frattini subgroup&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Frattini_subgroup&quot;&gt;Frattini subgroup&lt;/a&gt; is the intersection of all the &lt;a href=&quot;http://en.wikipedia.org/wiki/Maximal_subgroup&quot;&gt;maximal subgroups&lt;/a&gt; of $G$. We can see this by highlighting the Frattini and maximal subgroups.&lt;/p&gt;

&lt;p&gt;Sage has a built-in function for getting the Frattini subgroup. To get the maximal subgroups, however, we’ll have to find the elements &lt;a href=&quot;http://en.wikipedia.org/wiki/Covering_relation&quot;&gt;covered&lt;/a&gt; by the &lt;a href=&quot;http://en.wikipedia.org/wiki/Greatest_element&quot;&gt;greatest element (or top)&lt;/a&gt; of the poset $P$.&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;sylow-subgroups&quot;&gt;Sylow subgroups&lt;/h2&gt;
&lt;p&gt;Getting the &lt;a href=&quot;http://mathworld.wolfram.com/Sylowp-Subgroup.html&quot;&gt;Sylow $p$-subgroups&lt;/a&gt; takes a little more work, since Sage doesn’t have a single function that generates all the Sylow subgroups at once.&lt;/p&gt;

&lt;p&gt;In Sage, &lt;code&gt;G.sylow_subgroup(p)&lt;/code&gt; returns &lt;em&gt;one&lt;/em&gt; Sylow $p$-subgroups. To get &lt;em&gt;all&lt;/em&gt; the Sylow $p$-subgroups, we could take all conjugates of this Sylow subgroup (since &lt;a href=&quot;http://en.wikipedia.org/wiki/Sylow_theorems#Theorems&quot;&gt;all Sylow $p$-subgroups are conjugate&lt;/a&gt;). A faster way, however, is to use the fact that the cardinality of all Sylow $p$-subgroups is the maximal $p^{th}$ power dividing the order of $G$.&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h1 id=&quot;more-examples&quot;&gt;More examples&lt;/h1&gt;
&lt;div class=&quot;auto&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;In the next post, we’ll look at labelling edges. This is particularly useful if we want to determine if $G$ has  &lt;a href=&quot;http://en.wikipedia.org/wiki/Subgroup_series&quot;&gt;subgroup series&lt;/a&gt; with certain properties.&lt;/p&gt;</content:encoded>
	<dc:date>2014-12-17T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Subgroup-Lattice/">
	<title>Liang Ze: Lattice of Subgroups</title>
	<link>http://sheaves.github.io/Subgroup-Lattice/</link>
	<content:encoded>&lt;p&gt;This is the first in a series of posts on visualizing groups via their lattice of subgroups.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://sheaves.github.io/images/D4LatticeWhite.png&quot; alt=&quot;Lattice of the dihedral group $D_4$&quot; title=&quot;Lattice of the dihedral group $D_4$.&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;displaying-the-lattice-of-subgroups&quot;&gt;Displaying the Lattice of Subgroups&lt;/h1&gt;

&lt;p&gt;One way of getting a better understanding of a group is by considering its subgroups. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Lattice_of_subgroups&quot;&gt;lattice of subgroups&lt;/a&gt; (more precisely, the &lt;a href=&quot;http://en.wikipedia.org/wiki/Hasse_diagram&quot;&gt;Hasse diagram&lt;/a&gt; of this lattice) gives us a way to visualize how these subgroups relate to each other and to their parent group. Here’s how to do it in Sage:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;By default, the vertex labels of the Hasse diagram will be the description of the object that the vertex represents. In our case, something like &lt;code&gt;Subgroup of (Dihedral group of order 8 as a permutation group) generated by [(1,2)(3,4)]&lt;/code&gt;, which would be way too long to display nicely. Because of this, in the above code, I’ve decided not to label the vertices. I’ve also chosen to make the vertices hexagonal and white.&lt;/p&gt;

&lt;h1 id=&quot;relabelling-vertices&quot;&gt;Relabelling vertices&lt;/h1&gt;
&lt;p&gt;Without labels, it can be hard to tell what subgroups we’re looking at. We can define new labels for these vertices by defining a &lt;a href=&quot;https://docs.python.org/2/tutorial/datastructures.html#dictionaries&quot;&gt;dictionary&lt;/a&gt; where the keys are the original vertices and their corresponding values are our new labels.&lt;/p&gt;

&lt;h2 id=&quot;labelling-by-generators&quot;&gt;Labelling by generators&lt;/h2&gt;
&lt;p&gt;One way to tell what the subgroups are is to look at their generators:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;This isn’t very pretty, and just knowing the generators doesn’t give us much intuition about the group.&lt;/p&gt;

&lt;h2 id=&quot;labelling-by-cardinalities&quot;&gt;Labelling by cardinalities&lt;/h2&gt;
&lt;p&gt;Alternatively, we could label the subgroups by their cardinalities:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;If you ran the preceding code, you probably encountered an error message. This is because Sage currently requires that vertex labels be injective i.e. distinct vertices must have distinct labels. There’s a quick but slightly ugly fix for this: just pad spaces around the labels to make them all unique:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;labelling-by-structure-description&quot;&gt;Labelling by structure description&lt;/h2&gt;
&lt;p&gt;However, cardinalities still don’t tell me very much about the subgroup. Fortunately, Sage has a method for describing the structure of a small group: &lt;code&gt;H.structure_description()&lt;/code&gt; where &lt;code&gt;H&lt;/code&gt; is the group in question.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Un&lt;/em&gt;fortunately, this method requires the &lt;a href=&quot;http://www.gap-system.org/&quot;&gt;GAP&lt;/a&gt; group database, which is not installed with the Sagecell version of Sage. However, the free &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud&lt;/a&gt; service’s installation of Sage &lt;em&gt;does&lt;/em&gt; have the group database installed, so you can try the following code there. This code was used to produce the image at the start of this post:&lt;/p&gt;

&lt;div class=&quot;no_eval&quot;&gt;
  
&lt;/div&gt;

&lt;h1 id=&quot;more-examples&quot;&gt;More examples&lt;/h1&gt;
&lt;p&gt;Try playing around with different groups and different labelling methods!&lt;/p&gt;

&lt;div class=&quot;auto&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;And here are some questions that might arise while playing around with subgroup lattices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In the code, I’ve technically only defined the &lt;a href=&quot;http://en.wikipedia.org/wiki/Partially_ordered_set&quot;&gt;poset&lt;/a&gt; of subgroups. However, it turns out the poset of subgroups is also always a  &lt;a href=&quot;http://en.wikipedia.org/wiki/Lattice_%28order%29&quot;&gt;lattice&lt;/a&gt;. Why?&lt;/li&gt;
  &lt;li&gt;When is the subgroup lattice also &lt;a href=&quot;http://en.wikipedia.org/wiki/Distributive_lattice&quot;&gt;distributive&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;When is the subgroup lattice a &lt;a href=&quot;http://en.wikipedia.org/wiki/Total_order&quot;&gt;chain&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next post, we’ll add some color to the subgroup of lattices by coloring the subgroups according to properties they have.&lt;/p&gt;</content:encoded>
	<dc:date>2014-12-15T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2014/12/14/a-busy-term/">
	<title>Vince Knight: A busy term</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2014/12/14/a-busy-term/</link>
	<content:encoded>&lt;p&gt;Here’s my final reflective post for &lt;a href=&quot;http://vincent-knight.com/research/students/current/2014/09/30/Imogen-Dunne/&quot;&gt;Imogen Dunne’s&lt;/a&gt; final year project (you can find the first &lt;a href=&quot;http://vincent-knight.com/unpeudemath/pedagogy/2014/10/13/reflecting-on-a-first-week-of-learning/&quot;&gt;here&lt;/a&gt;, the second &lt;a href=&quot;http://vincent-knight.com/unpeudemath/pedagogy/2014/10/25/busy-office-hours&quot;&gt;here&lt;/a&gt; and the third &lt;a href=&quot;http://vincent-knight.com/unpeudemath/pedagogy/2014/11/14/scaffolding_tutors_and_how_to_better_prepare_for_different_pedagogies/&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The main feeling I have as I reflect on this past term is how tired I am.&lt;/p&gt;

&lt;p&gt;This term/semester/thing has been so amazingly busy.
Before I go any further I need to thank my PhD student &lt;a href=&quot;http://jasyoung314.github.io/&quot;&gt;Jason Young&lt;/a&gt;.
Jason has just started his PhD and has been acting as a full teaching assistant for me with this course.
I have no idea how this course ran without having someone to help me last year and this leads me to my first point of reflection: &lt;strong&gt;students have engaged very well with the course&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I believe (hope is perhaps a less biased word) that the main reason this has been busy is because this has been an active learning experience for my students.
This could be due to the flipped learning environment (I would like to think so) but also perhaps just having a really greatly engaged set of students.&lt;/p&gt;

&lt;p&gt;Here is a list of things that I plan on changing for next year:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Another set of videos - I’m going to double the amount of videos I have.
I think this is a natural thing to do as I’m more aware of the difficulties students have.
This is all part of the reflective pedagogy that revolves around the concept of being able to react in a timely manner to feedback as to student difficulties (if I’m not doing this than I am no better than a book).
The reflective approach ensures a dynamic reaction to difficulties which can happen on various scales:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Class meetings: based on difficulties during the week (micro level)&lt;/li&gt;
      &lt;li&gt;From year to year: based on major trends during the year (macro level)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;More scaffolding on technical issues - I always underestimate the starting point of some students.
I need to do a better job helping them with simple things like using a mouse, using internet browsers and also more tricky things like debugging LaTeX.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As discussed before: a much better scaffolding of student tutors (the undergrads).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the whole though I am very pleased with how this year has gone.
In particular I feel that a number of students have not only learnt to code but also understood the importance of learning to code in conjunction with learning mathematics.
Here is a quote that I’m taking from one of the 3 page papers that students have had to hand in at the end of term (this particular one looking at the &lt;a href=&quot;http://theinfosphere.org/Futurama_theorem&quot;&gt;futurama theorem&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“It has to be said, when I first looked at Keeler’s proof, the whole thing did seem incredibly complicated. But after coding it and using it in ‘real life’, it is pretty straight forward.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is really nice to read as it’s something I say a lot: coding complicated mathematics will often help understand it.&lt;/p&gt;

&lt;p&gt;It reminds me a bit about this nice lightning talk that one of the students gave last year:&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
         &lt;p&gt;&lt;a href=&quot;http://vimeo.com/88630585&quot;&gt;Matt Lunn - Lightning Talk - Django Weekend Cardiff&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/aotv&quot;&gt;AOTV&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
    
&lt;/div&gt;</content:encoded>
	<dc:date>2014-12-14T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://quantumtetrahedron.wordpress.com/?p=2148">
	<title>David Horgan (quantumtetrahedron): sage22fig4</title>
	<link>http://quantumtetrahedron.wordpress.com/2014/12/11/numerical-work-with-sagemath-22-the-hypergeometric-function/</link>
	<content:encoded>&lt;p&gt;In order to follow up some work on the the last two posts I have been looking at  the capabilities of &lt;a class=&quot;zem_slink&quot; title=&quot;Sage (mathematics software)&quot; href=&quot;http://www.sagemath.org/&quot; target=&quot;_blank&quot; rel=&quot;homepage&quot; rel=&quot;nofollow&quot;&gt;Sagemath&lt;/a&gt; with regard to calculating &lt;a class=&quot;zem_slink&quot; title=&quot;Hypergeometric function&quot; href=&quot;http://en.wikipedia.org/wiki/Hypergeometric_function&quot; target=&quot;_blank&quot; rel=&quot;wikipedia&quot;&gt;hypergeometric functions&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://quantumtetrahedron.wordpress.com/2014/12/04/exact-and-asymptotic-computations-of-elementary-spin-networks/&quot;&gt;Exact and asymptotic computations of elementary spin networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://quantumtetrahedron.wordpress.com/2014/11/17/the-tetrahedron-and-its-regge-conjugate/&quot;&gt;The tetrahedron and its Regge conjugate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately sagemath can implement at number of great codes for hypergeometric functions including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://maxima.sourceforge.net/&quot;&gt;maxima&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/mpmath/&quot;&gt;mpmath&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These give excellent results:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/sage22fig1.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2150&quot; src=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/sage22fig1.gif?w=474&amp;h=299&quot; alt=&quot;sage22fig1&quot; width=&quot;474&quot; height=&quot;299&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/sage22fig2.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2151&quot; src=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/sage22fig2.gif?w=474&amp;h=255&quot; alt=&quot;sage22fig2&quot; width=&quot;474&quot; height=&quot;255&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/sage22fig3.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2152&quot; src=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/sage22fig3.gif?w=474&amp;h=224&quot; alt=&quot;sage22fig3&quot; width=&quot;474&quot; height=&quot;224&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/sage22fig4.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2153&quot; src=&quot;https://quantumtetrahedron.files.wordpress.com/2014/12/sage22fig4.gif?w=474&amp;h=322&quot; alt=&quot;sage22fig4&quot; width=&quot;474&quot; height=&quot;322&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The ability to use mpmath code is very useful since it enables me to calculate a wide range of hypergeometric functions as can be seen on the reference pages. I&amp;#8217;ll be using this over the coming posts starting with :&lt;/p&gt;
&lt;p&gt;Exact Computation and Asymptotic Approximations of 6j Symbols:&lt;br /&gt;
Illustration of Their Semiclassical Limits which is in preparation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related articles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;ul class=&quot;zemanta-article-ul zemanta-article-ul-image&quot;&gt;
&lt;li class=&quot;zemanta-article-ul-li-image zemanta-article-ul-li&quot;&gt;&lt;a href=&quot;http://quantumtetrahedron.wordpress.com/2014/12/04/exact-and-asymptotic-computations-of-elementary-spin-networks/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://i.zemanta.com/314314737_80_80.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://quantumtetrahedron.wordpress.com/2014/12/04/exact-and-asymptotic-computations-of-elementary-spin-networks/&quot; target=&quot;_blank&quot;&gt;Exact and asymptotic computations of elementary spin networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;br /&gt;  &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gocomments/quantumtetrahedron.wordpress.com/2148/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/quantumtetrahedron.wordpress.com/2148/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://pixel.wp.com/b.gif?host=quantumtetrahedron.wordpress.com&amp;blog=54584330&amp;post=2148&amp;subd=quantumtetrahedron&amp;ref=&amp;feed=1&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-12-11T20:49:08+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/code/2014/12/10/sneak-preview-of-game-theory-in-sage-3-of-3/">
	<title>Vince Knight: A Sneak Preview of Game Theory in Sage (3/3): Normal Form Games</title>
	<link>http://drvinceknight.github.io/unpeudemath/code/2014/12/10/sneak-preview-of-game-theory-in-sage-3-of-3/</link>
	<content:encoded>&lt;p&gt;In two previous posts I have discussed two game theoretical concepts that are in/on their way in to &lt;a href=&quot;http://sagemath.org/&quot;&gt;Sage&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://vincent-knight.com/unpeudemath/code/2014/08/01/a-sneak-preview-of-game-theory-in-sage-1-of-3/&quot;&gt;Cooperative Games/Shapley value&lt;/a&gt;: this is already in Sage.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vincent-knight.com/unpeudemath/code/2014/08/27/sneak-preview-of-game-theory-in-sage-2-of-3/&quot;&gt;Matching Games&lt;/a&gt;: this has been merged in to the develop branch of Sage (so you can already play with it if you wanted to) so will be in the next release.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since writing those and alluding to more development that myself and an undergraduate here at Cardiff are working on, I’ve had a fair few people asking about when Normal Form Games will be included…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The purpose of this post is to say: extremely soon!&lt;/strong&gt; A &lt;code&gt;NormalFormGame&lt;/code&gt; class has now also been merged in to the develop branch of Sage (so it will be in the next release).&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-normal-form-game&quot;&gt;What is a normal form game?&lt;/h2&gt;

&lt;p&gt;These are sometimes referred to as bi-matrix games or strategic form games.
I wrote a blog post about these in reference to choosing a side of the pavement to walk on: &lt;a href=&quot;http://vincent-knight.com/unpeudemath/mathematics/2014/07/27/game-theory-and-pavement-etiquette/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this post I’ll take a look at what the new Sage class allows you to do.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consider the game I used to model two individuals walking on either the left or the right of the pavement:&lt;/p&gt;

&lt;p&gt;\[
A = \begin{pmatrix}
1&amp;amp;-1\\ &lt;br /&gt;
-1&amp;amp;1
\end{pmatrix}
\]
\[
B = \begin{pmatrix}
1&amp;amp;-1\\ &lt;br /&gt;
-1&amp;amp;1
\end{pmatrix}
\]&lt;/p&gt;

&lt;p&gt;Matrix \(A\) gives the utility to the first person (assuming they control the rows) and the matrix \(B\) gives the utility to the second person (assuming they control the columns).
So if both individuals walk on their left then they both get a utility of 1 (ie they don’t bump in to each other).&lt;/p&gt;

&lt;h2 id=&quot;defining-a-game&quot;&gt;Defining a game&lt;/h2&gt;

&lt;p&gt;We can define these two matrices in Sage and will be able to define a &lt;code&gt;NormalFormGame&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalFormGame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see the &lt;code&gt;NormalFormGame&lt;/code&gt; class uses a list of two matrices to construct a game.
If you look at the documentation you’ll see that there are other ways to construct games.
To see that this has indeed worked we can just see the output of the game:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Normal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;following&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This displays a dictionary of the strategy:utility pairs.
The form of the output is actually based on &lt;a href=&quot;http://www.gambit-project.org/&quot;&gt;gambit&lt;/a&gt; syntax.&lt;/p&gt;

&lt;p&gt;We can use this class to very easily obtain equilibria of games:&lt;/p&gt;

&lt;h2 id=&quot;finding-nash-equilibria&quot;&gt;Finding Nash equilibria&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtain_nash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output shows that there are three Nash equilibria for this game:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Both players walking on their right;&lt;/li&gt;
  &lt;li&gt;Both players walking on their left;&lt;/li&gt;
  &lt;li&gt;Both players alternating from left to right with 50% probability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are currently 2 algorithms implemented in Sage to calculate equilibria:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A support enumeration algorithm (this is not terribly efficient but is written in pure Sage so will work even if optional packages are not installed and for typical game sizes will work just fine).&lt;/li&gt;
  &lt;li&gt;A reverse search algorthim which calls the optional ‘lrs’ library.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My student and I are currently actively developing further integration with gambit which will allow for a linear complementarity algorithm and also solution algorithms for games with more than 2 players.&lt;/p&gt;

&lt;h2 id=&quot;here-is-one-other-example&quot;&gt;Here is one other example:&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalFormGame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtain_nash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lrs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see above, I’ve created a game by just passing a single matrix: this automatically creates a zero sum game.
I’ve also told Sage to make sure it uses the &lt;code&gt;'lrs'&lt;/code&gt; algorithm (although &lt;code&gt;'enumeration'&lt;/code&gt; would handle this 5 by 5 game just fine).&lt;/p&gt;

&lt;p&gt;Finally if you’re not actually sure what that game is take a look at this little video:&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
    
    
&lt;/div&gt;

&lt;p&gt;I’m very excited to see this in Sage (soon!) and am actively working on various other things that I know at least I will find useful in my research and teaching but hopefully others will also.&lt;/p&gt;</content:encoded>
	<dc:date>2014-12-10T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/code/2014/11/22/on-divisibility-by-11/">
	<title>Vince Knight: Thinking about divisibility by 11</title>
	<link>http://drvinceknight.github.io/unpeudemath/code/2014/11/22/on-divisibility-by-11/</link>
	<content:encoded>&lt;p&gt;This post is based on a class meeting I had recently with my programming class.
It was based on trying to use code to help identify a condition that a number must obey for it to be divisible by 11.
Readers of this blog might be aware that the following is incorrect but stick with me.&lt;/p&gt;

&lt;h3 id=&quot;exploring-a-statement&quot;&gt;Exploring a statement&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;A number is divisible by 11 if and only if the alternating (in sign) sum of the number’s digits is 0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To help with notation let us define \(f:x\to\text{alternating sum of digits of x}\) so for example we have:&lt;/p&gt;



&lt;p&gt;and&lt;/p&gt;



&lt;p&gt;It is immediate to note that for \(N&amp;lt; 100\) \(f(N)=0\) if and only if 11 divides \(N\) (\(11\;|\;N\) for short).
Before trying to prove our statement we could check it for a few more numbers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\(f(110)=0\)&lt;/li&gt;
  &lt;li&gt;\(f(121)=0\)&lt;/li&gt;
  &lt;li&gt;\(f(132)=0\)&lt;/li&gt;
  &lt;li&gt;\(f(143)=0\)&lt;/li&gt;
  &lt;li&gt;\(f(154)=0\)&lt;/li&gt;
  &lt;li&gt;\(f(165)=0\)&lt;/li&gt;
  &lt;li&gt;\(f(176)=0\)&lt;/li&gt;
  &lt;li&gt;\(f(187)=0\)&lt;/li&gt;
  &lt;li&gt;\(f(198)=0\)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So things are looking good!
We could now rush off and try to prove that our statement is correct… &lt;strong&gt;or&lt;/strong&gt; we could try more numbers.
The easiest way to ‘try enough’ is to write some simple code (the following is written in Python):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Experiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    A class for an experiment&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Initialisation method:&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    inputs: N - the number for which we will check the conjecture&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisible_by_11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_of_consecutive_digits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Returns True if 'A number is divisible by 11 iff the alternating sum digits is 0' holds for this particular number.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisible_by_11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_of_consecutive_digits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_of_consecutive_digits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a class for an &lt;code&gt;Experiment&lt;/code&gt; for a given number, which has a couple of attributes relevant to what we’re trying to do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Experiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;121&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisible_by_11&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_of_consecutive_digits&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is also a method that checks the if and only if condition of our statement:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisible_by_11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_of_consecutive_digits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_of_consecutive_digits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So if the number is divisible by 11 then the statement is true if the sum is 0.
If the number is however not divisible by 11 then the statement is true if the sum is &lt;strong&gt;not&lt;/strong&gt; 0.&lt;/p&gt;

&lt;p&gt;We can thus check for any given number if our statement is true:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Experiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;121&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_satement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 121 is divisible by 11 and 1-2+1==0&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Experiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;122&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 122 is not divisible by 11 and 1-2+2!=0&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So before attempting to prove anything algebraically let’s just check that it holds for the first 10000 numbers:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Experiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Disaster!&lt;/strong&gt; It looks like our statement is not quite right!&lt;/p&gt;

&lt;p&gt;The following might help us identify where (outputting a list of numbers for which the statement is false):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Experiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;209&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;308&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;319&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;407&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;418&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;429&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;506&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;517&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;528&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;539&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;605&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;616&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;627&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;638&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;649&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;704&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;715&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;726&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;737&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;748&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;759&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;803&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;814&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;825&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;836&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;847&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;858&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;869&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;902&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;913&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;924&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;935&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;946&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;957&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;968&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;979&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1309&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1408&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1419&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1507&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1518&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1529&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1606&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1617&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1628&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1639&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1705&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1716&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1727&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1738&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1749&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1804&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1815&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1826&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1837&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1848&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1859&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1903&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1914&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1925&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1936&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1947&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1958&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1969&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2090&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2409&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2508&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2519&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2607&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2618&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2629&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2706&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2717&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2728&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2739&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2805&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2816&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2827&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2838&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2849&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2904&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2915&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2926&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2937&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2948&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2959&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3091&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3190&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3509&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3608&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3619&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3707&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3718&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3729&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3806&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3817&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3828&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3839&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3905&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3916&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3927&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3938&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3949&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4070&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4081&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4092&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4191&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4290&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4609&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4708&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4719&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4807&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4818&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4829&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4906&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4917&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4928&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4939&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5060&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5071&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5082&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5093&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5170&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5181&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5280&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5291&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5390&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5709&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5808&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5819&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5907&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5918&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5929&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6050&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6061&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6072&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6083&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6094&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6171&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6182&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6193&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6270&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6281&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6292&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6380&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6391&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6490&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6809&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6908&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6919&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7040&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7051&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7062&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7073&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7084&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7095&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7183&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7194&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7260&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7271&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7282&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7293&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7370&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7381&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7392&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7491&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7590&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7909&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8030&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8041&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8052&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8063&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8074&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8085&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8140&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8151&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8162&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8173&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8184&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8195&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8261&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8272&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8283&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8294&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8371&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8382&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8393&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8470&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8481&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8492&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8580&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8591&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8690&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9031&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9042&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9053&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9064&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9075&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9086&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9097&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9152&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9163&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9174&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9185&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9196&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9240&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9251&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9262&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9273&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9284&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9295&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9350&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9361&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9372&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9383&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9394&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9460&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9471&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9482&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9493&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9570&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9581&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9592&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9680&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9691&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9790&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first of those numbers is \(209=11\times19\) so it is divisible by 11 but \(f(209)=2-0+9=11\) and if we calculate \(f\) for a few more of the numbers in the above list we again get \(11\).
At this point in time it seems like we need to adjust our statement.&lt;/p&gt;

&lt;h3 id=&quot;sufficient-evidence-for-a-conjecture&quot;&gt;Sufficient evidence for a conjecture&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;A number is divisible by 11 if and only if the alternating (in sign) sum of the number’s digits is divisible by 11.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A slight tweak of the &lt;code&gt;Experiment&lt;/code&gt; code above gives:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Experiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    A class for an experiment&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Initialisation method:&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    inputs: N - the number for which we will check the conjecture&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisible_by_11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_of_consecutive_digits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_conjecture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Returns True if 'A number is divisible by 11 iff the alternating sum digits is 0' holds for this particular number.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisible_by_11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_of_consecutive_digits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_of_consecutive_digits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let us check the first 100,000 numbers:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Experiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_conjecture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When we have a lot of evidence for a mathematical statement we can (generally) start calling it a conjecture.
At this point we probably can attempt to prove that the conjecture is true:&lt;/p&gt;

&lt;h3 id=&quot;proof&quot;&gt;Proof&lt;/h3&gt;

&lt;p&gt;Let \(n_i\) be the \(i\)th digit of the \(m\) digit number \(N\), so we have \(N=\sum_{i=1}^{m}n_i10^{i-1}\).
Using arithmetic modulo \(11\) we have:&lt;/p&gt;



&lt;p&gt;but:&lt;/p&gt;



&lt;p&gt;thus:&lt;/p&gt;



&lt;p&gt;The right hand side of that is of course just \(f(N)\) so \(11\;|\;N\) if and only iff \(11\;|\;f(N)\) (as required).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This is how a lot of mathematics gets done nowadays.
Statements get made, then refined then checked and then finally (hopefully) proved.
A nice book that describes a conjecture that stayed a conjecture for a long time (until ultimately being proved) is &lt;a href=&quot;http://www.amazon.co.uk/Proofs-Confirmations-Alternating-Sign-Conjecture-Spectrum/dp/0521666465&quot;&gt;Proofs and Confirmations: The Story of the Alternating-Sign Matrix Conjecture&lt;/a&gt; by Bressoud.&lt;/p&gt;</content:encoded>
	<dc:date>2014-11-22T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Argument-Principle/">
	<title>Liang Ze: The Argument Principle</title>
	<link>http://sheaves.github.io/Argument-Principle/</link>
	<content:encoded>&lt;p&gt;&lt;img src=&quot;http://sheaves.github.io/images/Argument.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This post illustrates the &lt;a href=&quot;http://en.wikipedia.org/wiki/Argument_principle&quot;&gt;Argument Principle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let $f$ be a polynomial, and $C$ be (an arc of) a circle of radius $R$ centered at the origin.&lt;/p&gt;

&lt;p&gt;The code below generates 2 plots. The first plot shows the domain of $f$. We plot the roots of $f$ together with $C$. Let $n_1$ be the number of roots contained within $C$.&lt;/p&gt;

&lt;p&gt;The second plot shows the range of $f$. We plot $f(C)$, along with a marker at the origin. Let $n_2$ be the number of times the curve &lt;a href=&quot;http://en.wikipedia.org/wiki/Winding_number&quot;&gt;winds&lt;/a&gt; around the origin. &lt;/p&gt;

&lt;p&gt;You can verify that $n_1 = n_2$. As you vary the radius $R$, observe how $C$ and $f(C)$ change, and how this affects $n_1$ and $n_2$.&lt;/p&gt;

&lt;div class=&quot;auto&quot;&gt;
  
&lt;/div&gt;</content:encoded>
	<dc:date>2014-11-19T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://martinralbrecht.wordpress.com/?p=1090">
	<title>Martin Albrecht: martinralbrecht</title>
	<link>http://martinralbrecht.wordpress.com/2014/11/16/sage-6-4/</link>
	<content:encoded>&lt;p&gt; &lt;a href=&quot;http://sagemath.org&quot;&gt;Sage 6.4&lt;/a&gt; is out. Here are some (to me) particularly exciting changes. &lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-1090&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/16479&quot;&gt;#16479: Vincent Delecroix: package for pip the Python installer&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt; Sage now ships with &lt;a href=&quot;https://pypi.python.org/pypi/pip&quot;&gt;pip&lt;/a&gt; which means you can use pip to install your favourite Python packages into the Sage environment, making it a lot easier to get access to the Python ecosystem. For example, say you want to use &lt;a href=&quot;https://bitbucket.org/malb/batzenca&quot;&gt;BatzenCA&lt;/a&gt; in Sage. You&amp;#8217;d call &lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sage -pip install batzenca
&lt;/pre&gt;
&lt;p&gt; and you are done. &lt;/p&gt;
&lt;p&gt; &lt;b&gt;Update:&lt;/b&gt; Sorry, I mispoke: pip is an optional package at the moment, not a standard package. You&amp;#8217;ll have to &lt;code&gt;sage -i pip&lt;/code&gt; it first. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;a href=&quot;http://trac.sagemath.org/15915&quot;&gt;#15915: Martin Albrecht: add discrete Gaussian samplers to Sage&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt; I contributed code to sample from discrete Gaussian distributions to Sage. Discrete Gaussian distributions over the Integers sample integers proportionally to exp(-(x-c)²/(2σ²)), where &lt;i&gt;c&lt;/i&gt; is the center and &lt;i&gt;σ&lt;/i&gt; the Gaussian width parameter (roughly, the standard deviation). Here&amp;#8217;s an example: &lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;sage: &lt;span&gt;from&lt;/span&gt; sage.stats.distributions.discrete_gaussian_integer &lt;span&gt;import&lt;/span&gt; DiscreteGaussianDistributionIntegerSampler &lt;span&gt;as&lt;/span&gt; DiscGauss
sage: &lt;span&gt;D&lt;/span&gt; = DiscGauss(3.0)
sage: D() &lt;span&gt;# &lt;/span&gt;&lt;span&gt;output random by definition&lt;/span&gt;
-3
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt; Discrete Gaussian distributions are commonly used in lattice-based cryptography. For example, our &lt;a href=&quot;https://bitbucket.org/malb/gghlite-flint&quot;&gt;GGHLite implementation&lt;/a&gt; makes use of the same code. That is, most of the code is written in C99 and also available as the stand-alone &lt;a href=&quot;https://bitbucket.org/malb/dgs&quot;&gt;dgs&lt;/a&gt; library under a 2-clause BSD library. &lt;/p&gt;
&lt;p&gt; I also implemented discrete Gaussians over arbitrary lattices. A discrete Gaussians over a lattice &lt;i&gt;Λ&lt;/i&gt; is a distribution where point &lt;i&gt;x&lt;/i&gt; occurs with probability: &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmbox%7Bexp%7D%28-%7Cx-c%7C_2%5E2%2F%282%5Csigma%5E2%29%29%2F%28%5Csum_%7Bx+%5Cin+%5CLambda%7D+%5Cmbox%7Bexp%7D%28-%7Cx%7C_2%5E2%2F%282%5Csigma%5E2%29%29%29&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;\mbox{exp}(-|x-c|_2^2/(2\sigma^2))/(\sum_{x \in \Lambda} \mbox{exp}(-|x|_2^2/(2\sigma^2)))&quot; title=&quot;\mbox{exp}(-|x-c|_2^2/(2\sigma^2))/(\sum_{x \in \Lambda} \mbox{exp}(-|x|_2^2/(2\sigma^2)))&quot; class=&quot;latex&quot; /&gt; &lt;/p&gt;
&lt;p&gt; However, this code not part of the dgs library but a pure Python module. A C99 implementation of the same algorithms as well as specialised algorithms for ideal lattices is part of the &lt;a href=&quot;https://bitbucket.org/malb/gghlite-flint&quot;&gt;GGHLite&lt;/a&gt; implementation as the &lt;code&gt;dgsl&lt;/code&gt; module, though. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;a href=&quot;http://trac.sagemath.org/16803&quot;&gt;#16803: Marc Masdeu: Reimplement matrix_integer_dense using FLINT&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt; Marc switched over matrices over &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb%7BZ%7D&amp;bg=eeebf2&amp;fg=3c3d47&amp;s=0&quot; alt=&quot;\mathbb{Z}&quot; title=&quot;\mathbb{Z}&quot; class=&quot;latex&quot; /&gt; to using FLINT as the native data type. Previously, we had our own data type (arrays of arrays of &lt;code&gt;mpz_t&lt;/code&gt;), custom code and lots of conversions to other data types (&lt;a href=&quot;http://www.linalg.org/&quot;&gt;LinBox&lt;/a&gt;, &lt;a href=&quot;https://cs.uwaterloo.ca/~astorjoh/iml.html&quot;&gt;IML&lt;/a&gt;, …) to realise some functionality such as characteristic polynomials. FLINT is a sane default data type as it is quite fast for many operations. Conversions to LinBox et al. are still in place so functionality should not be lost. However, some decisions about defaults might be outdated now so report any issues on &lt;a href=&quot;http://trac.sagemath.org&quot;&gt;trac&lt;/a&gt;. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;a href=&quot;http://trac.sagemath.org/16996&quot;&gt;#16996: Volker Braun: IPython notebook with Sage Extensions&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt; Thanks to Volker&amp;#8217;s efforts you can now use the iPython notebook for Sage. To me the iPython notebook feels a lot more modern than the Sage notebook, partly because it is actively being developed whereas not much work is currently done on the native Sage notebook (it has seen some work done on it in the current release, though). I also like that iPython notebooks are files in your current directly which means you can keep them project local (others disagree about this design decision). To start the iPython notebook run: &lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sage -notebook=ipython
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;br /&gt;  &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gocomments/martinralbrecht.wordpress.com/1090/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/martinralbrecht.wordpress.com/1090/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://pixel.wp.com/b.gif?host=martinralbrecht.wordpress.com&amp;blog=14622449&amp;post=1090&amp;subd=martinralbrecht&amp;ref=&amp;feed=1&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-11-16T20:46:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Partitions-and-Posets/">
	<title>Liang Ze: Partitions and Posets</title>
	<link>http://sheaves.github.io/Partitions-and-Posets/</link>
	<content:encoded>&lt;p&gt;In this post, we generate the Hasse diagram of a set partition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://sheaves.github.io/images/partitions.png&quot; alt=&quot;Partitions of a 4 element set&quot; title=&quot;Partitions of a 4 element set&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The following piece of code generates the image above.&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Read on for an explanation of the code.&lt;/p&gt;

&lt;h1 id=&quot;partitions&quot;&gt;Partitions&lt;/h1&gt;

&lt;p&gt;A &lt;a href=&quot;http://en.wikipedia.org/wiki/Partition_of_a_set&quot;&gt;&lt;strong&gt;partition of a set&lt;/strong&gt;&lt;/a&gt; $X$ is a collection $p$ of non-empty subsets of $X$ such that $X$ is the disjoint union of these sets.&lt;/p&gt;

&lt;p&gt;In SAGE, you can get the set of all partitions of the $N$ element set {$1,2,\dots,N$} using &lt;a href=&quot;http://www.sagemath.org/doc/reference/combinat/sage/combinat/set_partition.html&quot;&gt;&lt;strong&gt;&lt;code&gt;SetPartitions&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;refinements&quot;&gt;Refinements&lt;/h3&gt;
&lt;p&gt;Each item in the preceding list is a partition of $X$. The elements of each partition are called &lt;strong&gt;blocks&lt;/strong&gt;. At the top of the list, we see the &lt;em&gt;trivial partition&lt;/em&gt; consisting of just one block, $X$. At the other end, we see the &lt;em&gt;singleton partition&lt;/em&gt; consisting of $|X|$ blocks, where each block contains a single element of $X$. All other partitions of $X$ fall somewhere in-between these two partitions.&lt;/p&gt;

&lt;p&gt;We can make this notion of “in-betweenness” precise by defining a relation on the partitions of $X$. We say that $q$ is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Partition_of_a_set#Refinement_of_partitions&quot;&gt;refinement&lt;/a&gt; of $p$ if each block of $q$ is contained in some block of $p$. &lt;/p&gt;

&lt;p&gt;In Sage, you can see the refinements of a partition using the method &lt;code&gt;refinements()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;h1 id=&quot;posets&quot;&gt;Posets&lt;/h1&gt;
&lt;p&gt;For a fixed $X$, the set $\mathcal{P}$ of all partitions of $X$ has the structure of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Partially_ordered_set&quot;&gt;&lt;strong&gt;poset&lt;/strong&gt;&lt;/a&gt; given by $q \leq p$ if $q$ is a refinement of $p$. &lt;/p&gt;

&lt;p&gt;In Sage, we can construct a &lt;a href=&quot;http://www.sagemath.org/doc/reference/combinat/sage/combinat/posets/posets.html&quot;&gt;&lt;strong&gt;&lt;code&gt;Poset&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; by specifying an underlying set $P$ along with a function $f:P\times P \to$  {$\text{True},\text{False}$} where&lt;/p&gt;



&lt;p&gt;The resulting poset can be visualized via its &lt;a href=&quot;http://en.wikipedia.org/wiki/Hasse_diagram&quot;&gt;&lt;strong&gt;Hasse diagram&lt;/strong&gt;&lt;/a&gt;, which is a directed graph with paths from $q \to p$ if $q \leq p$. We can generate a Hasse diagram of a poset using the &lt;code&gt;show()&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;The final piece of code (at the top of the page) combines everything above to produce the Hasse diagram of a set. The function &lt;code&gt;Partition_Poset&lt;/code&gt; first generates the set of partitions of an $N$ element set, then converts it to a poset. The function &lt;code&gt;p_label&lt;/code&gt; relabels the partitions so that they look prettier. I’ve also tweaked some options in the &lt;code&gt;show()&lt;/code&gt; method to make things look nicer.&lt;/p&gt;</content:encoded>
	<dc:date>2014-11-15T00:00:00+00:00</dc:date>
</item>
<item rdf:about="tag:blogger.com,1999:blog-6365588202025292315.post-8239368345310276770">
	<title>William Stein: SageMathCloud Notifications are Now Better</title>
	<link>http://sagemath.blogspot.com/2014/11/sagemathcloud-notifications-are-now.html</link>
	<content:encoded>&lt;span&gt;I just made live a new notifications systems for&amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt;&lt;span&gt;, which I spent all week writing. &amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-WUoD0M9H66Q/VGaAvhl9LMI/AAAAAAABRRg/M4oyqykFK1w/s1600/Screen%2BShot%2B2014-11-14%2Bat%2B2.15.09%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-WUoD0M9H66Q/VGaAvhl9LMI/AAAAAAABRRg/M4oyqykFK1w/s1600/Screen%2BShot%2B2014-11-14%2Bat%2B2.15.09%2BPM.png&quot; height=&quot;248&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;These notifications are what you see when you click the bell in the upper right. &amp;nbsp; This new system replaces the one I made live two weeks ago. &amp;nbsp; &amp;nbsp; Whenever somebody actively *edits* (using the web interface) any file in any project you collaborate on, a notification will get created or updated. &amp;nbsp; &amp;nbsp;If a person *comments* on any file in any project you collaborate on (using the chat interface to the right), then not only does the notification get updated, there is also a little red counter on top of the bell and also in the title of the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt;&lt;span&gt;&amp;nbsp;tab. &amp;nbsp; In particular, people will now be&amp;nbsp;much more likely to see the chats you make on files.&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-MuNCyjAT7ec/VGaBGsXLWgI/AAAAAAABRRo/YTENwRbG7Fw/s1600/Screen%2BShot%2B2014-11-14%2Bat%2B2.23.58%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-MuNCyjAT7ec/VGaBGsXLWgI/AAAAAAABRRo/YTENwRbG7Fw/s1600/Screen%2BShot%2B2014-11-14%2Bat%2B2.23.58%2BPM.png&quot; height=&quot;231&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;NOTE: &lt;/b&gt;I have not yet enabled any sort of daily email notification summary, but that is planned.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Some technical details: &amp;nbsp;Why did this take all week? &amp;nbsp;It's because the technology that makes it work behind the scenes is something that was fairly difficult for me to figure out how to implement. &amp;nbsp;I implemented a way to create an object that can be used simultaneously by many clients and supports realtime synchronization.... but is stored by the distributed &lt;a href=&quot;http://www.datastax.com/&quot; target=&quot;_blank&quot;&gt;Cassandra &lt;/a&gt;database instead of a file in a project. &amp;nbsp; Any changes to that object get synchronized around very quickly. &amp;nbsp; It's similar to how synchronized text editing (with several people at once) works, but I rethought &lt;a href=&quot;https://neil.fraser.name/writing/sync/&quot; target=&quot;_blank&quot;&gt;differential synchronization&lt;/a&gt; carefully, and also figured out how to synchronize using an eventually consistent database. &amp;nbsp; &amp;nbsp;This will be useful for implementing a lot other things in &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt; that operate at a different level than &quot;one single project&quot;. &amp;nbsp;For example, I plan to add functions so you can access these same &quot;synchronized databases&quot; from Python processes -- then you'll be able to have sage worksheets (say) running on several different projects, but all saving their data to some common synchronized place (backed by the database). &amp;nbsp; Another application will be a listing of the last 100 (say) files you've opened, with easy ways to store extra info about them. &amp;nbsp; &amp;nbsp;It will also be easy to make account and project settings more realtime, so when you change something, it automatically takes effect and is also synchronized across other browser tabs you may have open. &amp;nbsp; If you're into modern Single Page App web development, this might remind you of Angular or React or Hoodie or Firebase -- what I did this week is probably kind of like some of the sync functionality of those frameworks, but I use Cassandra (instead of MongoDB, say) and differential synchronization. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I &lt;a href=&quot;https://gist.github.com/williamstein/badf771e50658010d56d&quot; target=&quot;_blank&quot;&gt;BSD-licensed the differential synchronization code &lt;/a&gt;&amp;nbsp;that&amp;nbsp;I wrote as part of the above.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-11-14T14:31:34+00:00</dc:date>
	<dc:creator>William Stein</dc:creator>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2014/11/14/scaffolding_tutors_and_how_to_better_prepare_for_different_pedagogies/">
	<title>Vince Knight: Scaffolding tutors and how to better prepare for different pedagogies</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2014/11/14/scaffolding_tutors_and_how_to_better_prepare_for_different_pedagogies/</link>
	<content:encoded>&lt;p&gt;Here’s my third reflective post for &lt;a href=&quot;http://vincent-knight.com/research/students/current/2014/09/30/Imogen-Dunne/&quot;&gt;Imogen Dunne’s&lt;/a&gt; final year project (you can find the first &lt;a href=&quot;http://vincent-knight.com/unpeudemath/pedagogy/2014/10/13/reflecting-on-a-first-week-of-learning/&quot;&gt;here&lt;/a&gt; and the second &lt;a href=&quot;http://vincent-knight.com/unpeudemath/pedagogy/2014/10/25/busy-office-hours&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The course is now on the final straight as students have finished the class test which is always a bit of a milestone as they now begin to really individualise their learning experience (working on individually chosen projects etc…). As we get to this point I’ve got 3 specific things I’ve been thinking about:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Class test performance&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;With over half of the scripts marked it seems like students have done quite well on what is a difficult piece of assessment.
 It seems that the performance is overall better than last year but it’s too early to try and guess as to why that is.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Scaffolding undergraduate tutors&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;I use second year students to tutor in the lab sessions.
 They are all students who did the course last year.
 I don’t think I’ve done the best job explaining the roles of the tutors and this is something I need to get right next year.
 I still am very excited about using undergraduate tutors as I think it’s a brilliant experience for them as it continues their learning.
 The other (super important reason) is that I think this peer level of instruction is undoubtedly of benefit to the students on the course (if this wasn’t a quick rough drop of thoughts I’d be able to find a large quantity of resources relevant to this).&lt;/p&gt;

    &lt;p&gt;The flipped approach used requires the tutoring to be very light touch, and more about giving feedback than giving ‘help’.
 I didn’t do the best job of explaining this as some undergraduate tutors felt it was their job to ‘get students code to work’.
 I’ll probably run a bit more of an ‘expansive’ training session with closer shadowing at the start.&lt;/p&gt;

    &lt;p&gt;All the tutors have done a brilliant job and I’m very pleased, I just have to think carefully about how to best ‘scaffold’ and support them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Communicating the different pedagogy&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Some students were questioning the timing of my office hours: they are after the class meeting (which is in turn after the lab sessions).
 Whilst most students are on board and understand I think that the fact that a couple of students didn’t understand this shows that I didn’t do the best job of communicating the ideas.&lt;/p&gt;

    &lt;p&gt;Involving the students in a discussion about the pedagogy they are experiencing is something I think is very important (especially when using something they might not have experienced before).
 As such I have tried and continue to try to talk about this throughout my interactions with students (from 1 to 1 meetings all the way to class meetings) but perhaps I could do more.
 Perhaps even just showing a picture like this would be helpful:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/class_support_structure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;That shows the reason why I have my class test at the end of a week, the idea being that most students will be happy with content through labs, some will be happy after the class meeting and a small amount will require specific time with me to help them through.
 This goes back to the premise of a flipped environment which aims to make best use of contact time: my class meetings are meant for us to further understanding and go towards the tip of Bloom’s taxonomy but also address specific difficulties.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On a whole I’m very happy with how this class is going, I feel that most students are engaging fully with the course and seem to be enjoying it.
I also feel that I’ve gotten certain things a bit better than last year this year which could be an explanation of the slightly better mark in the class test (I still have 70 scripts to mark this weekend so it’s probably too early to tell).&lt;/p&gt;

&lt;p&gt;One particularly nice piece of feedback is how students like the new class website (jekyll for the win!) and in particular have enjoyed the use of a comment system on all pages: it’s always nice to have that permanent record of discussions I’m having with the students which in turn could help other students.
Ideally the discussion would be peer to peer but that hasn’t happened much this year (mainly me answering queries) but it has happened once which I’m happy about (small steps, big wins) :)&lt;/p&gt;</content:encoded>
	<dc:date>2014-11-14T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sheaves.github.io/Hello-World/">
	<title>Liang Ze: Hullo</title>
	<link>http://sheaves.github.io/Hello-World/</link>
	<content:encoded>&lt;p&gt;This blog is powered by the &lt;a href=&quot;http://sagecell.sagemath.org/&quot;&gt;Sage Cell Server&lt;/a&gt;. You can type Sage/Python code into the cell below, and press &lt;code&gt;Shift+Enter&lt;/code&gt; to evaluate it (or click “Evaluate”).&lt;/p&gt;

&lt;div class=&quot;all&quot;&gt;
  
&lt;/div&gt;</content:encoded>
	<dc:date>2014-11-14T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2014/10/25/busy-office-hours/">
	<title>Vince Knight: Busy office hours</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2014/10/25/busy-office-hours/</link>
	<content:encoded>&lt;p&gt;Here’s my second reflective post for &lt;a href=&quot;http://vincent-knight.com/research/students/current/2014/09/30/Imogen-Dunne/&quot;&gt;Imogen Dunne’s&lt;/a&gt; final year project (you can find the first &lt;a href=&quot;http://vincent-knight.com/unpeudemath/pedagogy/2014/10/13/reflecting-on-a-first-week-of-learning/&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We are now at the end of Week 4 of the course and I’m glad to say that I think overall things are going well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;My office hours have gotten &lt;strong&gt;very&lt;/strong&gt; busy.
This is awesome.
Students are coming to see me, genuinely having struggled with concepts and this is often a result of myself or another tutor identifying specific issues in a lab session and saying something like:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;I’ll give you the tick for that but come and see me during office hours to talk about it as I think you’re a bit confused there.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I think students are understanding &lt;em&gt;now&lt;/em&gt; that the role of the ‘ticks’ is to help identify difficulties.
I need to do a better job next year at explaining this from the offset.
It might help to put it at the top of every lab sheet…
I’ll think about this…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Imogen’s focus group went really well with 15 students participating.
I still need to carefully reflect on the particular issues that were raised.
I feel again that some need to be addressed through a better communication on my part (for example students wanted to have a list of alternative resources, there is such a list on the class site and I thought I’d mentioned it sufficiently but I will need to do that better).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are a large number of tutors now and with that comes the tricky task of ensuring they understand their role.
Jason was mentioned in Imogen’s focus group as doing a great job as “he didn’t just give the answer but pushed students to identify their difficulties”.
I need to think very carefully about how to get this across to all the tutors (I think this has been addressed for the current year).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve been thinking about the resources and am thinking that I might create a second set of videos.
This would be a large quantity of work (3/4 weekends probably) but I think I could really help student further.
In a way it seems logical to do after having run the course twice. This would further ‘flip the class’…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On another good note not entirely irrelevant to the class: code club is going well!
The last session was a very busy one and students are actively participating which is great.
Some first years are starting to work on the Euler problems and other formed a bit of a revision group for the upcoming class test they have…
You can see the site (that has been really nicely stylised by the students): &lt;a href=&quot;http://cardiffmathematicscodeclub.github.io/&quot;&gt;http://cardiffmathematicscodeclub.github.io/&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2014-10-25T00:00:00+00:00</dc:date>
</item>
<item rdf:about="tag:blogger.com,1999:blog-6365588202025292315.post-3221518328989833144">
	<title>William Stein: A Non-technical Overview of the SageMathCloud Project</title>
	<link>http://sagemath.blogspot.com/2014/10/a-non-technical-overview-of.html</link>
	<content:encoded>&lt;a href=&quot;http://1.bp.blogspot.com/-zd2T2HBgpag/VEFoFOU5GaI/AAAAAAABQ4U/ODq-0-ua7y0/s1600/Screen%2BShot%2B2014-10-17%2Bat%2B12.03.25%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-zd2T2HBgpag/VEFoFOU5GaI/AAAAAAABQ4U/ODq-0-ua7y0/s1600/Screen%2BShot%2B2014-10-17%2Bat%2B12.03.25%2BPM.png&quot; height=&quot;194&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;What problems is the &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud project&lt;/a&gt; trying to solve?  What pain points does it address?  Who are the competitors and what is the state of the technology right now?     &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2 id=&quot;what-problems-youre-trying-to-solve-and-why-are-these-a-problem&quot;&gt;What problems you’re trying to solve and why are these a problem?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Computational Education&lt;/strong&gt;: How can I &lt;em&gt;teach a course&lt;/em&gt; that involves mathematical computation and programming?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Computational Research:&lt;/strong&gt; How can I carry out &lt;em&gt;collaborative computational research&lt;/em&gt; projects?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cloud computing:&lt;/strong&gt; How can I get easy user-friendly collaborative access to a &lt;em&gt;remote Linux server&lt;/em&gt;?&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;what-are-the-pain-points-of-the-status-quo-and-who-feels-the-pain&quot;&gt;What are the pain points of the status quo and who feels the pain?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Student/Teacher pain:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;Getting &lt;em&gt;students to install software&lt;/em&gt; needed for a course on their computers is a major pain; sometimes it is just impossible, due to no major math software (not even Sage) supporting all recent versions of Windows/Linux/OS X/iOS/Android.&lt;/li&gt;&lt;li&gt;Getting university &lt;em&gt;computer labs to install the software&lt;/em&gt; you need for a course is frustrating and expensive (time and money).&lt;/li&gt;&lt;li&gt;Even if computer labs worked, they are often being used by another course, stuffy, and students can't possibly do all their homework there, so computation gets short shrift. Lab keyboards, hardware, etc., all hard to get used to. Crappy monitors.&lt;/li&gt;&lt;li&gt;Painful confusing problems &lt;em&gt;copying files around&lt;/em&gt; between teachers and students.&lt;/li&gt;&lt;li&gt;Helping a student or collaborator with their specific problem is very hard &lt;em&gt;without physical access&lt;/em&gt; to their computer.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Researcher pain:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;Making &lt;em&gt;backups every few minutes&lt;/em&gt; of the complete state of everything when doing research often hard and distracting, but important for reproducibility.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Copying around documents&lt;/em&gt;, emailing or pushing/pulling them to revision control is frustrating and confusing.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Installing obscuring software&lt;/em&gt; is frustarting and distracting from the research they really want to do.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Everybody:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;It is frustrating not having &lt;em&gt;LIVE working access&lt;/em&gt; to your files wherever you are. (Dropbox/Github doesn't solve this, since files are static.)&lt;/li&gt;&lt;li&gt;It is difficult to &lt;em&gt;leave computations running remotely&lt;/em&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;why-is-your-technology-poised-to-succeed&quot;&gt;Why is your technology poised to succeed?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;When it works, &lt;strong&gt;SageMathCloud solves every pain point listed above.&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;The timing is right, due to &lt;em&gt;massive improvements in web browsers&lt;/em&gt; during the last 3 years.&lt;/li&gt;&lt;li&gt;I am on full &lt;em&gt;sabbatical&lt;/em&gt; this year, so at least success isn't totally impossible due to not working on the project.&lt;/li&gt;&lt;li&gt;I have been solving the above problems in less scalable ways for myself, colleagues and students &lt;em&gt;since the 1990s&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;em&gt;SageMathCloud has many users&lt;/em&gt; that provide valuable feedback.&lt;/li&gt;&lt;li&gt;We have already &lt;em&gt;solved difficult problems&lt;/em&gt; since I started this project in Summer 2012 (and launched first version in April 2013).&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;who-are-your-competitors&quot;&gt;Who are your competitors?&lt;/h2&gt;&lt;em&gt;There are no competitors&lt;/em&gt; with a similar range of functionality. However, there are many webapps that have some overlap in capabilities:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Mathematical overlap:&lt;/strong&gt; Online Mathematica: &quot;Bring Mathematica to life in the cloud&quot;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Python overlap:&lt;/strong&gt; Wakari: &quot;Web-based Python Data Analysis&quot;; also PythonAnywhere&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Latex overlap:&lt;/strong&gt; ShareLaTeX, WriteLaTeX&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Web-based IDE's/terminals:&lt;/strong&gt; target writing webapps (not research or math education): c9.io, nitrous.io, codio.com, terminal.com&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Homework:&lt;/strong&gt; WebAssign and WebWork&lt;/li&gt;&lt;/ul&gt;Right now, &lt;strong&gt;SageMathCloud gives away for free far more&lt;/strong&gt; than any other similar site, due to very substantial temporary financial support from Google, the NSF and others.&lt;br /&gt;&lt;h2 id=&quot;whats-the-total-addressable-market&quot;&gt;What’s the total addressable market?&lt;/h2&gt;Though our primary focus is the &lt;em&gt;college mathematics classroom&lt;/em&gt;, there is a larger market:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Students:&lt;/strong&gt; all undergrad/high school students in the world taking a course involving programming or mathematics&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Teachers:&lt;/strong&gt; all teachers of such courses&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Researchers:&lt;/strong&gt; anybody working in areas that involve programming or data analysis&lt;/li&gt;&lt;/ul&gt;Moreover, the web-based platform for computing that we're building lends itself to many other collaborative applications.&lt;br /&gt;&lt;h2 id=&quot;what-stage-is-your-technology-at&quot;&gt;What stage is your technology at?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;The site is up and running and has &lt;strong&gt;28,413 monthly active users&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;There are still many bugs&lt;/li&gt;&lt;li&gt;I have a &lt;em&gt;precise todo list&lt;/em&gt; that would take me at least &lt;em&gt;2 months&lt;/em&gt; fulltime to finish.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;is-your-solution-technically-feasible-at-this-point&quot;&gt;Is your solution technically feasible at this point?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Yes. It is only a matter of time until the software is very polished.&lt;/li&gt;&lt;li&gt;Morever, we have compute resources to support significantly more users.&lt;/li&gt;&lt;li&gt;But without money (from paying customers or investment), if growth continues at the current rate then we will have to clamp down on free quotas for users.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;what-technical-milestones-remain&quot;&gt;What technical milestones remain?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Infrastructure for creating automatically-graded homework problems.&lt;/li&gt;&lt;li&gt;Fill in lots of details and polish.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;do-you-have-external-credibility-with-technicalbusiness-experts-and-customers&quot;&gt;Do you have external credibility with technical/business experts and customers?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Business experts:&lt;/strong&gt; I don't even know any business experts.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Technical experts:&lt;/strong&gt; I founded the Sage math software, which is 10 years old and relatively well known by mathematicians.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Customers:&lt;/strong&gt; We have no customers; we haven't offered anything for sale.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;market-research&quot;&gt;Market research?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;I know about math software and its users as a result of founding the Sage open source math software project, NSF-funded projects I've been involved in, etc.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;is-the-intellectual-property-around-your-technology-protected&quot;&gt;Is the intellectual property around your technology protected?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;The IP is software.&lt;/li&gt;&lt;li&gt;The website software is mostly new Javascript code we wrote that is copyright Univ. of Washington and mostly not open source; it depends on various open source libraries and components.&lt;/li&gt;&lt;li&gt;The Sage math software is entirely open source.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;who-are-the-team-members-to-move-this-technology-forward&quot;&gt;Who are the team members to move this technology forward?&lt;/h2&gt;I am the only person working on this project fulltime right now.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Everything:&lt;/strong&gt; William Stein -- UW professor&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Browser client code:&lt;/strong&gt; Jon Lee, Andy Huchala, Nicholas Ruhland -- UW undergrads&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Web design, analytics:&lt;/strong&gt; Harald Schilly -- Austrian grad student&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Hardware:&lt;/strong&gt; Keith Clawson&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;why-are-you-the-ideal-team&quot;&gt;Why are you the ideal team?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;We are not the ideal team.&lt;/li&gt;&lt;li&gt;If I had money maybe I could build the ideal team, leveraging my experience and connections from the Sage project...&lt;/li&gt;&lt;/ul&gt;</content:encoded>
	<dc:date>2014-10-17T13:04:41+00:00</dc:date>
	<dc:creator>William Stein</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-6365588202025292315.post-5655260630534776590">
	<title>William Stein: Public Sharing in SageMathCloud, Finally</title>
	<link>http://sagemath.blogspot.com/2014/10/public-sharing-in-sagemathcloud-finally.html</link>
	<content:encoded>&lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud (SMC)&lt;/a&gt; is a free (&lt;a href=&quot;http://www.nsf.gov/&quot;&gt;NSF&lt;/a&gt;, &lt;a href=&quot;http://google.com/&quot;&gt;Google&lt;/a&gt; and &lt;a href=&quot;http://www.washington.edu/&quot;&gt;UW&lt;/a&gt; supported) website that lets you collaboratively work with Sage worksheets, IPython notebooks, LaTeX documents and much, much more. All work is snapshotted every few minutes, and copied out to several data centers, so if something goes wrong with a project running on one machine (right before your lecture begins or homework assignment is due), it will pop up on another machine. We designed the backend architecture from the ground up to be very horizontally scalable and have no single points of failure.&lt;br /&gt;&lt;br /&gt;This post is about an important new feature: &lt;em&gt;&lt;b&gt;You can now mark a folder or file so that all other users can view it, and very easily copy it to their own project.&lt;/b&gt;&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-oV_0xhD4af0/VEAnl6SRVQI/AAAAAAABQ2U/NkKVdh0NbNE/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.15.58%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-oV_0xhD4af0/VEAnl6SRVQI/AAAAAAABQ2U/NkKVdh0NbNE/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.15.58%2BPM.png&quot; height=&quot;308&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;This solves problems:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; You create a &quot;template&quot; project, e.g., with pre-installed software, worksheets, IPython notebooks, etc., and want other users to easily be able to clone it as a new project. &lt;strong&gt;Solution:&lt;/strong&gt; Mark the home directory of the project public, and share the link widely.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-FDT_Z1UD9H0/VEAn9tH3OhI/AAAAAAABQ2c/RQGklZMBiJA/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.17.35%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-FDT_Z1UD9H0/VEAn9tH3OhI/AAAAAAABQ2c/RQGklZMBiJA/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.17.35%2BPM.png&quot; height=&quot;201&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; You create a syllabus for a course, an assignment, a worksheet full of 3d images, etc., that you want to share with a group of students. &lt;strong&gt;Solution:&lt;/strong&gt; Make the syllabus or worksheet public, and share the link with your students via an email and on the course website. (Note: You can also use a course document to share files with all students privately.) &lt;a href=&quot;https://cloud.sagemath.com/projects/4a5f0542-5873-4eed-a85c-a18c706e8bcd/files/some%203d%20plots.sagews&quot; target=&quot;_blank&quot;&gt;For example...&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-dMZS2DgsnzY/VEAouDdZu6I/AAAAAAABQ2k/6iPT0OWIomk/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.20.38%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-dMZS2DgsnzY/VEAouDdZu6I/AAAAAAABQ2k/6iPT0OWIomk/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.20.38%2BPM.png&quot; height=&quot;320&quot; width=&quot;286&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-hQIq6QKlzLo/VEApB-yQV8I/AAAAAAABQ2s/o-jx4vjIlj0/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.22.15%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-hQIq6QKlzLo/VEApB-yQV8I/AAAAAAABQ2s/o-jx4vjIlj0/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.22.15%2BPM.png&quot; height=&quot;74&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; You run into a problem using &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC&lt;/a&gt; and want help. &lt;strong&gt;Solution:&lt;/strong&gt; Make the worksheet or code that isn't working public, and post &lt;a href=&quot;https://cloud.sagemath.com/projects/4a5f0542-5873-4eed-a85c-a18c706e8bcd/files/confused.sagews&quot; target=&quot;_blank&quot;&gt;a link&lt;/a&gt; in a forum asking for help.&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-CdngoQAPCi8/VEApPsnc_8I/AAAAAAABQ20/r6wHP-IMqQ8/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.23.13%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-CdngoQAPCi8/VEApPsnc_8I/AAAAAAABQ20/r6wHP-IMqQ8/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.23.13%2BPM.png&quot; height=&quot;216&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; You write a blog post explaining how to solve a problem and write related code in an &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC&lt;/a&gt; worksheet, which you want your readers to see. &lt;strong&gt;Solution:&lt;/strong&gt; Make that code public and post a link in your blog post.&lt;/li&gt;&lt;/ul&gt;Here's &lt;a href=&quot;http://youtu.be/B4GiyjIXL4Q&quot;&gt;a screencast&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Each &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC&lt;/a&gt; project has its own local &quot;project server&quot;, which takes some time to start up, and serves files, coordinates Sage, terminal, and IPython sessions, etc. Public sharing completely avoids having anything to do with the project server -- &lt;strong&gt;it works fine even if the project server is not running&lt;/strong&gt; -- it's always fast and there is no startup time if the project server isn't running. Moreover, public sharing reads the live files from your project, so you can update the files in a public shared directory, add new files, etc., and users will see these changes (when they refresh, since it's not automatic).&lt;br /&gt;As an example, here is the &lt;a href=&quot;https://cloud.sagemath.com/projects/4a5f0542-5873-4eed-a85c-a18c706e8bcd/files/cloud-examples/&quot;&gt;cloud-examples github repo as a share&lt;/a&gt;. If you click on it (and have a SageMathCloud account), you'll see this:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&lt;/pre&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-nFbB6EldXxw/VEAph5pthGI/AAAAAAABQ28/cEBiDtyHSf8/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.24.21%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-nFbB6EldXxw/VEAph5pthGI/AAAAAAABQ28/cEBiDtyHSf8/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.24.21%2BPM.png&quot; height=&quot;280&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;pre&gt;&lt;br /&gt;&lt;/pre&gt;&lt;h2 id=&quot;what-next&quot;&gt;What Next?&lt;/h2&gt;There is an enormous amount of natural additional functionality to build on top of public sharing.&lt;br /&gt;&lt;br /&gt;For example, not all document types can be previewed in read-only mode right now; in particular, IPython notebooks, task lists, LaTeX documents, images, and PDF files must be copied from the public share to another project before people can view them. It is better to release a first usable version of public sharing before systematically going through and implementing the additional features needed to support all of the above. You &lt;em&gt;can&lt;/em&gt; make complicated Sage worksheets with embedded images and 3d graphics, and those can be previewed before copying them to a project.&lt;br /&gt;Right now, the only way to visit a public share is to paste the URL into a browser tab and load it. Soon the projects page will be re-organized so you can search for publicly shared paths, see all public shares that you have previously visited, who shared them, how many +1's they've received, comments, etc.&lt;br /&gt;&lt;br /&gt;Also, I plan to eventually make it so public shares will be visible to people who have not logged in, and when viewing a publicly shared file or directory, there will be an option to start it running in a limited &lt;em&gt;project&lt;/em&gt;, which will vanish from existence after a period of inactivity (say).&lt;br /&gt;&lt;br /&gt;There are also dozens of details that are not yet implemented. For example, it would be nice to be able to directly download files (and directories!) to your computer from a public share. And it's also natural to share a folder or file with a specific list of people, rather than sharing it publicly. If somebody is viewing a public file and you change it, they should likely see the update automatically. Right now when viewing a share, you don't even know who shared it, and if you open a worksheet it can automatically execute Javascript, which is potentially unsafe. &amp;nbsp;Once public content is easily found, if somebody posts &quot;evil&quot; content publicly, there needs to be an easy way for users to report it.&lt;br /&gt;&lt;h2 id=&quot;sharing-will-permeate-everything&quot;&gt;Sharing will permeate everything&lt;/h2&gt;Sharing has been thought about a great deal during the last few years in the context of sites such as Github, Facebook, Google+ and Twitter. With &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC&lt;/a&gt;, we've developed a foundation for interactive collaborative computing in a browser, and will introduce sharing on top of that in a way that is motivated by your problems. For example, as with Github or Google+, when somebody makes a copy of your publicly shared folder, this copy should be listed (under &quot;copies&quot;) and it could start out public by default. There is much to do.&lt;br /&gt;&lt;br /&gt;One reason it took so long to release the first version of public sharing is that I kept imagining that sharing would happen at the level of complete projects, just like sharing in Github. However, when thinking through your problems, it makes way more sense in &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC&lt;/a&gt; to share individual directories and files. Technically, sharing at this level works works well for &lt;em&gt;read-only&lt;/em&gt; access, not for read-write access, since projects are mapped to Linux accounts. Another reason I have been very hesitant to support sharing is that I've had enormous trouble over the years with spammers posting content that gets me in trouble (with my University -- it is illegal for UW to host advertisements). However, by not letting search engines index content, the motivation for spammers to post nasty content is greatly reduced.&lt;br /&gt;&lt;br /&gt;Imagine publicly sharing recipes for automatically gradable homework problems, which use the full power of everything installed in &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC&lt;/a&gt;, get forked, improved, used, etc.</content:encoded>
	<dc:date>2014-10-16T14:29:42+00:00</dc:date>
	<dc:creator>William Stein</dc:creator>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/pedagogy/2014/10/13/reflecting-on-a-first-week-of-learning/">
	<title>Vince Knight: Reflecting on a first week of learning</title>
	<link>http://drvinceknight.github.io/unpeudemath/pedagogy/2014/10/13/reflecting-on-a-first-week-of-learning/</link>
	<content:encoded>&lt;p&gt;This academic year &lt;a href=&quot;http://vincent-knight.com/research/students/current/2014/09/30/Imogen-Dunne/&quot;&gt;Imogen Dunne&lt;/a&gt; (a final year student here at Cardiff University) is doing her final year project looking at evaluating student attitudes in my “Computing for Mathematics” course.&lt;/p&gt;

&lt;p&gt;The idea is to use questionnaires, focus groups and interviews to evaluate (longitudinally) mathematics students’ attitudes towards:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Learning to code;&lt;/li&gt;
  &lt;li&gt;Learning some early mathematics;&lt;/li&gt;
  &lt;li&gt;Learning in a flipped class environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This has started off well, and last week Imogen kicked off a meeting with me by giving me homework.
Something along the lines of:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’d like to see the attitudes of everyone involved from every point of view. Could you perhaps write a diary/log at certain points during the year, describing how you feel things are going?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was delighted with this idea and thought that I might as well blog these reflections, so here it goes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A good first week.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing I will say is I think this first week went really well.
Students turned up to their lab sessions having almost universally carried out all the required work which was awesome.
There was one major change with last year shifting some of the content from each week to the next.
This had the effect of making the first week a bit lighter which I think has been a good thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some labs could have been a bit ‘noisier’.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I want labs sessions to be noisy spaces with students talking to each other and figuring things out.
This happened in most of the lab sessions I got to see but there was one or two where it felt more like a high school class from when I was still in high school: &lt;em&gt;students looking at me as if I was a teacher evaluating whatever they were saying&lt;/em&gt;.
I’m using 2nd year students as tutors this year (which I’m super excited about: more about that later) and perhaps I need to do a better job explaining exactly what it is that I want the labs to be.
I think this has now been addressed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The best flipped class meeting I’ve ever had.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I strive for a student centred learning environment.
This isn’t always easy to obtain but the first class meeting went extremely well.
I came in to the meeting expecting us to talk about the &lt;code&gt;index&lt;/code&gt; method on strings (which finds the location of the first occurrence of a substring in a string) as this was the main piece of feedback I had from the labs as to the difficulties of the students.
We started talking about it that but then the students really took over and wanted to know how to calculate the location of &lt;em&gt;all the subtrings&lt;/em&gt;.
This was a really awesome session as we went in to a particular thing in much more detail than we would have otherwise.
Most importantly students would never have been able to have that conversation with me if they knew nothing about strings and the index function…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not leaving anyone behind.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When teaching in a classic lecture based setting it’s extremely difficult to gain an understanding of how your students are doing.
This flipped environment is &lt;strong&gt;all about&lt;/strong&gt; finding out how students are doing, I am constantly getting feedback as to what students are having difficulty with.
I have to make sure that students understand that that is what the labs are for, I’m constantly saying this but will continue to do so.&lt;/p&gt;

&lt;p&gt;Further more there are some students who are having difficulties with the content, this is completely expected but the great thing about teaching using this approach is that I’ve already been able to identify them and will be meeting with them during my office hours to help (I’m always happy to help students who want to work).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Big thanks to the tutors.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, this week of class would not have gone so smoothly if it weren’t for the great tutors who have helped in the labs.
These include some of my colleagues who have gratefully given up their time, &lt;a href=&quot;https://plus.google.com/+JasonYoung/posts&quot;&gt;Jason Young&lt;/a&gt; who has done an awesome job organising the undergraduate tutors and most importantly the undergraduate tutors themselves.
They all did a great job and I hope will also continue to learn and enjoy writing code.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This has been written down in a slight rush before my next set of labs but hopefully will be useful to Imogen (and indeed perhaps my students).&lt;/p&gt;</content:encoded>
	<dc:date>2014-10-13T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/code/2014/10/12/A-playlist-of-introduction-to-latex-videos-using-sagemathcloud/">
	<title>Vince Knight: A playlist of 21 videos introducing LaTeX using SageMathCloud</title>
	<link>http://drvinceknight.github.io/unpeudemath/code/2014/10/12/A-playlist-of-introduction-to-latex-videos-using-sagemathcloud/</link>
	<content:encoded>&lt;p&gt;About a year ago I put together 21 videos showing very basic LaTeX syntax.
I used &lt;a href=&quot;https://www.writelatex.com/&quot;&gt;writelatex&lt;/a&gt; as the platform for those videos.&lt;/p&gt;

&lt;p&gt;You can see that playlist of videos &lt;a href=&quot;http://www.youtube.com/playlist?list=PLnC5h3PY-znygZ2rYNaX7_8j2Duwh58cK&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This year I’m planning on using &lt;a href=&quot;http://vincent-knight.com/unpeudemath/cloud.sagemath.com&quot;&gt;SageMathCloud&lt;/a&gt; when I teach Sage to my first years so I thought it was probably worth showing the students LaTeX in the same environment.
&lt;strong&gt;So I’ve just finished redo’ing the same playlist of 21 videos but this time using SageMathCloud&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can find that playlist &lt;a href=&quot;http://www.youtube.com/playlist?list=PLnC5h3PY-znxc090kGv7W4FpbotlWsrm0&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/playlist?list=PLnC5h3PY-znxc090kGv7W4FpbotlWsrm0&quot;&gt;http://www.youtube.com/playlist?list=PLnC5h3PY-znxc090kGv7W4FpbotlWsrm0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve put all the tex files I created in the video in a github repository so they can be easily cloned in a SageMathCloud project using the https url:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;https://github.com/drvinceknight/IntroductionToLaTeXwithSageMathCloud.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/creating_latex_project.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2014-10-12T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/other/2014/10/04/podcasts-i-listen-to/">
	<title>Vince Knight: A list of podcasts I listen to</title>
	<link>http://drvinceknight.github.io/unpeudemath/other/2014/10/04/podcasts-i-listen-to/</link>
	<content:encoded>&lt;p&gt;I’ve recently gotten in to podcasts again (again) and really enjoy listening to most of these in the background of whatever it is I’m doing.&lt;/p&gt;

&lt;p&gt;The podcasts I listen to probably fall in to the following categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Technology&lt;/li&gt;
  &lt;li&gt;Science&lt;/li&gt;
  &lt;li&gt;Sport&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m sure I’m missing a bunch so I thought I’d write a blog post in the hope that kind readers would let me know what I should be listening to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technology&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://twit.tv/tnt&quot;&gt;Tech News Today&lt;/a&gt;: One of many twit shows I like. I usually listen to this first thing in the morning.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://twit.tv/twit&quot;&gt;This week in tech&lt;/a&gt;: I really like Leo Laporte and enjoy listening to this show as background noise to whatever it is that I’m doing.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://goo.gl/hte7a&quot;&gt;Linux action show&lt;/a&gt;: I sometime find these guys ‘defend’ linux on the desktop a bit too fervently but I never fail to learn something new.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://twit.tv/mbw&quot;&gt;MacBreak Weekly&lt;/a&gt;: This has the same kind of vibe as ‘this week in tech’.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://twit.tv/aaa&quot;&gt;All about android&lt;/a&gt;: Again, this one feels like hanging out with friends (the probably with real friends being that I can’t work at the same time but I’m working on that).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://twit.tv/sn&quot;&gt;Security Now&lt;/a&gt;: Another twit podcast, this one is about security and although I miss a lot about what is talked about I still enjoy it.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.patreon.com/rdvtech&quot;&gt;Le Rendez-Vous Tech&lt;/a&gt;: A French podcast very similar to this week in tech. Probably the only bit of exercise my French still gets.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.healthyhacker.com/&quot;&gt;Healthy Hacker&lt;/a&gt;: This is probably one of my favourite podcasts. Chris talks about code but also general fitness stuff.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vimcasts.org/&quot;&gt;vimcasts.org&lt;/a&gt;: Not really a podcast (low frequency) but it’s on my podcast catcher so I thought I’d list it here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Science&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://freakonomics.com/radio/&quot;&gt;Freakonomics Radio&lt;/a&gt;: A great podcast, extremely well produced and often covering really interesting subjects (this one I usually try not to listen to in the background like most of the above).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bbc.co.uk/programmes/b00snr0w&quot;&gt;The infinite monkey cage&lt;/a&gt;: Another really good job. Often very funny as well as informative.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.twis.org/&quot;&gt;This week in Science&lt;/a&gt;: this is always a nice listen to as they catch up on scientific stories that happened throughout the week.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rhysphillips.co.uk/pythagoras-trousers/&quot;&gt;Pythagoras Trousers&lt;/a&gt;: Cardiff University graduate Rhys Phillips does an excellent job with this podcast.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mathed.podomatic.com/&quot;&gt;Math Ed Podcast&lt;/a&gt;: A really nice show that in every episode I’ve listened to was a really interesting interview of a mathematical education expert.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.stuffyoushouldknow.com/&quot;&gt;Stuff you should know&lt;/a&gt;: Not too sure if I should put this in this category but it’s a cool show where they explain a bunch of topics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sport&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://search.espn.go.com/espn-first-take/&quot;&gt;First Take&lt;/a&gt;: I don’t get to follow much US sports but I do enjoy listening to Slip and Stephen A. yell at each other.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sports.espn.go.com/espnradio/podcast/archive?id=2406595&quot;&gt;Pardon the Interruption&lt;/a&gt;: Same as above really (although with less yelling).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bbc.co.uk/programmes/b0070hvs&quot;&gt;Fighting Talk&lt;/a&gt;: This is a fun BBC show where sports pundits get points for being funny talking about stuff that happened in the past week.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.nfl.com/podcasts?series=aroundtheleague-podcast&quot;&gt;Around the NFL&lt;/a&gt;: I like the NFL and when I have time to listen to this one I get to find out what’s happening.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.eggchasers.com/&quot;&gt;Egg chasers podcast&lt;/a&gt;: A really great weekly roundup of rugby.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bbc.co.uk/podcasts/series/7dws&quot;&gt;Scrum V Radio&lt;/a&gt;: A specific podcast about Welsh rugby.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One I’m forgetting in all of that is &lt;a href=&quot;https://www.kickstarter.com/projects/386612592/relatively-prime-series-2&quot;&gt;Relatively Prime&lt;/a&gt; which is a mathematics podcast that has just started a kickstarter campaign for a second season. I’ve never listened to it but though it could be worth mentioning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Any good ones I’m missing?&lt;/strong&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2014-10-04T00:00:00+00:00</dc:date>
</item>
<item rdf:about="tag:blogger.com,1999:blog-6365588202025292315.post-4658363764746166473">
	<title>William Stein: SageMathCloud Course Management</title>
	<link>http://sagemath.blogspot.com/2014/10/sagemathcloud-course-management.html</link>
	<content:encoded>&lt;div class=&quot;modal-body&quot;&gt;&lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt; now has some very rudimentary course management functionality. &amp;nbsp;Though still very basic, it makes it much, much easier to make files available to students, collect homework, etc., entirely using &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt; (without having to use email or any other submissions systems or github to share files). &amp;nbsp; To get started, create a new course by clicking on +New, then typing the name of your course and click &quot;Course&quot;:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-zJYWHLYWRP8/VCxOUQCrbrI/AAAAAAABQQ4/KT4IWWwUQKg/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.55.15%2BAM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-zJYWHLYWRP8/VCxOUQCrbrI/AAAAAAABQQ4/KT4IWWwUQKg/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.55.15%2BAM.png&quot; height=&quot;198&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Course documents allow you to manage a &lt;i&gt;list of students&lt;/i&gt;, &lt;i&gt;create projects&lt;/i&gt; for each                     of them, &lt;i&gt;share homework&lt;/i&gt; and folders with them, &lt;i&gt;collect                     homework&lt;/i&gt;, and &lt;i&gt;grade and return&lt;/i&gt; it to students.                       &lt;br /&gt;&lt;h4&gt;Add Students&lt;/h4&gt;To add a student to your course, click on the &lt;a class=&quot;btn btn-primary btn-default&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-users&quot;&gt; &lt;/i&gt;  Students&lt;/a&gt; tab,                         then type a student's name or email address in the &quot;Add student&quot; box to the right and press                         enter or click the button.   Searching for an email address is best, since you can be certain that the person you're adding is                         really a student in your course (instead of an unknown SageMathCloud user with the same name); moreover, if your student                         doesn't already have an account, they will receive an invitation via email.                         &lt;span class=&quot;lighten&quot;&gt;(NOTE: There is currently no way to add dozens of students at once.)&lt;/span&gt;                    &lt;br /&gt;&lt;span class=&quot;lighten&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-5jlvxCeEwAk/VCxO5T9_U1I/AAAAAAABQRA/YjyF5gcEogs/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.57.53%2BAM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-5jlvxCeEwAk/VCxO5T9_U1I/AAAAAAABQRA/YjyF5gcEogs/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.57.53%2BAM.png&quot; height=&quot;171&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span class=&quot;lighten&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lighten&quot;&gt;&lt;br /&gt;&lt;/span&gt;Once you add a student, click on &lt;a class=&quot;btn btn-warning&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-plus-circle&quot;&gt; &lt;/i&gt;  Create Project&lt;/a&gt; next to your                         student's name to create their project.  You own the project, and they will be added as a collaborator, and invited by email if they                         do not yet have an account.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-pi4VnSnlrCA/VCxPS2-Tc4I/AAAAAAABQRQ/03FygAXUnRM/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.59.50%2BAM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-pi4VnSnlrCA/VCxPS2-Tc4I/AAAAAAABQRQ/03FygAXUnRM/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.59.50%2BAM.png&quot; height=&quot;123&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-C5hvg7AuAow/VCxPSzz8TuI/AAAAAAABQRU/LyBP3j2xA7s/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.00.10%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-C5hvg7AuAow/VCxPSzz8TuI/AAAAAAABQRU/LyBP3j2xA7s/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.00.10%2BPM.png&quot; height=&quot;129&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;Don't worry, student projects are hidden by default from your main project listing.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-ZzDNFNJIvAQ/VCxPk6o1hnI/AAAAAAABQRg/fF3r40SK6_c/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.01.23%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-ZzDNFNJIvAQ/VCxPk6o1hnI/AAAAAAABQRg/fF3r40SK6_c/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.01.23%2BPM.png&quot; height=&quot;115&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;(To delete a student, click &lt;i class=&quot;fa fa-times&quot;&gt; &lt;/i&gt; to the right of the student.                         You can toggle whether deleted students are shown in settings.)&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Add Assignments&lt;/h4&gt;To create an assignment, first click                         &lt;a href=&quot;https://www.blogger.com/null&quot;&gt;                            &lt;i class=&quot;project-control-icon fa fa-plus-circle&quot;&gt;&lt;/i&gt;                            &lt;span class=&quot;project-pages-button-label hidden-xs&quot;&gt;New&lt;/span&gt;                        &lt;/a&gt;                        in the upper left of your project to create a new folder, and create or add files to it, as usual.                         Click on the &lt;a class=&quot;btn btn-default btn-primary&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-share-square-o&quot;&gt; &lt;/i&gt; Assignments&lt;/a&gt;                        tab of the course, then search for the folder by typing some part of its name in the box on the far right.                         Click to select the folder and it will be added to your                         list of assignments.                         To make &lt;b&gt;copies&lt;/b&gt; of this folder available to all of your students whose projects you have created,                         click the &lt;a class=&quot;btn btn-warning&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-share-square-o&quot;&gt; &lt;/i&gt;  Assign&lt;/a&gt; button.                         &lt;span class=&quot;lighten&quot;&gt;NOTE: You can share arbitrary folders with any contents with your                             students -- folders don't have                             to contain &quot;assignments&quot;, and may contain anything, Sage worksheets, IPython notebooks,                             LaTeX documents, etc.&lt;/span&gt;                    &lt;br /&gt;&lt;span class=&quot;lighten&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-zv3oNd_QHhI/VCxQD8AEiSI/AAAAAAABQRo/aIPlWFZ83cw/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.03.06%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-zv3oNd_QHhI/VCxQD8AEiSI/AAAAAAABQRo/aIPlWFZ83cw/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.03.06%2BPM.png&quot; height=&quot;98&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-LT4ZJFwHv3k/VCxQEwwjM7I/AAAAAAABQRw/N9d6TlSgoak/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.03.20%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-LT4ZJFwHv3k/VCxQEwwjM7I/AAAAAAABQRw/N9d6TlSgoak/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.03.20%2BPM.png&quot; height=&quot;140&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;span class=&quot;lighten&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lighten&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;h4&gt;Collecting and Grading Assignments&lt;/h4&gt;To collect an assignment from your students,                         click &lt;a class=&quot;btn btn-warning&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-share-square-o fa-rotate-180&quot;&gt; &lt;/i&gt;  Collect&lt;/a&gt; to the right of an assignment                         to collect it from all students.                         &lt;span class=&quot;lighten&quot;&gt;                        (NOTE: There is currently no way to schedule collection to happen at a specific time -- it happens                         when you click the button.  Click it again to update the collected files.)&lt;/span&gt;                    &lt;br /&gt;Once the assignments are collected, click                         &lt;button class=&quot;btn btn-default dropdown-toggle&quot; type=&quot;button&quot;&gt;                            &lt;i class=&quot;fa fa-eye&quot;&gt; &lt;/i&gt; Grade &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;                        &lt;/button&gt;                        and select a student to jump to the folder that contains the collected version of a                         student's assignment. Edit the                         files there, indicating grades on each problem, etc.                         &lt;span class=&quot;lighten&quot;&gt;                            NOTE: There is no special support yet for recording grades, knowing which homework you have graded already, etc.                         &lt;/span&gt;                    &lt;br /&gt;When you are done grading, click &lt;a class=&quot;btn btn-warning&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-share-square-o&quot;&gt; &lt;/i&gt;  Return Graded&lt;/a&gt;                        to return the graded homework to the students.  If the homework folder is called &lt;tt&gt;homework1&lt;/tt&gt;, then the graded version                         will appear in the student's project as &lt;tt&gt;homework1-graded&lt;/tt&gt;.                     &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-QlF6BMvK4wM/VCxQXrL-QxI/AAAAAAABQR4/0PsVB19gPE0/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.04.35%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-QlF6BMvK4wM/VCxQXrL-QxI/AAAAAAABQR4/0PsVB19gPE0/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.04.35%2BPM.png&quot; height=&quot;108&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;Course Settings&lt;/h4&gt;Set the title and description of the course in the                         &lt;a class=&quot;btn btn-default btn-primary&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-wrench&quot;&gt; &lt;/i&gt; Settings&lt;/a&gt; tab.  When you                         change these, the new title and description                         propagates automatically to all student projects for this course.                     &lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-h0Zt3E4dEGs/VCxO9o_lDsI/AAAAAAABQRI/FTyzihxwku0/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.58.21%2BAM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-h0Zt3E4dEGs/VCxO9o_lDsI/AAAAAAABQRI/FTyzihxwku0/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.58.21%2BAM.png&quot; height=&quot;151&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;Other&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;A&amp;nbsp;&lt;a href=&quot;http://youtu.be/C8ZALCcCCkM&quot; target=&quot;_blank&quot;&gt;Video Tutorial&lt;/a&gt;                        &lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Technical Remarks&lt;/h4&gt;The underlying file format of a .course file is a plain text file with one line in JSON format for each student,                     shared assignment, and for settings.                  &lt;/div&gt;</content:encoded>
	<dc:date>2014-10-01T13:05:16+00:00</dc:date>
	<dc:creator>William Stein</dc:creator>
</item>
<item rdf:about="http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/09/abelian-complexity-of-the-oldenburger-sequence">
	<title>Sébastien Labbé: Abelian complexity of the Oldenburger sequence</title>
	<link>http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/09/abelian-complexity-of-the-oldenburger-sequence</link>
	<content:encoded>&lt;div class=&quot;document&quot;&gt;
&lt;p&gt;The Oldenburger infinite sequence &lt;a class=&quot;citation-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/09/abelian-complexity-of-the-oldenburger-sequence#o39&quot; id=&quot;id1&quot;&gt;[O39]&lt;/a&gt;
\[
K = 1221121221221121122121121221121121221221\ldots
\]
also known under the name of &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Kolakoski_sequence&quot;&gt;Kolakoski&lt;/a&gt;, is equal to its &lt;em&gt;exponent
trajectory&lt;/em&gt;.  The exponent trajectory \(\Delta\) can be obtained by counting
the lengths of blocks of consecutive and equal letters:
\[
K =
1^12^21^22^11^12^21^12^21^22^11^22^21^12^11^22^11^12^21^22^11^22^11^12^21^12^21^22^11^12^21^12^11^22^11^22^21^12^21^2\ldots
\]
The sequence of exponents above gives the exponent trajectory of the
Oldenburger sequence:
\[
\Delta = 12211212212211211221211212\ldots
\]
which is equal to the original sequence \(K\).
You can define this sequence in Sage:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: K = words.KolakoskiWord()
sage: K
word: 1221121221221121122121121221121121221221...
sage: K.delta()          # delta returns the exponent trajectory
word: 1221121221221121122121121221121121221221...
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;There are a lot of open problem related to basic properties of that sequence.
For example, we do not know if that sequence is recurrent, that is, all finite
subword or factor (finite block of consecutive letters) always reappear. Also,
it is still open to prove whether the density of &lt;tt class=&quot;docutils literal&quot;&gt;1&lt;/tt&gt; in that sequence is
equal to \(1/2\).&lt;/p&gt;
&lt;p&gt;In this blog post, I do some computations on its abelian complexity
\(p_{ab}(n)\) defined as the number of distinct abelian vectors of subwords of
length \(n\) in the sequence. The abelian vector \(\vec{w}\) of a word
\(w\) counts the number of occurences of each letter:
\[
w = 12211212212
\quad
\mapsto
\quad
1^5 2^7 \text{, abelianized}
\quad
\mapsto
\quad
\vec{w} = (5, 7) \text{, the abelian vector of }
w
\]&lt;/p&gt;
&lt;p&gt;Here are the abelian vectors of subwords of length 10 and 20 in the prefix of
length 100 of the Oldenburger sequence.  The functions &lt;tt class=&quot;docutils literal&quot;&gt;abelian_vectors&lt;/tt&gt; and
&lt;tt class=&quot;docutils literal&quot;&gt;abelian_complexity&lt;/tt&gt;  are not in Sage as of now. Code is available at &lt;a class=&quot;reference external&quot; href=&quot;http://trac.sagemath.org/ticket/17058&quot;&gt;trac
#17058&lt;/a&gt; to be merged in Sage soon:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: prefix = words.KolakoskiWord()[:100]
sage: prefix.abelian_vectors(10)
{(4, 6), (5, 5), (6, 4)}
sage: prefix.abelian_vectors(20)
{(8, 12), (9, 11), (10, 10), (11, 9), (12, 8)}
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Therefore, the prefix of length 100 has 3 vectors of subwords of length 10 and 5
vectors of subwords of length 20:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: p100.abelian_complexity(10)
3
sage: p100.abelian_complexity(20)
5
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;I import the &lt;tt class=&quot;docutils literal&quot;&gt;OldenburgerSequence&lt;/tt&gt; from my optional spkg because it is faster
than the implementation in Sage:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: from slabbe import KolakoskiWord as OldenburgerSequence
sage: Olden = OldenburgerSequence()
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;I count the number of abelian vectors of subwords of length 100 in the prefix of
length \(2^{20}\) of the Oldenburger sequence:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: prefix = Olden[:2^20]
sage: %time prefix.abelian_vectors(100)
CPU times: user 3.48 s, sys: 66.9 ms, total: 3.54 s
Wall time: 3.56 s
{(47, 53), (48, 52), (49, 51), (50, 50), (51, 49), (52, 48), (53, 47)}
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Number of abelian vectors of subwords of length less than 100 in the prefix of
length \(2^{20}\) of the Oldenburger sequence:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: %time L100 = map(prefix.abelian_complexity, range(100))
CPU times: user 3min 20s, sys: 1.08 s, total: 3min 21s
Wall time: 3min 23s
sage: from collections import Counter
sage: Counter(L100)
Counter({5: 26, 6: 26, 4: 17, 7: 15, 3: 8, 8: 4, 2: 3, 1: 1})
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Let's draw that:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: labels = ('Length of factors', 'Number of abelian vectors')
sage: title = 'Abelian Complexity of the prefix of length $2^{20}$ of Oldenburger sequence'
sage: list_plot(L100, color='green', plotjoined=True, axes_labels=labels, title=title)
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/oldenburger_abelian_100.png&quot;&gt;&lt;img alt=&quot;/~labbe/Files/2014/oldenburger_abelian_100.png&quot; src=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/oldenburger_abelian_100.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;It seems to grow something like \(\log(n)\). Let's now consider subwords of
length \(2^n\) for \(0\leq n\leq 12\) in the same prefix of length
\(2^{20}\):&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: %time L20 = [(2^n, prefix.abelian_complexity(2^n)) for n in range(20)]
CPU times: user 41 s, sys: 239 ms, total: 41.2 s
Wall time: 41.5 s
sage: L20
[(1, 2), (2, 3), (4, 3), (8, 3), (16, 3), (32, 5), (64, 5), (128, 9),
(256, 9), (512, 13), (1024, 17), (2048, 22), (4096, 27), (8192, 40),
(16384, 46), (32768, 67), (65536, 81), (131072, 85), (262144, 90), (524288, 104)]
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;I now look at subwords of length \(2^n\) for \(0\leq n\leq 23\) in the
longer prefix of length \(2^{24}\):&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: prefix = Olden[:2^24]
sage: %time L24 = [(2^n, prefix.abelian_complexity(2^n)) for n in range(24)]
CPU times: user 20min 47s, sys: 13.5 s, total: 21min
Wall time: 20min 13s
sage: L24
[(1, 2), (2, 3), (4, 3), (8, 3), (16, 3), (32, 5), (64, 5), (128, 9), (256,
9), (512, 13), (1024, 17), (2048, 23), (4096, 33), (8192, 46), (16384, 58),
(32768, 74), (65536, 98), (131072, 134), (262144, 165), (524288, 229),
(1048576, 302), (2097152, 371), (4194304, 304), (8388608, 329)]
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;The next graph gather all of the above computations:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: G = Graphics()
sage: legend = 'in the prefix of length 2^{}'
sage: G += list_plot(L24, plotjoined=True, thickness=4, color='blue', legend_label=legend.format(24))
sage: G += list_plot(L20, plotjoined=True, thickness=4, color='red', legend_label=legend.format(20))
sage: G += list_plot(L100, plotjoined=True, thickness=4, color='green', legend_label=legend.format(20))
sage: labels = ('Length of factors', 'Number of abelian vectors')
sage: title = 'Abelian complexity of Oldenburger sequence'
sage: G.show(scale=('semilogx', 2), axes_labels=labels, title=title)
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/oldenburger_abelian_2e24.png&quot;&gt;&lt;img alt=&quot;/~labbe/Files/2014/oldenburger_abelian_2e24.png&quot; src=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/oldenburger_abelian_2e24.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;A linear growth in the above graphics with logarithmic \(x\) abcisse would
mean a growth in \(\log(n)\).  After those experimentations, my hypothesis
is that the abelian complexity of the Oldenburger sequence grows like
\(\log(n)^2\).&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;references&quot;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;o39&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/09/abelian-complexity-of-the-oldenburger-sequence#id1&quot;&gt;[O39]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Oldenburger, Rufus (1939). &amp;quot;Exponent trajectories in symbolic dynamics&amp;quot;.
Transactions of the American Mathematical Society 46: 453–466.
&lt;a class=&quot;reference external&quot; href=&quot;http://dx.doi.org/10.2307%2F1989933&quot;&gt;doi:10.2307/1989933&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2014-09-27T22:00:00+00:00</dc:date>
	<dc:creator>Sébastien Labbé</dc:creator>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/code/2014/09/24/greyscale-graphs-in-sage/">
	<title>Vince Knight: Grey scale network graph colorings in Sage</title>
	<link>http://drvinceknight.github.io/unpeudemath/code/2014/09/24/greyscale-graphs-in-sage/</link>
	<content:encoded>&lt;p&gt;This is a quick post following a request for some Sage help that a colleague asked for.
It’s based on a quick fix and I’m wondering if someone might come up with a better way of doing this that I’ve missed or if it’s worth actually raising a ticket to incorporate something like it in Sage.&lt;/p&gt;

&lt;p&gt;So my colleague is writing a book on Graph theory and recently started taking a look at Sage’s capacity to handle Graph theory stuff and colorings in particular.
The issue was that said colleague ideally wanted grey scale pictures of the colorings (I’m guessing this is due to the publisher or something - I didn’t ask).&lt;/p&gt;

&lt;p&gt;The following creates a bespoke graph and plots a coloring (ensures that adjacent vertices have different colors):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graphs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PetersenGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coloring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/multi_color_petersen_graph_coloring.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now to get that in to grey scale we could of course open up &lt;a href=&quot;http://www.inkscape.org/en/&quot;&gt;inkscape&lt;/a&gt; or something similar and convert it but it would be nice to be able to directly use something like the &lt;code&gt;matplotlib&lt;/code&gt; grey scale &lt;a href=&quot;http://vincent-knight.com/unpeudemath/feed.xml&quot;&gt;color map&lt;/a&gt;.
This is in fact what I started to look for but with no success so I then started to look for how one converts an RGB tuple (3 floats corresponding to the makeup of a color) to something on a grey scale.&lt;/p&gt;

&lt;p&gt;Turns out (see &lt;a href=&quot;http://stackoverflow.com/questions/12201577/convert-rgb-image-to-grayscale-in-python&quot;&gt;this stackoverflow question&lt;/a&gt; which leads to &lt;a href=&quot;http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale&quot;&gt;this wiki page&lt;/a&gt;), that for \(\text{rgb}=(r,g,b)\), the corresponding grey scale color is given by \(\text{grey}=(Y,Y,Y)\) where \(Y\) is given by:&lt;/p&gt;



&lt;p&gt;where \(y\) is given by:&lt;/p&gt;



&lt;p&gt;I genuinely have no understanding what so ever as to what that does but the idea is to make use of the Sage &lt;code&gt;rainbow&lt;/code&gt; function which returns a given number of colors (very useful for creating plots when you don’t necessarily want to come up with all the color names).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rainbow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'rgbtuple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.6000000000000001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7999999999999998&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.20000000000000018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.40000000000000036&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.40000000000000036&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1999999999999993&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8000000000000007&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5999999999999996&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So here’s a function that takes the output of &lt;code&gt;rainbow&lt;/code&gt; and maps it to grey scale:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;grey_rainbow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Return n greyscale colors&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;clrs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.299&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.587&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.114&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rainbow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'rgbtuple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;clrs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.299&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.587&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.114&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rainbow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'rgbtuple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'white'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0031308&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;12.92&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.055&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.055&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'black'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that we’re including the option to use black as one of the colours or not (it covers up the vertex labels on the corresponding plot if we do).
We can then use that function to create our own partition coloring:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;grey_coloring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chromatic_nbr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chromatic_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;coloring&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coloring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;grey_colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey_rainbow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chromatic_nbr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grey_colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coloring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graphplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex_colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how we can simply use the above to get a grey scale coloring of a graph:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graphs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PetersenGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey_coloring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/grey_petersen_graph_coloring.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graphs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PetersenGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey_coloring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/grey_petersen_graph_coloring_with_black.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now what would be really nice would be to be able to just use any &lt;code&gt;matplotlib&lt;/code&gt; color map in the Graph coloring.
This might actually already be possible, I’ll fish through the Sage source code at some point and take a look (the awesome thing about Sage is &lt;strong&gt;that I can do that&lt;/strong&gt;).
Otherwise, it might just be a quick fix (and hopefully a less hacky one then above - I still laugh at the formulae I use and that seems to work), who nows I might even see if it’s worth opening an actual ticket for this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://vincent-knight.com/unpeudemath/assets/code/greyscale-graphs-in-sage.sage&quot;&gt;Here is a Sage script with the above code&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2014-09-24T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/code/2014/09/21/my-thoughts-on-plotly/">
	<title>Vince Knight: My thoughts on plotly (the github for plots)</title>
	<link>http://drvinceknight.github.io/unpeudemath/code/2014/09/21/my-thoughts-on-plotly/</link>
	<content:encoded>&lt;p&gt;A while ago I saw &lt;a href=&quot;https://plot.ly/&quot;&gt;plotly&lt;/a&gt; appear on my G+ stream.
People seemed excited about it but I was too busy to look at it properly and just assumed: &lt;em&gt;must be some sort of new matplotlib&lt;/em&gt;: &lt;strong&gt;ain’t nobody got time for that!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then, one of the guys from plotly reached out saying I should take a look.
I took a brief glance and realised that this was &lt;strong&gt;nothing like a new matplotlib&lt;/strong&gt; and in fact looked pretty cool.
So I dutifully put it on my to do list but very much near the bottom.&lt;/p&gt;

&lt;p&gt;I’m writing this sat in between sessions at &lt;a href=&quot;http://pyconuk.org/&quot;&gt;PyconUK 2014&lt;/a&gt;.
One of the talks on the first day was by Chris from plotly.
He gave a great talk (which once the video link is up I’ll share here) and I immediately threw ‘check out plotly’ to the top of my to do list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How I got started&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I created an account at &lt;a href=&quot;https://plot.ly/&quot;&gt;https://plot.ly/&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;I copied and pasted the code from the &lt;a href=&quot;https://plot.ly/python/getting-started/&quot;&gt;‘getting started guide’&lt;/a&gt; which takes you threw setting up your plotly credentials etc…&lt;/li&gt;
  &lt;li&gt;I ran the matplotlib code &lt;a href=&quot;https://plot.ly/matplotlib/&quot;&gt;https://plot.ly/matplotlib/&lt;/a&gt;. Which if you look carefully basically is just matplotlib code with an added line &lt;code&gt;plot_url = py.plot_mpl(fig)&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.mlab&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mlab&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plotly.plotly&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;py&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ew&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;area_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width_scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;edgecolor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;linewidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plot_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot_mpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That code automatically creates the following &lt;a href=&quot;https://plot.ly/~drvinceknight/1&quot;&gt;plotly plot&lt;/a&gt; (which you can edit, zoom in etc…):&lt;/p&gt;



&lt;p&gt;By ‘automatically’ I mean: ‘opens up web browser and your plots is there’!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Doing something of my own&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;http://vincent-knight.com/unpeudemath/code/2014/09/19/the-expected-waiting-time-in-a-tandem-queue-with-blocking-using-sage/&quot;&gt;my previous post&lt;/a&gt; I wrote about how to use Markov Chains to obtain the expected wait in a tandem qeue.
Here’s a plot I put together that compared the analytical values to simulated values:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/expected_wait.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code to obtain that particular plot is below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Libraries&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csv&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plotly.plotly&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;py&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Get parameters&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mu_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mu_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Read analytical data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;analytical_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'analytical.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Read simulation data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;simulation_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'simulated.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create the plot&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_sim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simulation_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# The datasets have more data than I want to plot so skipping some values&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y_sim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simulation_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boxplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_sim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_sim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_ana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analytical_data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_sim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y_ana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analytical_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_ana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_ana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_ana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_ana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_ana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_ana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$\Lambda$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mean expected wait'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$c_1=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,\; N=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,\; c_2=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,\;\mu_1=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,\; \mu_2=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,\; p=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; $&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Save the plot as a pdf file locally&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savefig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.pdf&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbox_inches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# THIS IS THE ONLY LINE THAT I HAD TO ADD TO GET THIS UP TO plotly!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plot_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot_mpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you’d like to repeat the above you can download the &lt;a href=&quot;http://vincent-knight.com/unpeudemath/assets/data/analytical.csv&quot;&gt;analytical&lt;/a&gt; and &lt;a href=&quot;http://vincent-knight.com/unpeudemath/assets/data/simulated.csv&quot;&gt;simulated&lt;/a&gt; datafiles.&lt;/p&gt;

&lt;p&gt;The result of that can be seen &lt;a href=&quot;https://plot.ly/~drvinceknight/2&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;



&lt;p&gt;Further more that is just a ‘thing’ on my plotly profile so you can see it at this url: &lt;a href=&quot;https://plot.ly/~drvinceknight/2&quot;&gt;https://plot.ly/~drvinceknight/2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getting other formats&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On that page I can tweak the graph if I wanted to and finally I can just grab the plot in whatever format I want by simply adding the correct format extension to the url:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pdf: &lt;a href=&quot;https://plot.ly/~drvinceknight/2.pdf&quot;&gt;https://plot.ly/~drvinceknight/2.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;png: &lt;a href=&quot;https://plot.ly/~drvinceknight/2.png&quot;&gt;https://plot.ly/~drvinceknight/2.png&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;svg: &lt;a href=&quot;https://plot.ly/~drvinceknight/2.svg&quot;&gt;https://plot.ly/~drvinceknight/2.svg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;My overall thoughts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So right now I’m just kind of excited about the possibilities (too many ideas to coherently filter out the good ones), there are also packages for R so I might try and get my students to play around with it in R when I teach it…&lt;/p&gt;

&lt;p&gt;As a research tool, I think this will also be nice (it’s certainly the way to go).
Although recently, I’ve been working remotely with two students and being able to throw a png of a plot in a hangout chat is pretty cool (and mobile friendly).
So maybe that’s something the plotly guys could think about…&lt;/p&gt;

&lt;p&gt;At the end of the day: this is an awesome tool. Plotly ‘abstractifies’ plots so that people using different packages/languages can still talk to each other.
One of the big things I’m forgetting to talk about in detail is that there’s a web tool that allows you to change colors, change titles, mess with the data etc.
That’s also a very cool collaborative tool obviously as I can imagine throwing up a plot that a co-author who doesn’t like code could then tweak.&lt;/p&gt;

&lt;p&gt;Similarly (if/when) publications start using smarter formats (than things that are restricted by the need to be printed on paper) you could even just embed the plots like I’ve done here (so people could zoom, grab the data etc…).
Here’s another way I could put that:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Papers are where plots go to die, they can go to plotly to live…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Woops, I’ve started blurting out some ideas… Hopefully they’re good ones.&lt;/p&gt;

&lt;p&gt;I look forward to playing around with this tool some more (I need to see how it behaves with a Sage plot…).&lt;/p&gt;</content:encoded>
	<dc:date>2014-09-21T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/code/2014/09/19/the-expected-waiting-time-in-a-tandem-queue-with-blocking-using-sage/">
	<title>Vince Knight: Calculating the expected wait in a tandem queue with blocking using Sage</title>
	<link>http://drvinceknight.github.io/unpeudemath/code/2014/09/19/the-expected-waiting-time-in-a-tandem-queue-with-blocking-using-sage/</link>
	<content:encoded>&lt;p&gt;In this post I’ll describe a particular mathematical model that I’ve been working on for the purpose of a research paper.
This is actually part of some work that I’ve done with &lt;a href=&quot;https://plus.google.com/+JamesCampbell95/posts&quot;&gt;+James Campbell&lt;/a&gt; an undergraduate who worked with me over the Summer.&lt;/p&gt;

&lt;p&gt;Consider the system shown in the picture below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/tandem_queue.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a system composed of ‘two queues in tandem’ each with a number of servers \(c\) and a service rate \(\mu\).
It is assumed here (as is often the case in queueing theory) that the service rate is exponentially distributed (in effect that the service time is random with mean \(1/\mu\)).&lt;/p&gt;

&lt;p&gt;Individuals arrive at the queue with mean arrival rate \(\Lambda\) (once again exponentially distributed).&lt;/p&gt;

&lt;p&gt;There is room for up to \(N\) individuals to wait for a free server at the first station.
After their service at the first station is complete, individuals leave the system with probability \(p\), but if they don’t and there is no free place in the next station (ie there are not less than \(c_2\) individuals in the second service center) then they become blocked.&lt;/p&gt;

&lt;p&gt;There are a vast array of applications of queueing systems like the above (in particular in the paper we’re working on we’re using it to model a healthcare system).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this post I’ll describe how to use Markov chains to be able to describe the system and in particular how to get the expected wait for an arrival at the queue.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have discussed Markov chains before (mainly posts on my old blog) and so I won’t go in to too much detail about the underlying theory (I think this is perhaps a slightly technical post so it is mainly aimed at people familiar with queueing theory but by all means ask in the comments if I can clarify anything).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The state space&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One has to think about this carefully as it’s important to keep track not only of where individuals are but whether or not they are blocked.
Based on that one might think of using a 3 dimensional state space: \((i,j,k)\) where \(i\) would denote the number of people at the first station, \(j\) the number at the second and \(k\) the number at the first who are blocked.
This wouldn’t be a terrible idea but we can actually do things in a slightly neater and more compact way:&lt;/p&gt;



&lt;p&gt;In the above \(i\) denotes the number of individuals in service or waiting for service at the first station and \(j\) denotes the number of individuals in service at the second station &lt;strong&gt;or&lt;/strong&gt; blocked at the first station.&lt;/p&gt;

&lt;p&gt;The continuous time transition rates between two states \((i_1,j_1)\) and \((i_2, j_2)\) are given by:&lt;/p&gt;



&lt;p&gt;where \(\delta=(i_2,j_2)-(i_1,j_1)\).&lt;/p&gt;

&lt;p&gt;Here’s a picture of the Markov Chain for \(N=c_1=c_2=2\):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/small_chain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The steady state probabilities&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using the above we can index our states and keep all the information in a matrix \(Q\), to obtain the steady state distributions of the chain (the probabilities of finding the queue in a given state) we then simply solve the following equation:&lt;/p&gt;



&lt;p&gt;subject to \(\sum \pi = 1\).&lt;/p&gt;

&lt;p&gt;Here’s how we can do this using &lt;a href=&quot;http://sagemath.org/&quot;&gt;Sage&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tandem_Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        A class for an instance of the tandem_queue&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lambda&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu_1&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu_2&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Reduces state space in particular case of p = 1&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_wait_cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            Returns the rate of transition between to given states.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lambda&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_2&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            Solves linear system.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most of the above is glorified book keeping but here’s a quick example showing what the above does and how it can be used.
First let’s create an instance of our problem with \(N=c_1=c_2=2\), \(5\mu_2=2p=\mu_1=1\) and \(\Lambda=5\).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small_example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tandem_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small_example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dense&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;over&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rational&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.str()'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We see that if we return \(Q\) we get a 22 by 22 matrix which if you recall the picture above corresponds to the 22 states in that picture.&lt;/p&gt;

&lt;p&gt;We can see the states by just typing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small_example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you check carefully they all correspond to the states of the picture above.&lt;/p&gt;

&lt;p&gt;Now what we would like to know is the probability of being in any given state.
To do this we need to solve the matrix equation \(\pi Q = 0\) such that \(\sum \pi=1\).&lt;/p&gt;

&lt;p&gt;This is done in Sage (for any matrix &lt;code&gt;Q&lt;/code&gt;) using the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There we build a matrix &lt;code&gt;A&lt;/code&gt; with an added column of 1s and then solve the corresponding equation using &lt;code&gt;solve_right&lt;/code&gt; (note that we transposed the matrix).
If you look at the class definition this was all defined earlier so we can in fact just run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small_example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;974420487508335328592&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6717141852060739142960&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25263720112088475982400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;107693117265184715581000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;499825193288571759140000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7567657557556535357400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50835142813671411162000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;177836071295654602905000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;638540135036394350075000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2305924001256099701875000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26439192416069771765000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;185599515623092483825000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;700026867396942548625000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2256398553097737112500000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4700830318953618984375000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;61385774570987050093750&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;444444998037114715312500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3393156381219452445312500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15476151589322058007812500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;41152314633066177343750&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;352285141439825390625000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55207801002325145206717477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1826827211896183837890625&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4246753923255780400516729&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s not super helpful displayed like that (all the arithmetic is being done exactly) so here’s a quick plot of the probabilities:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;small_example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axes_labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'State'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Probability'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/steady_state_probabilities_for_tandem_queue.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That plot could be made a lot prettier an informative (by for example using the names of the states as xticks) but it will do for now.
We can see from there for example that the most probable state of our queue (with the parameters we picked) is to be in the last state (see list above) which is \((2,4)\).&lt;/p&gt;

&lt;p&gt;Out of interest here’s a plot when we change $\Lambda=1/2$ (a tenth of what we did above):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/steady_state_probabilities_for_tandem_queue_with_less_demand.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that now the most probable state is the sixth state (Python/Sage indexing starts at 0), which corresponds to \((0,1)\).&lt;/p&gt;

&lt;p&gt;Here’s an animated plot of the steady state distribution for a larger system as \(\Lambda\) increases, displayed in a more informative way (the two dimensions corresponding to \(i\) and \(j\)):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/markov_chain.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of that is very nice and interesting but where things get very useful is when trying to calculate the mean time one would expect to wait in a queue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mean expected wait in the queue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we consider all states \((i,j)\in S\) only a subset of them will actually imply a wait:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If there are less than \(c_1\) individuals in the first station then anyone who arrives has direct access to a server;&lt;/li&gt;
  &lt;li&gt;If there are more than \(N+c_1\) individuals in the first station then anyone who arrives will be lost to the system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With a little bit of thought (recalling what the \(i\)s and \(j\)s represent) we see that the states that incur a wait are given by:&lt;/p&gt;



&lt;p&gt;Now if we know the expected wait when arriving in any state \((i,j) \in S_A\) we can get the mean wait as:&lt;/p&gt;



&lt;p&gt;where \(w(i,j)\) denotes the expected time spent in any given state \((i,j)\).
We are in essence, summing over arrivals that will have a wait and dividing by the probability of an individual not being lost to the system, which happens when \(i + \max(j - c_2, 0) &amp;lt; c_1 + N\).&lt;/p&gt;

&lt;p&gt;Obtaining \(c(i,j)\) is relatively simple.
We consider the ‘almost’ same Markov chain as above (except that we ignore arrivals).
In this instance a jump from one step to another will only occur if a service occurs at the first station (with rate \(\min(c_1-\max(j-c_2,0),i)\mu_1\)) or if a service at the second station (with rate \(\min(c_2, j)\mu_2\)).&lt;/p&gt;

&lt;p&gt;So the mean time spent in state \((i,j)\) is the inverse of the total exit rate:&lt;/p&gt;



&lt;p&gt;Using that notion we are in effect discretizing the ‘ignore arrivals’ Markov chain.
Once a transition occurs we can obtain the probability of where the service occurs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The probability of the service being at the first station:&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
  &lt;li&gt;The probability of the service being at the second station:&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;We can use all of the above to put together a nice recursive formula for the expected wait \(w(i,j)\) in terms of the expected wait of states that are in effect getting closer and closer to having no wait:&lt;/p&gt;



&lt;p&gt;where \(A\), is the set of states with no wait: \(i+\max(j-c_2,0) &amp;lt; c_1\)&lt;/p&gt;

&lt;p&gt;Using the recursive formula is actually very easy to implement in code (we use a dictionary to cache calculated values to not make sure we don’t waste any time).&lt;/p&gt;

&lt;p&gt;Here is a reduced version of the methods that need to be added to above to get this to work in Sage (you need to add &lt;code&gt;self.expected_wait_cache = {}&lt;/code&gt; to the &lt;code&gt;__init__&lt;/code&gt; method):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_pi_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Obtain a dictionary which indexes the states.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p_service_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Returns the discretized probability of a service occurring at first station&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p_service_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Returns the discretized probability of a service occurring at second station&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mean_time_in_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Returns the mean time in any given state before a transition occurs&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expected_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Function that returns the expected time till absorption for a given state&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_wait_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_wait_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# If state outside of boundary. (Might not need this after new conditions below)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# If absorbing state&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_wait_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_wait_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean_time_in_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_service_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_wait_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_service_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_wait_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_service_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_wait_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mean_expected_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Returns the mean wait&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pi_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;accepting_states&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prob_of_accepting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accepting_states&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accepting_states&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prob_of_accepting&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using all of the above we can get the expected wait for our system:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small_example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tandem_Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small_example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean_expected_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;60279471210745371&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50645610005072978&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;1.19022105182873&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Below is a plot showing the effect on the mean wait as demand increases in the plot below for a large system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/expected_wait.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What that plot shows is the calculated values (solid blue) line going through box plots of the simulated value.
Perhaps in another blog post some day I’ll write about how to simulate the above but I think that’s probability sufficient for now.&lt;/p&gt;

&lt;p&gt;If it’s of interest all of the above code can be downloaded &lt;a href=&quot;http://vincent-knight.com/unpeudemath/assets/code/the-expected-waiting-time-in-a-tandem-queue-with-blocking-using-sage.sage&quot;&gt;here&lt;/a&gt; or at this &lt;a href=&quot;https://gist.github.com/drvinceknight/35ddd99fc25053d730cd&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2014-09-19T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/08/slabbe-0.1.spkg-released">
	<title>Sébastien Labbé: slabbe-0.1.spkg released</title>
	<link>http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/08/slabbe-0.1.spkg-released</link>
	<content:encoded>&lt;div class=&quot;document&quot;&gt;
&lt;p&gt;These is a summary of the functionalities present in &lt;a class=&quot;reference external&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Sage&quot;&gt;slabbe-0.1&lt;/a&gt; optional Sage
package. It depends on version 6.3 of Sage because it uses
&lt;a class=&quot;reference external&quot; href=&quot;http://www.sagemath.org/doc/reference/structure/sage/sets/recursively_enumerated_set.html&quot;&gt;RecursivelyEnumeratedSet&lt;/a&gt; code that was merged in 6.3.  It contains modules
on digital geometry, combinatorics on words and more.&lt;/p&gt;
&lt;p&gt;Install the optional spkg (depends on sage-6.3):&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage -i http://www.liafa.univ-paris-diderot.fr/~labbe/Sage/slabbe-0.1.spkg
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;In each of the example below, you first have to import the module once and for
all:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: from slabbe import *
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;To construct the image below, make sure to use tikz package so that &lt;tt class=&quot;docutils literal&quot;&gt;view&lt;/tt&gt; is
able to compile tikz code when called:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: latex.add_to_preamble(&amp;quot;\\usepackage{tikz}&amp;quot;)
sage: latex.extra_preamble()
'\\usepackage{tikz}'
&lt;/pre&gt;&lt;/div&gt;



&lt;div class=&quot;section&quot; id=&quot;draw-the-part-of-a-discrete-plane&quot;&gt;
&lt;h1&gt;Draw the part of a discrete plane&lt;/h1&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: p = DiscretePlane([1,pi,7], 1+pi+7, mu=0)
sage: d = DiscreteTube([-5,5],[-5,5])
sage: I = p &amp;amp; d
sage: I
Intersection of the following objects:
Set of points x in ZZ^3 satisfying: 0 &amp;lt;= (1, pi, 7) . x + 0 &amp;lt; pi + 8
DiscreteTube: Preimage of [-5, 5] x [-5, 5] by a 2 by 3 matrix
sage: clip = d.clip()
sage: tikz = I.tikz(clip=clip)
sage: view(tikz, tightpage=True)
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/discreteplane1pi7.png&quot;&gt;&lt;img alt=&quot;/~labbe/Files/2014/discreteplane1pi7.png&quot; src=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/discreteplane1pi7.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;draw-the-part-of-a-discrete-line&quot;&gt;
&lt;h1&gt;Draw the part of a discrete line&lt;/h1&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: L = DiscreteLine([-2,3], 5)
sage: b = DiscreteBox([0,10], [0,10])
sage: I = L &amp;amp; b
sage: I
Intersection of the following objects:
Set of points x in ZZ^2 satisfying: 0 &amp;lt;= (-2, 3) . x + 0 &amp;lt; 5
[0, 10] x [0, 10]
sage: I.plot()
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/discreteline23.png&quot;&gt;&lt;img alt=&quot;/~labbe/Files/2014/discreteline23.png&quot; src=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/discreteline23.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;double-square-tiles&quot;&gt;
&lt;h1&gt;Double square tiles&lt;/h1&gt;
&lt;p&gt;This module was developped for the article on the combinatorial properties of
double square tiles written with Ariane Garon and Alexandre Blondin Massé
&lt;a class=&quot;citation-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/08/slabbe-0.1.spkg-released#bgl2012&quot; id=&quot;id3&quot;&gt;[BGL2012]&lt;/a&gt;. The original version of the code was written with Alexandre.&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: D = DoubleSquare((34,21,34,21))
sage: D
Double Square Tile
  w0 = 3032321232303010303230301012101030   w4 = 1210103010121232121012123230323212
  w1 = 323030103032321232303                w5 = 101212321210103010121
  w2 = 2321210121232303232123230301030323   w6 = 0103032303010121010301012123212101
  w3 = 212323032321210121232                w7 = 030101210103032303010
(|w0|, |w1|, |w2|, |w3|) = (34, 21, 34, 21)
(d0, d1, d2, d3)         = (42, 68, 42, 68)
(n0, n1, n2, n3)         = (0, 0, 0, 0)
sage: D.plot()
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/fibo2.png&quot;&gt;&lt;img alt=&quot;/~labbe/Files/2014/fibo2.png&quot; src=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/fibo2.png&quot; /&gt;&lt;/a&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: D.extend(0).extend(1).plot()
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/fibo2extend0extend1.png&quot;&gt;&lt;img alt=&quot;/~labbe/Files/2014/fibo2extend0extend1.png&quot; src=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/fibo2extend0extend1.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;We have shown that using two invertible operations (called SWAP and TRIM),
every double square tiles can be reduced to the unit square:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: D.plot_reduction()
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/fibo2reduction.png&quot;&gt;&lt;img alt=&quot;/~labbe/Files/2014/fibo2reduction.png&quot; src=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/fibo2reduction.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;The reduction operations are:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: D.reduction()
['SWAP_1', 'TRIM_1', 'TRIM_3', 'SWAP_1', 'TRIM_1', 'TRIM_3', 'TRIM_0', 'TRIM_2']
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;The result of the reduction is the unit square:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: unit_square = D.apply(D.reduction())
sage: unit_square
Double Square Tile
  w0 =     w4 =
  w1 = 3   w5 = 1
  w2 =     w6 =
  w3 = 2   w7 = 0
(|w0|, |w1|, |w2|, |w3|) = (0, 1, 0, 1)
(d0, d1, d2, d3)         = (2, 0, 2, 0)
(n0, n1, n2, n3)         = (0, NaN, 0, NaN)
sage: unit_square.plot()
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/unit_square.png&quot;&gt;&lt;img alt=&quot;/~labbe/Files/2014/unit_square.png&quot; src=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/unit_square.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;Since SWAP and TRIM are invertible operations, we can recover every double
square from the unit square:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: E = unit_square.extend(2).extend(0).extend(3).extend(1).swap(1).extend(3).extend(1).swap(1)
sage: D == E
True
&lt;/pre&gt;&lt;/div&gt;



&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;christoffel-graphs&quot;&gt;
&lt;h1&gt;Christoffel graphs&lt;/h1&gt;
&lt;p&gt;This module was developped for the article on a d-dimensional extension of
Christoffel Words written with Christophe Reutenauer &lt;a class=&quot;citation-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/08/slabbe-0.1.spkg-released#lr2014&quot; id=&quot;id5&quot;&gt;[LR2014]&lt;/a&gt;.&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: G = ChristoffelGraph((6,10,15))
sage: G
Christoffel set of edges for normal vector v=(6, 10, 15)
sage: tikz = G.tikz_kernel()
sage: view(tikz, tightpage=True)
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/christoffelgraph6_10_15.png&quot;&gt;&lt;img alt=&quot;/~labbe/Files/2014/christoffelgraph6_10_15.png&quot; src=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/christoffelgraph6_10_15.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;bispecial-extension-types&quot;&gt;
&lt;h1&gt;Bispecial extension types&lt;/h1&gt;
&lt;p&gt;This module was developped for the article on the factor complexity of
infinite sequences genereated by substitutions written with Valérie Berthé
&lt;a class=&quot;citation-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/08/slabbe-0.1.spkg-released#bl2014&quot; id=&quot;id7&quot;&gt;[BL2014]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The extension type of an ordinary bispecial factor:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: L = [(1,3), (2,3), (3,1), (3,2), (3,3)]
sage: E = ExtensionType1to1(L, alphabet=(1,2,3))
sage: E
  E(w)   1   2   3
   1             X
   2             X
   3     X   X   X
 m(w)=0, ordinary
sage: E.is_ordinaire()
True
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Creation of a strong-weak pair of bispecial words from a neutral
&lt;strong&gt;not ordinaire&lt;/strong&gt; word:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: p23 = WordMorphism({1:[1,2,3],2:[2,3],3:[3]})
sage: e = ExtensionType1to1([(1,2),(2,3),(3,1),(3,2),(3,3)], [1,2,3])
sage: e
  E(w)   1   2   3
   1         X
   2             X
   3     X   X   X
 m(w)=0, not ord.
sage: A,B = e.apply(p23)
sage: A
  E(3w)   1   2   3
    1
    2         X   X
    3     X   X   X
 m(w)=1, not ord.
sage: B
  E(23w)   1   2   3
    1          X
    2
    3              X
 m(w)=-1, not ord.
&lt;/pre&gt;&lt;/div&gt;



&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;fast-kolakoski-word&quot;&gt;
&lt;h1&gt;Fast Kolakoski word&lt;/h1&gt;
&lt;p&gt;This module was written for fun. It uses cython implementation inspired from
the 10 lines of C code written by Dominique Bernardi and shared during Sage
Days 28 in Orsay, France, in January 2011.&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: K = KolakoskiWord()
sage: K
word: 1221121221221121122121121221121121221221...
sage: %time K[10^5]
CPU times: user 1.56 ms, sys: 7 µs, total: 1.57 ms
Wall time: 1.57 ms
1
sage: %time K[10^6]
CPU times: user 15.8 ms, sys: 30 µs, total: 15.8 ms
Wall time: 15.9 ms
2
sage: %time K[10^8]
CPU times: user 1.58 s, sys: 2.28 ms, total: 1.58 s
Wall time: 1.59 s
1
sage: %time K[10^9]
CPU times: user 15.8 s, sys: 12.4 ms, total: 15.9 s
Wall time: 15.9 s
1
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;This is much faster than the Python implementation available in Sage:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: K = words.KolakoskiWord()
sage: %time K[10^5]
CPU times: user 779 ms, sys: 25.9 ms, total: 805 ms
Wall time: 802 ms
1
&lt;/pre&gt;&lt;/div&gt;



&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;references&quot;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;bgl2012&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/08/slabbe-0.1.spkg-released#id3&quot;&gt;[BGL2012]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;A. Blondin Massé, A. Garon, S. Labbé, Combinatorial properties
of double square tiles, &lt;em&gt;Theoretical Computer Science&lt;/em&gt; 502 (2013) 98-117.
&lt;a class=&quot;reference external&quot; href=&quot;http://dx.doi.org/10.1016/j.tcs.2012.10.040&quot;&gt;doi:10.1016/j.tcs.2012.10.040&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;lr2014&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/08/slabbe-0.1.spkg-released#id5&quot;&gt;[LR2014]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Labbé, Sébastien, and Christophe Reutenauer. A d-dimensional Extension of
Christoffel Words. &lt;a class=&quot;reference external&quot; href=&quot;http://arxiv.org/abs/1404.4021&quot;&gt;arXiv:1404.4021&lt;/a&gt; (April 15, 2014).&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;bl2014&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/08/slabbe-0.1.spkg-released#id7&quot;&gt;[BL2014]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;V. Berthé, S. Labbé, Factor Complexity of S-adic sequences
generated by the Arnoux-Rauzy-Poincaré Algorithm. &lt;a class=&quot;reference external&quot; href=&quot;http://arxiv.org/abs/1404.4189&quot;&gt;arXiv:1404.4189&lt;/a&gt; (April, 2014).&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2014-08-27T16:53:00+00:00</dc:date>
	<dc:creator>Sébastien Labbé</dc:creator>
</item>
<item rdf:about="http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/08/releasing-slabbe-my-own-sage-package">
	<title>Sébastien Labbé: Releasing slabbe, my own Sage package</title>
	<link>http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2014/08/releasing-slabbe-my-own-sage-package</link>
	<content:encoded>&lt;div class=&quot;document&quot;&gt;
&lt;p&gt;Since two years I wrote thousands of line of private code for my own research.
Each module having between 500 and 2000 lines of code. The code which is the
more clean corresponds to code written in conjunction with research articles.
People who know me know that I systematically put docstrings and doctests in my
code to facilitate reuse of the code by myself, but also in the idea of sharing
it and eventually making it public.&lt;/p&gt;
&lt;p&gt;I did not made that code into Sage because it was not mature enough. Also, when
I tried to make a complete module go into Sage (see &lt;a class=&quot;reference external&quot; href=&quot;http://trac.sagemath.org/ticket/13069&quot;&gt;#13069&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://trac.sagemath.org/ticket/13346&quot;&gt;#13346&lt;/a&gt;),
then the monstrous never evolving &lt;a class=&quot;reference external&quot; href=&quot;http://trac.sagemath.org/ticket/12224&quot;&gt;#12224&lt;/a&gt; became a dependency of the first
and the second was unofficially reviewed asking me to split it into smaller
chunks to make the review process easier. I never did it because I spent
already too much time on it (making a module 100% doctested takes time). Also,
the module was corresponding to a published article and I wanted to leave it
just like that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Getting new modules into Sage is hard&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In general, the introduction of a complete new module into Sage is hard
especially for beginners. Here are two examples I feel responsible for:
&lt;a class=&quot;reference external&quot; href=&quot;http://trac.sagemath.org/ticket/10519&quot;&gt;#10519&lt;/a&gt; is 4 years old and counting, the author &lt;a class=&quot;reference external&quot; href=&quot;http://trac.sagemath.org/ticket/10519#comment:67&quot;&gt;has a new work and
responsabilities&lt;/a&gt;; in &lt;a class=&quot;reference external&quot; href=&quot;http://trac.sagemath.org/ticket/12996&quot;&gt;#12996&lt;/a&gt;, the author was decouraged by the amount of
work given by the reviewers. There is a lot of things a beginner has to
consider to obtain a positive review. And even for a more advanced developper,
other difficulties arise. Indeed, a module introduces a lot of new functions
and it may also introduce a lot of new bugs... and Sage developpers are
sometimes reluctant to give it a positive review. And if it finally gets a
positive review, it is not available easily to normal users of Sage until the
next release of Sage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Releasing my own Sage package&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Still I felt the need around me to make my code public. But how? There are
people (a few of course but I know there are) who are interested in reproducing
computations and images done in my articles. This is why I came to the idea of
releasing my own Sage package containing my public research code. This way both
developpers and colleagues that are user of Sage but not developpers will be
able to install and use my code. This will make people more aware if there is
something useful in a module for them. And if one day, somebody tells me: &amp;quot;this
should be in Sage&amp;quot;, then I will be able to say : &amp;quot;I agree! Do you want to
review it?&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old style Sage package&lt;/strong&gt; vs &lt;strong&gt;New sytle git Sage package&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Then I had to chose between the old and the new style for Sage packages. I did
not like the new style, because&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;I wanted the history of my package to be independant of the history of Sage,&lt;/li&gt;
&lt;li&gt;I wanted it to be as easy to install as &lt;tt class=&quot;docutils literal&quot;&gt;sage &lt;span class=&quot;pre&quot;&gt;-i&lt;/span&gt; slabbe&lt;/tt&gt;,&lt;/li&gt;
&lt;li&gt;I wanted it to work on any recent enough version of Sage,&lt;/li&gt;
&lt;li&gt;I wanted to be able to release a new version, give it to a colleague who
could install it right away without changing its own Sage (i.e., updating
the checksums).&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Therefore, I choose the old style. I based my work on other optional Sage
packages, namely the &lt;a class=&quot;reference external&quot; href=&quot;http://sagemanifolds.obspm.fr/&quot;&gt;SageManifolds&lt;/a&gt; spkg and the &lt;a class=&quot;reference external&quot; href=&quot;http://www.risc.jku.at/research/combinat/risc/software/ore_algebra/index.php&quot;&gt;ore_algebra&lt;/a&gt; spkg.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content of the initial version&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The initial version of the slabbe Sage package has modules concerning four
topics: &lt;em&gt;Digital geometry&lt;/em&gt;, &lt;em&gt;Combinatorics on words&lt;/em&gt;, &lt;em&gt;Combinatorics&lt;/em&gt; and
&lt;em&gt;Python class inheritance&lt;/em&gt;.&lt;/p&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/slabbe_content.png&quot;&gt;&lt;img alt=&quot;/~labbe/Files/2014/slabbe_content.png&quot; src=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Files/2014/slabbe_content.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;For installation or for release notes of the initial version of the spkg,
consult the slabbe spkg section of the &lt;a class=&quot;reference external&quot; href=&quot;http://www.liafa.univ-paris-diderot.fr/~labbe/Sage&quot;&gt;Sage&lt;/a&gt; page of this website.&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2014-08-27T16:48:00+00:00</dc:date>
	<dc:creator>Sébastien Labbé</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-6365588202025292315.post-5041553718036647954">
	<title>William Stein: What is SageMathCloud: let's clear some things up</title>
	<link>http://sagemath.blogspot.com/2014/08/what-is-sagemathcloud-lets-clear-some.html</link>
	<content:encoded>&lt;span&gt;[PDF version of this blog post]&lt;/span&gt;&lt;br /&gt;&lt;blockquote&gt;&lt;i&gt;&quot;You will have to close source and commercialize Sage. It's inevitable.&quot;&lt;/i&gt; -- Michael Monagan, cofounder of Maple, told me this in 2006.&lt;/blockquote&gt;&lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud (SMC) &lt;/a&gt;is a website that I first launched in April 2013, through which you can use Sage and all other open source math software online, edit Latex documents, IPython notebooks, Sage worksheets, track your todo items, and many other types of documents. You can write, compile, and run code in most programming languages, and use a color command line terminal. There is realtime collaboration on everything through shared projects, terminals, etc. Each project comes with a default quota of 5GB disk space and 8GB of RAM.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC&lt;/a&gt; is fun to use, pretty to look at, frequently backs up your work in many ways, is fault tolerant, encourages collaboration, and provides a web-based way to use standard command-line tools.&lt;br /&gt;&lt;br /&gt;&lt;h3 id=&quot;the-relationship-with-the-sagemath-software&quot;&gt;The Relationship with the &lt;a href=&quot;http://sagemath.org/&quot;&gt;SageMath Software&lt;/a&gt;&lt;/h3&gt;The goal of the SageMath software project, which I founded in 2005, is to create a viable free open source alternative to Magma, Mathematica, Maple, and Matlab. &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC&lt;/a&gt; is &lt;strong&gt;not&lt;/strong&gt; mathematics software -- instead, &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC &lt;/a&gt;is best viewed by analogy as a browser-based version of a Linux desktop environment like KDE or Gnome. The vast majority of the code we write for &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC&lt;/a&gt; involves text editor issues (problems similar to those confronted by Emacs or Vim), personal information management, support for editing LaTeX documents, terminals, file management, etc. There is almost no mathematics involved at all.&lt;br /&gt;&lt;br /&gt;That said, the main software &lt;em&gt;I&lt;/em&gt; use is Sage, so of course support for Sage is a primary focus. &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC&lt;/a&gt; is a software environment that is being optimized for its users, who are mostly college students and teachers who use Sage (or Python) in conjunction with their courses. A big motivation for the existence of &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC&lt;/a&gt; is to make Sage much more accessible, since growth of Sage has stagnated since 2011, with the number one show-stopper obstruction being the difficulty of students installing Sage.&lt;br /&gt;&lt;h4 id=&quot;sage-is-failing&quot;&gt;Sage is Failing&lt;/h4&gt;Measured by the mission statement, Sage has overall failed. The core goal is to provide similar functionality to Magma (and the other Ma's) across the board, and the Sage development model and community has failed to do this across the board, since after 9 years, based on our current progress, we will never get there. There are numerous core areas of research mathematics that I'm personally familiar with (in arithmetic geometry), where Sage has barely moved in years and Sage does only a few percent of what Magma does. Unless there is a viable plan for the areas to &lt;strong&gt;all&lt;/strong&gt; be systematically addressed in a reasonable timeframe, not just with arithmetic geometry in Magma, but with everything in Mathematica, Maple., etc, we are definitely failing at the main goal I have for the Sage math software project.&lt;br /&gt;&lt;br /&gt;I have absolutely no doubt that money combined with good planning and management would make it possible to achieve our mission statement. I've seen this hundreds of times over at a small scale at Sage Days workshops during the last decade. And let's not forget that with very substantial funding, Linux now provides a viable free open source alternative to Microsoft Windows. Just providing Sage developers with travel expenses (and 0 salary) is enough to get a huge amount done, when possible. But all my attempts with foundations and other clients to get any &lt;em&gt;significant&lt;/em&gt; funding, at even the level of 1% of the funding that Mathematica gets each year, has failed. For the life of the Sage project, we've never got more than maybe 0.1% of what Mathematica gets in revenue. It's just a fact that the mathematics community provides Mathematica $50+ million a year, enough to fund over 600 fulltime positions, and they won't provide enough to fund one single Sage developer fulltime.&lt;br /&gt;&lt;br /&gt;But the Sage mission statement remains, and even if everybody else in the world gives up on it, &lt;strong&gt;I HAVE NOT&lt;/strong&gt;. &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC &lt;/a&gt;is my last ditch strategy to provide resources and visibility so we can succeed at this goal and give the world a viable free open source alternative to the Ma's. I wish I were writing interesting mathematical software, but I'm not, because I'm sucking it up and playing the long game.&lt;br /&gt;&lt;br /&gt;&lt;h3 id=&quot;the-users-of-smc&quot;&gt;The Users of &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC&lt;/a&gt;&lt;/h3&gt;During the last academic year (e.g., April 2014) there were about 20K &quot;monthly active users&quot; (as defined by Google Analytics), 6K weekly active users, and usually around 300 simultaneous connected users. The summer months have been slower, due to less teaching.&lt;br /&gt;&lt;br /&gt;Numerically most users are undergraduate students in courses, who are asked to use &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC&lt;/a&gt; in conjunction with a course. There's also quite a bit of usage of &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC&lt;/a&gt; by people doing research in mathematics, statistics, economics, etc. -- pretty much all computational sciences. Very roughly, people create Sage worksheets, IPython notebooks, and Latex documents in somewhat equal proportions.&lt;br /&gt;&lt;h3 id=&quot;what-smc-runs-on&quot;&gt;What &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC&lt;/a&gt; runs on&lt;/h3&gt;Technically, SMC is a multi-datacenter web application without specific dependencies on particular cloud provider functionality. In particular, we use the Cassandra database, and custom backend services written in Node.js (about 15,000 lines of backend code). We also use Amazon's Route 53 service for geographically aware DNS. There are two racks containing dedicated computers on opposites sides of campus at University of Washington with 19 total machines, each with about 1TB SSD, 4TB+ HDD, and 96GB RAM. We also have dozens of VM's running at 2 Google data centers to the east.&lt;br /&gt;&lt;br /&gt;A substantial fraction of the work in implementing &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC&lt;/a&gt; has been in designing and implementing (and reimplementing many times, in response to real usage) a robust replicated backend infrastructure for projects, with regular snapshots and automatic failover across data centers. As I write this, users have created 66677 projects; each project is a self-contained Linux account whose files are replicated across several data centers.&lt;br /&gt;&lt;h3 id=&quot;the-source-code-of-smc&quot;&gt;The Source Code of &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC&lt;/a&gt;&lt;/h3&gt;The underlying source of SMC, both the backend server and frontend client, is mostly written in CoffeeScript. The frontend (which is nearly 20,000 lines of code) is implemented using the &quot;progressive refinement&quot; approach to HTML5/CSS/Javascript web development. We do not use any Javascript single page app frameworks, though we make heavy use of Bootstrap3 and jQuery. All of the library dependencies of SMC, e.g., CodeMirror, Bootstrap, jQuery, etc. for SMC are licensed under very permissive BSD/MIT, etc. libraries. In particular, absolutely nothing in the Javascript software stack is GPL or AGPL licensed. The plan is that any SMC source code that will be open sourced will be released under the BSD license. Some of the SMC source code is not publicly available, and is owned by University of Washington. But other code, e.g., the realtime sync code, is already available.&lt;br /&gt;Some of the functionality of SMC, for example Sage worksheets, communicate with a separate process via a TCP connection. That separate process is in some cases a GPL'd program such as Sage, R, or Octave, so the viral nature of the GPL does not apply to SMC. Also, of course the virtual machines are running the Linux operating system, which is mostly GPL licensed. (There is absolutely no AGPL-licensed code anywhere in the picture.)&lt;br /&gt;&lt;br /&gt;Note that since none of the SMC server and client code links (even at an interpreter level) with any GPL'd software, that code can be legally distributed under any license (e.g., from BSD to commercial).&lt;br /&gt;Also we plan to create a fully open source version of the Sage worksheet server part of SMC for inclusion with Sage. This is not our top priority, since there are several absolutely critical tasks that still must be finished first on SMC, e.g., basic course management.&lt;br /&gt;&lt;h3 id=&quot;the-smc-business-model&quot;&gt;The &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SMC&lt;/a&gt; Business Model&lt;/h3&gt;The University of Washington Center for Commercialization (C4C) has been very involved and supportive since the start of the projects. There are no financial investors or separate company; instead, funding comes from UW, some unspent grant funds that were about to expire, and a substantial Google &quot;Academic Education Grant&quot; ($60K). Our first customer is the &quot;US Army Engineer Research and Development Center&quot;, which just started a support/license agreement to run their own SMC internally. We don't currently offer a SaaS product for sale yet -- the options for what can be sold by UW are constrained, since UW is a not-for-profit state university. Currently users receive enhancements to their projects (e.g., increased RAM or disk space) in exchange for explaining to me the interesting research or teaching they are doing with &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The longterm plan is to start a separate for-profit company if we build a sufficient customer base. If this company is successful, it would also support fulltime development of Sage (e.g., via teaching buyouts for faculty, support of students, etc.), similar to how Magma (and Mathematica, etc.) development is funded.&lt;br /&gt;&lt;br /&gt;In conclusion, in response to Michael Monagan, you are wrong. And you are right.</content:encoded>
	<dc:date>2014-08-27T07:55:38+00:00</dc:date>
	<dc:creator>William Stein</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-6365588202025292315.post-2620037689426510230">
	<title>William Stein: You don't really think that Sage has failed, do you?</title>
	<link>http://sagemath.blogspot.com/2014/08/you-dont-really-think-that-sage-has.html</link>
	<content:encoded>&lt;div&gt;I just received an email from a postdoc in Europe, and very longtime contributor to the&lt;a href=&quot;http://sagemath.org/&quot; target=&quot;_blank&quot;&gt; Sage project&lt;/a&gt;. &amp;nbsp;He's asking for a letter of recommendation, since he has to leave the world of mathematical software development (after a decade of training and experience), so that he can take a job at hedge fund. &amp;nbsp;He ends his request with the question:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;gt; P.S. You don't _really_ think that Sage has failed, do you?&lt;br /&gt;&lt;br /&gt;After almost exactly 10 years of working on the &lt;a href=&quot;http://sagemath.org/&quot; target=&quot;_blank&quot;&gt;Sage project&lt;/a&gt;, I absolutely do think it has failed to accomplish the stated goal of the mission statement: &quot;&lt;em&gt;Create a viable free open source alternative to Magma, Maple, Mathematica and Matlab&lt;/em&gt;&lt;span&gt;.&quot;&lt;/span&gt;. &amp;nbsp; &amp;nbsp; When it was only a few years into the project, it was really hard to evaluate progress against such a lofty mission statement. &amp;nbsp;However, after 10 years, it's clear to me that not only have we not got there, we are not going to ever get there before I retire. &amp;nbsp; And that's definitely a failure. &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's a very rough quote I overheard at lunch today at &lt;a href=&quot;http://wiki.sagemath.org/days61&quot; target=&quot;_blank&quot;&gt;Sage Days 61&lt;/a&gt;, from John Voight, who wrote much quaternion algebra code in &lt;a href=&quot;http://magma.maths.usyd.edu.au/magma/&quot; target=&quot;_blank&quot;&gt;Magma&lt;/a&gt;: &quot;I'm making a list of what is missing from Sage that Magma has for working with quaternion algebras. &amp;nbsp;However, it's so incredibly daunting, that I don't want to put in everything. &amp;nbsp;I've been working on Magma's quaternion algebras for over 10 years, as have several other people. &amp;nbsp;It's truly daunting how much functionality Magma has compared to Sage.&quot;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The only possible way Sage will not fail at the stated mission is if I can get several million dollars a year in money to support developers to work fulltime on implementing interesting core mathematical algorithms. &amp;nbsp;This is something that Magma has had for over 20 years, and that Maple, Matlab, and Mathematica also have. &amp;nbsp; That I don't have such funding is probably why you are about to take a job at a hedge fund. &amp;nbsp; &amp;nbsp;If I had the money, I would &lt;b&gt;&lt;i&gt;try&lt;/i&gt;&lt;/b&gt; to hire a few of the absolute best people (rather than a bunch of amateurs), people like you, Robert Bradshaw, etc. -- we know who is good. (And clearly I mean serious salaries, not grad student wages!)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So yes, I think the current approach to Sage has failed. &amp;nbsp; &amp;nbsp;I am going to try another approach, namely &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt;. &amp;nbsp;If it works, maybe the world will get a free open source alternative to Magma, Mathematica, etc. &amp;nbsp;Otherwise, maybe the world never ever will. &amp;nbsp; &amp;nbsp; &amp;nbsp;If you care like I do about having such a thing, and you're teaching course, or whatever, maybe try using &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt;. &amp;nbsp; If enough people use &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt; for college teaching, then maybe a business model will emerge, and Sage will get proper funding. &amp;nbsp;&amp;nbsp;&lt;/div&gt;</content:encoded>
	<dc:date>2014-08-27T07:52:43+00:00</dc:date>
	<dc:creator>William Stein</dc:creator>
</item>
<item rdf:about="http://drvinceknight.github.io/unpeudemath/code/2014/08/27/sneak-preview-of-game-theory-in-sage-2-of-3/">
	<title>Vince Knight: A Sneak Preview of Game Theory in Sage (2/3): Matching Games</title>
	<link>http://drvinceknight.github.io/unpeudemath/code/2014/08/27/sneak-preview-of-game-theory-in-sage-2-of-3/</link>
	<content:encoded>&lt;p&gt;In my previous post &lt;a href=&quot;http://vincent-knight.com/unpeudemath/code/2014/08/01/a-sneak-preview-of-game-theory-in-sage-1-of-3/&quot;&gt;here&lt;/a&gt; I described some of the &lt;a href=&quot;http://sagemath.org/&quot;&gt;Sage&lt;/a&gt; development that &lt;a href=&quot;https://plus.google.com/+JamesCampbell95/posts&quot;&gt;+James Campbell&lt;/a&gt; and I spent a lot of time this Summer working on.
In that post I described some work that has subsequently been accepted and included in the latest release of Sage (here’s the latest &lt;a href=&quot;http://www.sagemath.org/mirror/src/changelogs/sage-6.3.txt&quot;&gt;changlog&lt;/a&gt;): code to calculate the Shapley value.&lt;/p&gt;

&lt;p&gt;In this post I’ll talk about the second of 3 tickets that James and I worked on: looking at Matching games.
&lt;strong&gt;This has not actually been reviewed yet so please do help us get this code in to Sage by taking a look at the ticket: &lt;a href=&quot;http://trac.sagemath.org/ticket/16331&quot;&gt;16331&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a matching game?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the best explanations of a matching game (also called the stable marriage problem) can be found in &lt;a href=&quot;https://www.youtube.com/watch?v=w1leqkpDaRw&quot;&gt;this video&lt;/a&gt;.
That video really is awesome but it might be a bit long (it’s 25 minutes) so this very &lt;a href=&quot;http://youtu.be/ZMK3qW4ZHqI&quot;&gt;short video&lt;/a&gt; I threw together for a class I teach might be of interest (it is no where near as good as the previous one but it’s 3 minutes long).&lt;/p&gt;

&lt;p&gt;Basically a matching game attempts to create links between two groups of people (referred to as suitors and reviewers) in such a way as no one wants to break their link:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/base_matching_game.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the above picture we see the &lt;em&gt;preferences&lt;/em&gt; of the suitors and the reviewers.
So \(c\), prefers \(B\) to \(A\), and \(A\) to \(C\).&lt;/p&gt;

&lt;p&gt;Here is the actual definition of a stable matching that I give my students:&lt;/p&gt;

&lt;p&gt;A matching game of size \(N\) is defined by two disjoint sets \(S\) and \(R\) or suitors and reviewers of size \(N\).
Associated to each element of \(S\) and \(R\) is a preference list:&lt;/p&gt;



&lt;p&gt;A matching \(M\) is a any bijection between \(S\) and \(R\). If \(s\in S\) and \(r\in R\) are matched by \(M\) we denote:&lt;/p&gt;



&lt;p&gt;The above image defines a matching game, one possible matching could be given below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/unstable_matching.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s immediate to note however that \(B\) and \(c\) prefer each other to their current matching: so the above matching is unstable.&lt;/strong&gt;
In that example \((B,c)\) is called a ‘blocking pair’.&lt;/p&gt;

&lt;p&gt;Luckily Gale and Shapley obtained an algorithm that guarantees a stable matching and this is what James and I put together in to Sage.&lt;/p&gt;

&lt;p&gt;First, let’s define a matching game:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suitr_pref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;               &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;               &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reviewr_pref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                 &lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                 &lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatchingGame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suitr_pref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reviewr_pref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see that python dictionaries are used for the functions \(f\) and \(g\) described above (the suitor preferences).&lt;/p&gt;

&lt;p&gt;If you tab complete after typing &lt;code&gt;m.&lt;/code&gt; you can see some of the methods and attributes associated with the &lt;code&gt;MatchingGame&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_reviewer&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bi_partite&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rename&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reviewers&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_suitor&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_name&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suitors&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I won’t go in to much of the details of that year but you can get some help on anyone of those by typing &lt;code&gt;?&lt;/code&gt; after one of them (below you can see some of the output):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;instancemethod&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vince&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game_theory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matching_game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Definition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Docstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;Computes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matching&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shapley&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s give that method a spin (as you can see it’ll use the Gale-Shapley algorithm).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We see that a matching has been obtained.
You can see the corresponding matching here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/stable_matching.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another nice method that we implemented is to use the awesome graph theory stuff that’s in Sage so you can obtain the corresponding bi-partite graph:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bi_partite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Bipartite&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see the corresponding plot here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vincent-knight.com/unpeudemath/assets/images/graph_stable_matching.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of the above has not been reviewed yet so if you do have any comments they’d be very gratefully received.
If you actually went over to &lt;a href=&quot;http://trac.sagemath.org/ticket/16331&quot;&gt;trac&lt;/a&gt; and took a look at it there that would be great but otherwise just commenting here would be awesome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is the second in a series of 3 posts that I’ll get around to writing, in the next one I’ll cover ticket 16333: Normal Form Game. This is the biggest contribution by James as it involved interfacing with two other packages and also coding up a bespoke support enumeration algorithm.&lt;/strong&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2014-08-27T00:00:00+00:00</dc:date>
</item>

</rdf:RDF>
