<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>Planet Sage</title>
	<link rel="self" href="http://planet.sagemath.org/atom.xml"/>
	<link href="http://planet.sagemath.org"/>
	<id>http://planet.sagemath.org/atom.xml</id>
	<updated>2015-09-14T22:30:13+00:00</updated>
	<generator uri="http://www.planetplanet.org/">Planet/2.0 +http://www.planetplanet.org</generator>

	<entry>
		<title type="html"></title>
		<link href="http://sagemath.blogspot.com/2015/09/funding-open-source-mathematical.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-7130292345452113753</id>
		<updated>2015-09-10T19:38:38+00:00</updated>
		<content type="html">&lt;h1 id=&quot;funding-open-source-mathematical-software-in-the-united-states&quot;&gt;Funding Open Source Mathematical Software in the United States&lt;/h1&gt;I do &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; know how to get funding for open source mathematical software in the United States. However, I'm trying.&lt;br /&gt;&lt;h2 id=&quot;why-because-sage-is-hobbling-along&quot;&gt;Why: Because Sage is Hobbling Along&lt;/h2&gt;Despite what we might think in our Sage-developer bubble, &lt;a href=&quot;http://sagemath.org/&quot;&gt;Sage&lt;/a&gt; is hobbling along, and without an infusion of financial support very soon, I think the project is going to fail in the next few years. I have access to Google analytics data for &lt;a href=&quot;http://sagemath.org/&quot;&gt;sagemath.org&lt;/a&gt; since 2007, and there has been no growth &amp;nbsp;in active users of the website since 2011:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-zaHSSBsEAfU/VfI-Q55ar6I/AAAAAAABV-k/STtsAScT1YM/s1600/Screen%2BShot%2B2015-09-10%2Bat%2B7.28.14%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;187&quot; src=&quot;http://1.bp.blogspot.com/-zaHSSBsEAfU/VfI-Q55ar6I/AAAAAAABV-k/STtsAScT1YM/s400/Screen%2BShot%2B2015-09-10%2Bat%2B7.28.14%2BPM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h2 id=&quot;something-that-is-missing&quot;&gt;Something that is Missing&lt;/h2&gt;The worse part of all for me, after ten years, is seeing things like &lt;a href=&quot;https://groups.google.com/forum/#!topic/sage-devel/cAFdRb-WKqM&quot;&gt;this email&lt;/a&gt; today from John Palmieri, where he talks about writing &lt;em&gt;slow&lt;/em&gt; but interesting algebraic topology code, and needing help from somebody who knows Cython to actually make his code fast.&lt;br /&gt;&lt;br /&gt;I know from my three visits to the Magma group in Sydney that such assistance is &lt;em&gt;precisely&lt;/em&gt; what having real financial support can provide. Such money makes it possible to have fulltime people who know the tools and how to optimize them well, and they work on this sort of speedup and integration -- this &quot;devil is in the details&quot; work -- for each major contribution (they are sort of like a highly skilled version of a journal copy editor and referee all in one). Doing this makes a massive difference, but also costs on the order of $1 million / year to have any real impact. 1 million is probably the Magma budget to support around 10 people and periodic visitors, and of course like 1% of the budget of Matlab/Mathematica. Magma has this support partly because Magma is closed source, and maintains tight control on who may use it.&lt;br /&gt;&lt;h2 id=&quot;searching-for-a-funding-model&quot;&gt;Searching for a Funding Model&lt;/h2&gt;Sage is open source and freely available to all, so it is of potential huge value to the community by being owned by everybody and changeable. However, those who fund Magma (either directly or indirectly) haven't funded Sage at the same level for some reason. I can't make Sage closed source and copy that very successful funding model. I've tried everything I can think of given the time and resources I have, and the only model left that seems able to support open source is having a company that does &lt;strong&gt;something else&lt;/strong&gt; well and makes money, then using some of the profit to fund open source (&lt;a href=&quot;http://www.neowin.net/news/intel-overtakes-red-hat-to-become-top-linux-kernel-contributor&quot;&gt;Intel is the biggest contributor to Linux&lt;/a&gt;).&lt;br /&gt;&lt;h2 id=&quot;sagemathcloud&quot;&gt;SageMath, Inc.&lt;/h2&gt;Since I failed to find any companies that passionately care about Sage like Intel/Google/RedHat/etc. care about Linux, I started one. I've been working on &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud&lt;/a&gt; extremely hard for over 3 years now, with the hopes that at least it could be a way to fund Sage development.</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2015-09-14T22:30:05+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">The Simons Foundation and Open Source Software</title>
		<link href="http://sagemath.blogspot.com/2015/09/the-simons-foundation-and-open-source.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-5753647510986290314</id>
		<updated>2015-09-05T16:47:59+00:00</updated>
		<content type="html">&lt;h2 id=&quot;jim-simons&quot;&gt;Jim Simons&lt;/h2&gt;Jim Simons is a mathematician who left academia to start a hedge fund that beat the stock market. He contributes back to the mathematical community through the &lt;a href=&quot;https://www.simonsfoundation.org/&quot;&gt;Simons Foundation&lt;/a&gt;, which provides an enormous amount of support to mathematicians and physicists, and has many outreach programs.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://sagemath.org/&quot;&gt;SageMath&lt;/a&gt; is a large software package for mathematics that I started in 2005 with the goal of &lt;strong&gt;creating a free open source viable alternative to Magma, Mathematica, Maple, and Matlab&lt;/strong&gt;. People frequently tell me I should approach the Simons Foundation for funding to support Sage. &lt;a href=&quot;https://news.ycombinator.com/item?id=10036779&quot;&gt;For example&lt;/a&gt;:&lt;br /&gt;&lt;blockquote&gt;Jim Simons, after retiring from Renaissance Technologies with a cool 15 billion, has spent the last 10 years giving grants to people in the pure sciences. He's a true academic at heart [...] Anyways, he's very fond of academics and gives MacArthur-esque grants, especially to people who want to change the way mathematics is taught. Approach his fund. &lt;strong&gt;I'm 100% sure he'll give you a grant on the spot.&lt;/strong&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;the-national-science-foundation&quot;&gt;The National Science Foundation&lt;/h2&gt;Last month the http://sagemath.org website had 45,114 monthly active users. However, as far as I know, there is no NSF funding for Sage in the United States right now, and development is mostly done on a shoestring in spare time. We have recently failed to get several NSF grants for Sage, despite there being Sage-related grants in the past from NSF. I know that funding is random, and I will keep trying. I have two proposals for Sage funding submitted to NSF right now.&lt;br /&gt;&lt;h2 id=&quot;several-million-dollars-per-year&quot;&gt;Several million dollars per year&lt;/h2&gt;I was incredibly excited in 2012 when David Eisenbud invited me to a meeting at the Simons Foundation headquarters in New York City with the following official description of their goals:&lt;br /&gt;&lt;blockquote&gt;The purpose of this round table is to investigate what sorts of support would facilitate the &lt;strong&gt;development, deployment and maintenance of open-source software used for fundamental research in mathematics&lt;/strong&gt;, statistics and theoretical physics. We hope that this group will consider what support is currently available, and whether there are projects that the Simons Foundation could undertake that would add significantly to the usefulness of computational tools for basic research.&amp;nbsp;Modes of support that duplicate or marginally improve on support that is already available through the universities or the federal government will not be of interest to the foundation. Questions of software that is primarily educational in nature may be useful as a comparison, but are not of primary interest. &amp;nbsp;The scale of foundation support will depend upon what is needed and on the potential scientific benefit, but could be substantial, perhaps up to &lt;strong&gt;several million dollars per year&lt;/strong&gt;.&lt;/blockquote&gt;&lt;blockquote&gt;Current modes of funding for research software in mathematics, statistics and physics differ very significantly. There may be correspondingly great differences in what the foundation might accomplish in these areas.&amp;nbsp;We hope that the round table members will be able to help the foundation understand the current landscape &amp;nbsp;(what are the needs, what is available, whether it is useful, how it is supported) both in general and across the different disciplines, and will help us think creatively about new possibilities.&lt;/blockquote&gt;I flew across country to this the meeting, where we spent the day discussing ways in which &quot;several million dollars per year&quot; could revolutionize &quot;the development, deployment and maintenance of open-source software used for fundamental research in mathematics...&quot;.&lt;br /&gt;&lt;br /&gt;In the afternoon Jim Simons arrived, and shook our hands. He then lectured us with some anecdotes, didn't listen to what we had to say, and didn't seem to understand open source software. I was frustrated watching how he treated the other participants, so I didn't say a word to him. I feel bad for failing to express myself.&lt;br /&gt;&lt;h2 id=&quot;the-decision&quot;&gt;The Decision&lt;/h2&gt;In the backroom during a coffee break, David Eisenbud told me that it had already been decided that they were going to just fund Magma by &lt;a href=&quot;https://news.ycombinator.com/item?id=10036779&quot;&gt;making it freely available to all academics in North America&lt;/a&gt;. WTF? I explained to David that Magma is closed source and that not only does funding Magma not help open source software like Sage, it actively hurts it. A huge motivation for people to contribute to Sage is that they do not have access to Magma (which was very expensive).&lt;br /&gt;&lt;br /&gt;I wandered out of that meeting in a daze; things had gone so differently than I had expected. How could a goal to &quot;facilitate the development, deployment and maintenance of open-source software... perhaps up to several million dollars per year&quot; result in a decision that would make things possibly much worse for open source software?&lt;br /&gt;&lt;br /&gt;That day I started thinking about creating what would become &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud&lt;/a&gt;. The engineering work needed to make Sage accessible to a wider audience wasn't going to happen without substantial funding (I had put years of my life into this problem but it's really hard, and I couldn't do it by myself). At least I could try to make it so people don't have to install Sage (which is very difficult). I also hoped a commercial entity could provide a more sustainable source of funding for open source mathematics software. Three years later, the net result of me starting SageMathCloud and spending almost every waking moment on it is that I've gone from having many grants to not, and SageMathCloud itself is losing money. But I remain cautiously optimistic and forge on...&lt;br /&gt;&lt;h2 id=&quot;we-will-not-fund-sage&quot;&gt;We will not fund Sage&lt;/h2&gt;Prompted by numerous messages recently from people, I wrote to David Eisenbud this week. He suggested I write to Yuri Schinkel, who is the current director of the Simons Foundation:&lt;br /&gt;&lt;blockquote&gt;Dear William,&lt;/blockquote&gt;&lt;blockquote&gt;Before I joined the foundation, there was a meeting conducted by David Eisenbud to discuss possible projects in this area, including Sage.&lt;/blockquote&gt;&lt;blockquote&gt;After that meeting it was decided that the foundation would support Magma.&lt;/blockquote&gt;&lt;blockquote&gt;Please keep me in the loop regarding developments at Sage, but &lt;strong&gt;I regret that we will not fund Sage&lt;/strong&gt; at this time.&lt;/blockquote&gt;&lt;blockquote&gt;Best regards, Yuri&lt;/blockquote&gt;The Simons Foundation, the NSF, or any other foundation does not owe the Sage project anything. Sage is used by a lot of people for free, who together have their research and teaching supported by hundreds of millions of dollars in NSF grants. Meanwhile the Sage project barely hobbles along. I meet people who have fantastic development or documentations projects for Sage that they can't do because they are far too busy with their fulltime teaching jobs. More funding would have a massive impact. It's only fair that the US mathematical community is at least aware of a missed opportunity.&lt;br /&gt;&lt;a href=&quot;http://opendreamkit.org/&quot; target=&quot;_blank&quot;&gt;Funding in Europe&lt;/a&gt; for open source math software is much better.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=10175563&quot; target=&quot;_blank&quot;&gt;Hacker News discussion&lt;/a&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2015-09-14T22:30:05+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Picking a good Vainglory jungler with game theory and sagemath</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/09/05/picking-a-good-vainglory-jungler-with-game-theory-and-sagemath/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/09/05/picking-a-good-vainglory-jungler-with-game-theory-and-sagemath/</id>
		<updated>2015-09-05T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;I’ve recently been playing a really cool video game:
&lt;a href=&quot;http://www.vainglorygame.com&quot;&gt;Vainglory&lt;/a&gt;. This is described as a MOBA which I
must admit I had never heard off until this year when my students mentioned it
to me, but basically it’s an online multi player game in which players form two
teams of 6 heroes and fight each other. The choice of the heroes is very
important as the composition of a team can make or break a match. This seems to
have a bit of a cult following (so no doubt just like for my &lt;a href=&quot;http://drvinceknight.blogspot.fr/2014/05/wizards-giants-linear-programming-and.html&quot;&gt;post about clash
of
clans&lt;/a&gt;
I might annoy people again) and there is a &lt;a href=&quot;http://www.vaingloryfire.com/&quot;&gt;great
wiki&lt;/a&gt; that gives guides for the play of each
player. In this post I’ll describe using Python to scrape that wiki to get data
that feeds in to a game theoretic model which I then analyse using
&lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sagemath&lt;/a&gt; to give some insight about the choice of
hero.&lt;/p&gt;

&lt;p&gt;Here’s the map where this all takes place:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://22aeqb1ndrnn3j0r8k2b47j2.wpengine.netdna-cdn.com/wp-content/uploads/2014/11/Map.jpg&quot; alt=&quot;Map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So first of all, my understanding is that there are generally three types of
playing strategy in the game:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lane: a hero that occupies and tries to take over the main route between the
two bases.&lt;/li&gt;
  &lt;li&gt;Jungle: a hero that goes ‘off road’ and kills monsters, gets gold etc…&lt;/li&gt;
  &lt;li&gt;Roam: a hero who roams in between the two and whose main job is to support the
other two players.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My personal strategy is to pick a roamer/protector:
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/ardan&quot;&gt;Ardan&lt;/a&gt; (pic below),&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.gamezebo.com/wp-content/uploads/2015/02/ardan.jpg&quot; alt=&quot;Ardan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I generally help out the jungler in my team and try my best to not be a
liability by dying.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.vaingloryfire.com&quot;&gt;wiki&lt;/a&gt; has a bunch of information for
players.  If you google something like ‘vainglory best strategy’ it comes up.
If you look up each hero you get &lt;strong&gt;a collection of guides ranked by votes&lt;/strong&gt;
each with all sorts of information which includes the where each and every
other hero sits on a threat level (from 1 to 10). Here is the threat meter for
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/ardan&quot;&gt;Ardan&lt;/a&gt; from the top guide:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/ardan_threat_meter.png&quot; alt=&quot;Threat for Ardan
(2015-09-05)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So from that guide it looks like if your opponent is going to be isolated with
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/ardan&quot;&gt;Ardan&lt;/a&gt; then you should pick &lt;strong&gt;HERO&lt;/strong&gt;. &lt;strong&gt;In some guides the threat meter does
not list all the heros&lt;/strong&gt;. This is particularly important as it’s these threat
meters that I’ve used as a source of data for &lt;strong&gt;how good a given hero is
against other heros&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is where the keener player/reader will note that the threat meter only
describes the threat to a single player and not any information about how this
fits within a team dynamic. &lt;strong&gt;This is an important admission on my part: as
indicated by the title of this post aims to use data and game theory to give an
indication as to how to choose heros for isolated combat against other single
heros.&lt;/strong&gt; So one application of this is choosing a jungler/laner when you expect
to go up against another team that is playing a single jungler/laner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scraping the data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First things first: I used Python with the
&lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/bs4/doc/&quot;&gt;BeautifulSoup&lt;/a&gt; and
&lt;a href=&quot;http://www.python-requests.org/en/latest/&quot;&gt;requests&lt;/a&gt; library. For example here
is how I got the lists of all the heroes (and the url to their own respective
page on the wiki):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://www.vaingloryfire.com/vainglory/wiki/heroes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'html.parser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/vainglory/wiki/heroes'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'href'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heroes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'skye'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Removing skye as she is brand new&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u'adagio'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/adagio'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'ardan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/ardan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'catherine'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/catherine'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'celeste'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/celeste'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'fortress'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/fortress'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'glaive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/glaive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'joule'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/joule'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'koshka'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/koshka'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'krul'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/krul'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'petal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/petal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'ringo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/ringo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'rona'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/rona'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'saw'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/saw'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'skaarf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/skaarf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'taka'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/taka'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'vox'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/vox'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Note there that I’m removing a brand new hero:
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/skye&quot;&gt;Skye&lt;/a&gt; as she was
released pretty much at the same time as I was writing this post.)&lt;/p&gt;

&lt;p&gt;You can see the &lt;a href=&quot;https://github.com/drvinceknight/vainglory-analysis/blob/master/scrape_heroes.ipynb&quot;&gt;JuPyTer
notebook&lt;/a&gt;
which shows the code. The main technicality is that I only scraped guides from
the front page for each hero. As I’ll describe later, I ran my analysis taking
the average threats for a variety of cases: only taking the first guide, only
taking the first 2 guides, the first 3 guides etc…&lt;/p&gt;

&lt;p&gt;Here for example is the threats data for &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/adagio&quot;&gt;Adagio&lt;/a&gt; if you only look at &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/guide/unbeatable-adagio-130&quot;&gt;this
first guide&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cross referencing that with the order given by the list of heroes above we see
that &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/skaarf&quot;&gt;Skaarf&lt;/a&gt; ranks a 7 on the threat meter to &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/adagio&quot;&gt;Adagio&lt;/a&gt;, and &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/ringo&quot;&gt;Ringo&lt;/a&gt; and
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/joule&quot;&gt;Joule&lt;/a&gt; a 4. &lt;strong&gt;All the 0s are what I’ve decided to do when a threat meter
does not include a given hero: indicating that that hero is not a threat to
that hero.&lt;/strong&gt; I don’t really like this as a solution but it’s probably the least
worst way to deal with it (if anyone has a better way of handling this please
let me know in the comments).&lt;/p&gt;

&lt;p&gt;Here is the threats data for &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/krul&quot;&gt;Krul&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We see that in this case the only heroes that pose no threat to &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/krul&quot;&gt;Krul&lt;/a&gt; are
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/fortress&quot;&gt;Fortress&lt;/a&gt; and &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/rona&quot;&gt;Rona&lt;/a&gt;. Thus if your opponent is playing those heroes
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/krul&quot;&gt;Krul&lt;/a&gt; is a best response.&lt;/p&gt;

&lt;p&gt;As will be described in the next section, we need to build up a matrix of these
rows which basically shows how well a given hero does against others. Here is
the matrix of this when considering the row players and taking the opposite of
the threats &lt;strong&gt;when using just the top guide&lt;/strong&gt;:&lt;/p&gt;



&lt;p&gt;If you consider a column (that corresponds to a hero) of that matrix, the row
player aims to find the row that gives the highest score, which because we’ve
taken the opposite of the threat score corresponds to minimising the threat
posed by the column hero. This is in essence a &lt;strong&gt;risk averse&lt;/strong&gt; approach, at the
very end I’ll comment on what happens to the results when players aim to
maximise the threat they pose.&lt;/p&gt;

&lt;p&gt;Now that I’ve described the data (you can find all the data written to specific
csv files
&lt;a href=&quot;https://github.com/drvinceknight/vainglory-analysis/tree/master/data&quot;&gt;here&lt;/a&gt;)
I’ll go on to talk about the game theory used to try and see what the
equilibrium choice of strategies should/could be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Game theoretic analysis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All of this has been done using &lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sagemath&lt;/a&gt;, a great open source mathematics
package that offers an alternative to Maple, Mathematica etc…&lt;/p&gt;

&lt;p&gt;If you’re not familiar with game theory, this video might help (it shows the
basics of game theory and how Sagemath can be used to find Nash equilibria):&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
        
    
&lt;/div&gt;

&lt;p&gt;Before talking about equilibria let’s just look at best response dynamics.&lt;/p&gt;

&lt;p&gt;Using Sage we can first of all build up the &lt;a href=&quot;http://doc.sagemath.org/html/en/reference/game_theory/sage/game_theory/normal_form_game.html&quot;&gt;normal form
game&lt;/a&gt;
for a given number of guides:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_player_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col_player_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Import the bi matrices and create the game object&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;bi_matrices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fle&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_player_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col_player_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;csvrdr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;bi_matrices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvrdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalFormGame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bi_matrices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;A-01.csv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;B-01.csv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using this and the &lt;code&gt;best_response&lt;/code&gt; method on Sagemath &lt;code&gt;NormalFormGames&lt;/code&gt; we can
build up all the best responses (according to a given number of guides) go each
player. The cool thing is that Sagemath has some awesome graph theory written
in there so we can transform that in to a nice picture (again: all the code for
this can be found
&lt;a href=&quot;https://github.com/drvinceknight/vainglory-analysis/blob/master/analyse_game.ipynb&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/risk-averse-plot-br-01.svg&quot; alt=&quot;best response graph for 1st guide&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That plot confirms what we have seen earlier, we see that
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/krul&quot;&gt;Krul&lt;/a&gt; is a best
response to
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/fortress&quot;&gt;Fortress&lt;/a&gt; or
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/rona&quot;&gt;Rona&lt;/a&gt;. Sadly, because
there are so many zeros when just using the first guide, there are a bunch of
heros that are not considered a threat to any of the players so they have
multiple best responses and our graph is messy.&lt;/p&gt;

&lt;p&gt;Here is the best response graph when taking the mean threats over all front
page guides:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/risk-averse-plot-br-all.svg&quot; alt=&quot;best response graph for all guides&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that Game Theory assumes &lt;strong&gt;that everyone know that everyone know that
everyone knows… all this&lt;/strong&gt;. So for example if two players both player Adagio
we are at an equilibrium. However if one player plays
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/saw&quot;&gt;Saw&lt;/a&gt; then the graph
indicates that the opponent should play
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/koshka&quot;&gt;Koshka&lt;/a&gt;, which means
that the first player should then deviate and play
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/fortress&quot;&gt;Fortress&lt;/a&gt; which is
then also an equilibrium (bot players are playing best responses to each other).&lt;/p&gt;

&lt;p&gt;From here on I will continue the analysis using the average utility from all
the guides (I’ll come back to this at the end).&lt;/p&gt;

&lt;p&gt;So we can use Sagemath to compute all the equilibria for us. A Nash equilibria
need not be a pure strategy and so will at times be a probability vector
indicating how players should randomly pick a hero. Here for example is the 4th
equilibrium computed by Sagemath:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtain_nash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lrs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3947&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3194&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8795&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;615&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5927&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3947&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3194&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8795&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;615&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5927&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This particular equilibria has both players playing a mix of: &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/fortress&quot;&gt;Fortress&lt;/a&gt;,
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/glaive&quot;&gt;Glaive&lt;/a&gt;, &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/petal&quot;&gt;Petal&lt;/a&gt; and &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/koshka&quot;&gt;Koshka&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the mean probability distribution for both players, while the
particular values should be ignored what is of interest is the heroes that are
not played at all. &lt;strong&gt;In essence these heroes, accross all the equilibria are
not deemed playable&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/risk-averse-plot-ne-all.svg&quot; alt=&quot;ne graph for all
guides&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that this confirms how the previous graph was colored showing the heroes
that should be played in blue.&lt;/p&gt;

&lt;p&gt;Note that the number of guides and the reliability of all this has a huge
effect of the conclusions made. Here are two gifs that show the effect of the
number of guides used:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/br.gif&quot; alt=&quot;best response dynamics animation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/ne.gif&quot; alt=&quot;ne graph animation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and here is a plot of the number of equilibria for each guide:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/risk-averse_number_of_equilibria.svg&quot; alt=&quot;number of equilibria&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Up until now all the results are for when players aim to minimise the threat
posed to them. In the next section I’ll invert that (python wise it’s a minor
swapping around of some inputs) and consider the situation where you want to
pick a hero that is aims to be the most threatening.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Seeking to be a threat&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all here is the best response graph:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/threatening-plot-br-all.svg&quot; alt=&quot;best response graph for all
guides&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the average of the NE:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/threatening-plot-ne-all.svg&quot; alt=&quot;best response graph for all
guides&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Those 3 players have certainly been able to rip through me on more than one
occasion…&lt;/p&gt;

&lt;p&gt;Finally here are the Nash equilibria for when a threatening player (plotted in
black) is playing against a threat averse player (plotted in grey):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/asymmetric-plot-ne-all.svg&quot; alt=&quot;best response graph for all
guides&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main thing that needs to be highlighted before concluding is that this
analysis has two weaknesses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The data: what comes out of mathematical models is only as good as what goes
in. Scraping the wiki data is a cool thing to do (from a Python point of view)
but I’m blindly grabbing guides that might have poor information/opinions in
them. This is worth remembering. If someone where to come up with their own
threat/performance measures then this work could just be used on that.
Ultimately the data available here is better than no data.&lt;/li&gt;
  &lt;li&gt;I am not taking in to account team dynamics. I’m just looking at perceived
threats from one hero to another. There are mathematical approaches that could
be used to find the best combination of teams and I might get to that in other
post one day. Nonetheless this has been a fun application of game theory and
still has value I believe.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So to conclude, basing things on the data available to me, I’d suggest that
(when both players are acting in a risk averse way) the choice of heros for an
isolated job like jungling and/or laneing is in fact reduced to a set from:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/adagio&quot;&gt;Adagio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/catherine&quot;&gt;Catherine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/koshka&quot;&gt;Koshka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/petal&quot;&gt;Petal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/glaive&quot;&gt;Glaive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/fortress&quot;&gt;Fortress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If &lt;strong&gt;you and your opponent aim to be threatening&lt;/strong&gt;, the choice is from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/glaive&quot;&gt;Glaive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/krul&quot;&gt;Krul&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/taka&quot;&gt;Taka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally if &lt;strong&gt;you aim to be threatening, playing against a player aiming to be
risk averse&lt;/strong&gt; the choice is from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/glaive&quot;&gt;Glaive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/krul&quot;&gt;Krul&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/catherine&quot;&gt;Catherine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/taka&quot;&gt;Taka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/koshka&quot;&gt;Koshka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and vice versa:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/adagio&quot;&gt;Adagio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/catherine&quot;&gt;Catherine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/petal&quot;&gt;Petal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/glaive&quot;&gt;Glaive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/fortress&quot;&gt;Fortress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Interestingly for this last type of game there were in general just 1 equilibrium.)&lt;/p&gt;

&lt;p&gt;Based on all of this, I would suggest (looking across all of that summary) that
(disclaimer: based on the wiki threat data) the &lt;strong&gt;best&lt;/strong&gt;
&lt;a href=&quot;http://www.vainglorygame.com&quot;&gt;Vainglory&lt;/a&gt; hero is
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/glaive&quot;&gt;Glaive&lt;/a&gt;. Again
though, this does not take in to account any of the very important team
dynamics. I plan to keep on being a protector with
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/ardan&quot;&gt;Ardan&lt;/a&gt; and just doing
my best to stay alive…&lt;/p&gt;

&lt;p&gt;Another point is that this shows that vainglory is perhaps not immediately
balanced. A perfectly balanced game (like &lt;a href=&quot;https://en.wikipedia.org/wiki/Rock-paper-scissors&quot;&gt;Rock Paper
Scissor&lt;/a&gt; for example) has a
Nash Equilibria that evenly plays all strategies:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game_theory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal_form_games&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtain_nash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Please do take a look at all the code/data at &lt;a href=&quot;https://github.com/drvinceknight/vainglory-analysis&quot;&gt;this
repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This was a fun application of mathematical modelling, I also learnt how to
scrape with BeautifulSoup but I mainly look forward to using this in my game
theory class this year. I might even suggest we spend 25 minutes of one class
having a game on the big screen assuming there are 5 players of
&lt;a href=&quot;http://www.vainglorygame.com&quot;&gt;Vainglory&lt;/a&gt; in my class.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">React, Flux, RethinkDB and SageMathCloud -- Summer 2015 update</title>
		<link href="http://sagemath.blogspot.com/2015/08/react-flux-rethinkdb-and-sagemathcloud.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-677612542326618554</id>
		<updated>2015-09-01T07:57:27+00:00</updated>
		<content type="html">I've been using databases and doing web development for over 20 years, and I've never really &lt;strong&gt;loved&lt;/strong&gt; any database before and definitely didn't love any web development frameworks either. That all changed for me this summer...&lt;br /&gt;&lt;h3 id=&quot;sagemathcloud&quot;&gt;SageMathCloud&lt;/h3&gt;&lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud&lt;/a&gt; is a web application in which you collaboratively use Python, LaTeX, Markdown, Sage worksheets (sophisticated mathematics), task lists, R, Jupyter Notebooks, manage courses, write C programs, make chatrooms, and more. It is hosted on Google Compute Engine, but is also &lt;a href=&quot;https://github.com/sagemathinc/smc&quot;&gt;entirely open source&lt;/a&gt; and there is a pre-made Virtual Machine that you can download. A &lt;strong&gt;project&lt;/strong&gt; in SMC is a Linux account, with resources constrained using cgroups and quotas. Many SMC users can &lt;strong&gt;collaborate&lt;/strong&gt; on the same project, and have equal privileges in that project. Interaction with all file types (including Jupyter notebooks, task lists and course managements) is synchronized in realtime, like Google docs. There is also a &lt;strong&gt;global notifications feed&lt;/strong&gt; that shows all editing activity on all files in all projects on which the user collaborates, which is a sort of highly technical version of Facebook's feed.&lt;br /&gt;&lt;h3 id=&quot;rewrite-motivation&quot;&gt;Rewrite motivation&lt;/h3&gt;I originally wrote the &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud&lt;/a&gt; frontend using progressive-refinement jQuery (no third-party framework beyond that) and the Cassandra database. These were reasonable choices when I started. There are much better approaches now, which are critical to dramatically improving the user experience with SMC, and also growing the developer base. So far SMC has had no nontrivial outside contributions, probably due to the difficulty of understanding the code. In fact, I think nobody besides me has ever even &lt;strong&gt;installed&lt;/strong&gt; SMC, despite &lt;a href=&quot;https://github.com/sagemathinc/smc/blob/master/INSTALL.md&quot;&gt;these install notes&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;We (me, Jon Lee, Nicholas Ruhland) are currently completely rewriting the entire frontend of SMC using React.js, Flux, and RethinkDB. We started this rewrite in June 2015, with Jon being supported by Google Summer of Code (2015), Nich being supported some by NSF grants from Randy Leveque and Rekha Thomas, and with me being unemployed.&lt;br /&gt;&lt;h3 id=&quot;terrible-funding-situation&quot;&gt;Terrible funding situation&lt;/h3&gt;I'm living on credit cards -- I have no NSF grant support anymore, and SageMathCloud is still losing a lot of money every month, and I'm unhappy about this situation. It was either completely quit working on SMC and instead teach or consult a lot, or lose tens of thousands of dollars. I am doing the latter right now. I was very caught off guard, since this is my first summer ever to not have NSF support since I got my Ph.D. in 2000, and I didn't expect to have my grant proposals all denied (which happened in June). There is some modest Angel investment in SageMath, Inc., but I can't bring myself to burn through that money on salary, since it would run out quickly, and I don't want to have to shut down the site due to not being able to pay the hosting bill. I've failed to get any significant free hosting, due to already getting free hosting in the past, and SageMath, Inc. not being in any incubators. For example, we tried very hard to get hosting from Google, but they flatly refused for these two reasons (they gave $60K in hosting to UW/Sage project in 2012). I'm clearly having trouble transitioning from an academic to an industry funding model. But if there are enough paying customers by January 2016, things will turn around.&lt;br /&gt;&lt;br /&gt;Jon, Nich, and I have been working on this rewrite for three months, and hope to finish it by the end of September, when Jon and Nich will become busy with classes again. However, it seems unlikely we'll be able to finish at the current rate. Fortunately, I don't start teaching fulltime again until January, and we put a lot of work into doing a release in mid-August that fully uses RethinkDB and partly uses React.js, so that we can finish the second stage of the rewrite iteratively, without any major technical surprises.&lt;br /&gt;&lt;h3 id=&quot;rethinkdb&quot;&gt;RethinkDB&lt;/h3&gt;Cassandra is an excellent database for many applications, but it is not the right database for SMC and I'm making no further use of Cassandra. SMC is a realtime application that does a lot more reading than writing to the database, and SMC greatly benefits from realtime push updates from the database. I've tried quite hard in the past to build an appropriate architecture for SMC on top of Cassandra, but it is the wrong tool for the job. RethinkDB scales up linearly (with sharding and replication), and has high availability and automatic failover as of version 2.1.2. See &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/4678&quot;&gt;https://github.com/rethinkdb/rethinkdb/issues/4678&lt;/a&gt; for my painful path to ensuring RethinkDB actually works for me (the RethinkDB developers are incredibly helpful!).&lt;br /&gt;&lt;h3 id=&quot;react.js&quot;&gt;React.js&lt;/h3&gt;I learned about React.js first from some &quot;random podcast&quot;, then got more interested in it when Chris Swenson gave a demo at a Sage Days workshop in San Diego in May 2015. React (+Flux) is a web development framework that actually has solid &lt;em&gt;ideas&lt;/em&gt; behind it, backed by an implementation that has been optimized and tested by a highly nontrivial real world application: namely the Facebook website. Even if I were to have the idea of React, implementing in a way that is actually usable would be difficult. The key idea of React.js is that -- surprisingly -- it is possible to write efficient &lt;em&gt;client-side&lt;/em&gt; code that describes how to render the application purely as a function of its state.&lt;br /&gt;&lt;br /&gt;React is &lt;strong&gt;different&lt;/strong&gt; than jQuery. With jQuery, you write lots of code explaining how to transform the user interface of your application from one complicated state (that you might never have anticipated happening) to another complicated state. When using React.js you don't write code about how your application's visible state changes -- instead you write code to answer the question: &quot;given this state, what should the application look like&quot;. For me, it's a game changer. This is like what one does when writing video games; the innovation is that some people at Facebook figured out how to practically program this way in a client side web browser application, then tuned their implementation based on huge amounts of real world data (Facebook has users). Oh, and they open sourced the result and ran several conferences explaining React.&lt;br /&gt;&lt;br /&gt;React.js reminds me of when Andrew Wiles proved Fermat's Last Theorem in the mid 1990s. Wiles (and Ken Ribet) had genuine new ideas, which dramatically reshaped the landscape of number theory. The best number theorists quickly realized this and adopted to the new world, pushing the envelope of Wiles work far beyond what I expected could happen. Other people pretended like Wiles didn't exist and continued studying Fibonnaci numbers. I browsed the web development section of Barnes and Noble last night and there were dozens of books on jQuery and &lt;em&gt;zero&lt;/em&gt; on React.js. I feel for anybody who tries to learn client-side web development by reading books at Barnes and Noble.&lt;br /&gt;&lt;h3 id=&quot;ipythonjupyter-and-phosphorjs&quot;&gt;IPython/Jupyter and PhosphorJS&lt;/h3&gt;I recently met with Fernando Perez, who founded IPython/Jupyter. He seemed to tell me that currently 9 people are working fulltime on rewriting the Jupyter web notebook using the &lt;a href=&quot;https://github.com/phosphorjs/phosphor&quot;&gt;PhosphorJS&lt;/a&gt; framework. I tried to understand PhosphorJS based on the github page, but couldn't, except to deduce that it is mostly the work of one person from Bloomberg/Continuum Analytics. Fernando told me that they chose PhosphorJS since it very fast, and that their main motivation is to (1) make Jupyter better use their huge high-resolution monitors on their new institute at Berkeley, and (2) make it easier for developers like me to integrate/extend Jupyter into their applications. I don't understand (2), because PhosphorJS is perhaps the least popular web framework I've ever heard of (is it a web framework -- I can't tell?). I pushed Fernando to explain why they made that design choice, but didn't really understand the answer, except that they had spent a lot of time investigating alternatives (like React first). I'm intimidated by their resources and concerned that I'm making the wrong choice; however, I just can't understand why they have made what seems to me to be the wrong choice. I hope to understand more at the joint &lt;a href=&quot;http://wiki.sagemath.org/days70&quot;&gt;Sage/Jupyter Days 70&lt;/a&gt; that we are organizing together in Berkeley, CA in November. (Edit: see &lt;a href=&quot;https://github.com/ipython/ipython/issues/8239&quot;&gt;https://github.com/ipython/ipython/issues/8239&lt;/a&gt; for a discussion of why IPython/Jupyter uses PhosphorJS.)  &lt;br /&gt;&lt;h3 id=&quot;tables-and-rethinkdb&quot;&gt;Tables and RethinkDB&lt;/h3&gt;Our rewrite of SMC is built on Tables, Flux and React. &lt;strong&gt;Tables&lt;/strong&gt; are client-side technology I wrote inspired by Facebook's GraphQL/Relay technology (and Meteor, Firebase, etc.); they synchronize data between clients and the backend database in realtime. Tables are defined by a &lt;a href=&quot;https://github.com/sagemathinc/smc/blob/master/salvus/schema.coffee&quot;&gt;JSON schema file&lt;/a&gt;, which specifies the fields in the table, and explains what get and set queries are allowed. A table is a subset of a much larger table in the database, with the subset defined by conditions that are relative to the user making the query. For example, the projects table has one entry for each project that the user is a collaborator on.&lt;br /&gt;&lt;br /&gt;Tables are automatically synchronized between the user and the database whenever the database changes, using &lt;a href=&quot;http://rethinkdb.com/docs/changefeeds/javascript/&quot;&gt;RethinkDB changefeeds&lt;/a&gt;. &lt;a href=&quot;http://rethinkdb.com/&quot;&gt;RethinkDB's&lt;/a&gt; innovation is to build realtime updates -- triggered when the result of a query to the database changes -- directly into the database at the lowest level. Of course it is possible to build something that looks the same from the outside using either a message queue (say using RabbitMQ or ZeroMQ), or by watching the replication stream from the database and triggering actions based on that (like Meteor does using MongoDB). RethinkDB's approach seems better to me, putting the abstraction at the right level. That said, based on mailing list traffic, searches, etc., it seems that very, very few people get RethinkDB yet. Also, despite years of development, RethinkDB only became &quot;production ready&quot; a few months ago, and only got automatic failover a few weeks ago. That said, after ironing out some kinks, I'm now using it with heavy traffic in production and it works very well.&lt;br /&gt;&lt;h2 id=&quot;flux&quot;&gt;Flux&lt;/h2&gt;Once data is automatically synchronized between the database and web browsers in realtime, we can build everything else on top of this. Facebook also introduced an architecture pattern that they call &lt;strong&gt;Flux&lt;/strong&gt;, which works well with React. It's very different than MVC-style two-way binding frameworks, where objects are directly linked to UI elements, with an object changing causing the UI element to change and vice versa. In SMC each major part of the system has two objects associated to it: Actions and Stores. We think of them in terms of the classical CQRS pattern -- &lt;strong&gt;c&lt;/strong&gt;ommand &lt;strong&gt;q&lt;/strong&gt;uery &lt;strong&gt;r&lt;/strong&gt;esponsibility &lt;strong&gt;s&lt;/strong&gt;egregation. Actions are commands -- they are Javascript &quot;functions&quot; that get stuff done, but they do not return values; instead, they impact the state of the store. The store has functions that allow one to query for the state of the store, but they do not change the state of the store. The store functions must only be functions of the internal state of the store and nothing else. They might cache their results and format their output to be very convenient for rendering. But that's it.&lt;br /&gt;&lt;br /&gt;Actions usually cause the corresponding store (or stores) to change. When a store changes, it emit a change event, which causes any React components that depend on the store to be updated, which in many cases means they are re-rendered. There are optimizations one can introduce to reduce the amount of re-rendering, which if one isn't careful leads to subtle bugs; pretty much the only subtle React UI bugs one hits are caused by such optimizations. When the UI re-renders, the user sees their view of the world change. The user then clicks buttons, types, etc., which triggers actions, which in turn update stores (and tables, hence propogating changes to the ultimate source of truth, which is the RethinkDB database). As stores update, the UI again updates, etc.&lt;br /&gt;&lt;h3 id=&quot;status&quot;&gt;Status&lt;/h3&gt;So far, we have completely (re-)written the project listing, file manager, help/status page, new file page, project log, file finder, project settings, course management system, account settings, billing, project upgrade system, and file use notifications using React, Flux, and Tables, and the result works well. Bugs are much easier to fix, and it is easy (possible?) to understand the state of the system, since it is defined by the state of the database and the corresponding client-side stores. We've completely rethought everything about the UI in doing the rewrite of the above components, and it has taken several months. Also, as mentioned above, I completely rewrote most of the backend to use RethinkDB instead of Cassandra. There were also the weeks of misery for me after we made the switch over. Even after weeks of thinking/testing/wondering &quot;what could go wrong?&quot;, we found out all kinds of surprising little things within hours of pushing everything into production, which took more than a week of sleep deprived days to sort out.&lt;br /&gt;&lt;br /&gt;What's left? We have to rewrite the file editor tabs system, the project tabs system, and all the applications (except course management): editing text files using Codemirror, task lists (which are suprisingly complicated!), color xterm terminals, Jupyter notebooks (which will still use an iframe for the notebook itself), Sage worksheets (with complicated html output embedded in codemirror), compressed file de-archiver, the LaTeX editor, the wiki and markdown editors, and file chat. We hope to find a clean way to abstract away the various SMC applications as plugins, so that other people can easily write their own applications/plugins that will run inside of SMC. There will be a rich collection of example plugins to build on, namely the ones listed above, which are all driven by critical-to-us real world applications.  &lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=10147401&quot;&gt;Discussion about this blog post on Hacker News.&lt;/a&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2015-09-14T22:30:05+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Natural language processing of new jokes from 2015</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/08/28/natural-language-processing-of-new-jokes-from-2015/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/08/28/natural-language-processing-of-new-jokes-from-2015/</id>
		<updated>2015-08-28T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This is a brief update to a previous post: &lt;a href=&quot;http://vknight.org/unpeudemath/code/2015/06/14/natural-language-and-predicting-funny/&quot;&gt;“Python, natural language processing
and predicting
funny”&lt;/a&gt;.
In that post I carried out some basic natural language processing with Python to
predict whether or not a joke is funny. In this post I just update that with
some more data from this year’s &lt;a href=&quot;http://www.bbc.co.uk/news/uk-scotland-edinburgh-east-fife-34039927&quot;&gt;Edinburgh Fringe
festival&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href=&quot;https://github.com/drvinceknight/EdinburghFringeJokes/blob/master/nlp-of-jokes-2015.ipynb&quot;&gt;the ipython
notebook&lt;/a&gt; which shows graphics and outputs of all the jokes.
Interestingly this year’s winning joke is not deemed funny by the basic model :)
but overall was 60% right this year (which is pretty good compared to last
year).&lt;/p&gt;

&lt;p&gt;Here is a summary plot of the classifiers for different thresholds of ‘funny’:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-all.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The corresponding plot this year (with the new data):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-all-2015.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take a look at the notebook file and by all means grab &lt;a href=&quot;https://github.com/drvinceknight/EdinburghFringeJokes/blob/master/jokes.csv&quot;&gt;the csv
file&lt;/a&gt; to
play (but do let me know how you get on :)).&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-US">
		<title type="html">Google Summer of Code 2015: Conclusion</title>
		<link href="http://benjamin-hackl.at/2015/08/22/google-summer-of-code-2015-conclusion/"/>
		<id>http://benjamin-hackl.at/?p=404</id>
		<updated>2015-08-22T11:34:56+00:00</updated>
		<content type="html">&lt;p&gt;The &lt;a href=&quot;https://developers.google.com/open-source/gsoc/&quot;&gt;&amp;#8220;Google Summer of Code 2015&amp;#8221;&lt;/a&gt; program has ended yesterday, on the 21. of August at 19.00 UTC. This blog entry shall provide a short wrap-up of &lt;a href=&quot;http://www.google-melange.com/gsoc/project/details/google/gsoc2015/behackl/5649050225344512&quot;&gt;our GSoC project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The aim of our project was to implement a &lt;em&gt;basic framework&lt;/em&gt; that enables us to do computations with asymptotic expressions in SageMath &amp;#8212; and I am very happy to say that we very much succeeded to do so. An overview of all our developments can be found at meta ticket &lt;a href=&quot;http://trac.sagemath.org/17601&quot;&gt;#17601&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Although we did not really follow the timeline suggested in my original proposal (mainly because the implementation of the &lt;a href=&quot;http://trac.sagemath.org/17716&quot;&gt;&lt;em&gt;Asymptotic Ring&lt;/em&gt;&lt;/a&gt; took way longer than originally anticipated) we managed to implement the majority of ideas from my proposal &amp;#8212; with the most important part being that our current prototype is &lt;strong&gt;stable&lt;/strong&gt;. In particular, this means that we do not expect to make major design changes at this point. Every detail of our design is well-discussed and can be explained.&lt;/p&gt;
&lt;p&gt;Of course, our &lt;a href=&quot;http://trac.sagemath.org/17601&quot;&gt;&lt;em&gt;&amp;#8220;Asymptotic Expressions&amp;#8221; &lt;/em&gt;project&lt;/a&gt; is far from finished, and we will continue to extend the functionality of our framework. For example, although working with exponential and logarithmic terms is currently possible, it is not very convenient because the $\log$, $\exp$, and power functions are not fully implemented. Furthermore, it would be interesting to investigate the performance-gain obtained by cythonizing the central parts of this framework (e.g. parts of the &lt;em&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/17693&quot;&gt;MutablePoset&lt;/a&gt;&lt;/em&gt;&amp;#8230;) &amp;#8212; and so on&amp;#8230;&lt;/p&gt;
&lt;p&gt;To conclude, I want to thank &lt;a href=&quot;http://danielkrenn.at&quot;&gt;Daniel Krenn&lt;/a&gt; for his hard work and helpful advice als my mentor, as well as the SageMath community for giving me the opportunity to work on this project within the Google Summer of Code program! &lt;img src=&quot;http://benjamin-hackl.at/asdf-wp/wp-includes/images/smilies/simple-smile.png&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;</content>
		<author>
			<name>Benjamin Hackl</name>
			<uri>http://benjamin-hackl.at/tag/gsoc15/</uri>
		</author>
		<source>
			<title type="html">Benjamin Hackl » GSoC15</title>
			<link rel="self" href="http://benjamin-hackl.at/tag/gsoc15/feed/"/>
			<id>http://benjamin-hackl.at/tag/gsoc15/feed/</id>
			<updated>2015-09-11T10:30:16+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-US">
		<title type="html">Asymptotic Expressions: Current Developments</title>
		<link href="http://benjamin-hackl.at/2015/08/17/asymptotic-expressions-current-developments/"/>
		<id>http://benjamin-hackl.at/?p=391</id>
		<updated>2015-08-17T07:15:20+00:00</updated>
		<content type="html">&lt;p&gt;Since my last blog entry on the status of our implementation of &lt;a href=&quot;http://trac.sagemath.org/17601&quot;&gt;Asymptotic Expressions in SageMath&lt;/a&gt; quite a lot of improvements have happened. Essentially, all the pieces required in order to have a basic working implementation of multivariate asymptotics are there. The remaining tasks within my Google Summer of Code project are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Polish the documentation of our &lt;em&gt;minimal prototype&lt;/em&gt;, which consists of &lt;a href=&quot;http://trac.sagemath.org/17716&quot;&gt;#17716&lt;/a&gt; and the respective dependencies. Afterwards, we will set this to &lt;em&gt;needs_review&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Open a ticket for the &lt;em&gt;multivariate asymptotic ring &lt;/em&gt;and put together everything that we have written so far there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this blog post I want to give some more examples of what can be done with our implementation right now and what we would like to be able to handle in the future.&lt;/p&gt;
&lt;h3&gt;Status Quo&lt;/h3&gt;
&lt;p&gt;After I wrote my last blog entry, we introduced a central idea/interface to our project: &lt;em&gt;short notations&lt;/em&gt;. By using the &lt;em&gt;short notation factory&lt;/em&gt; for growth groups (introduced in &lt;a href=&quot;http://trac.sagemath.org/ticket/18930&quot;&gt;#18930&lt;/a&gt;) it becomes very simple to construct the desired growth group. Essentially, &lt;em&gt;monomial growth groups&lt;/em&gt; (cf. &lt;a href=&quot;http://trac.sagemath.org/17600&quot;&gt;#17600&lt;/a&gt;), i.e. groups that contain elements of the form &lt;pre class=&quot;crayon-plain-tag&quot;&gt;variable^power&lt;/pre&gt; (for a fixed variable and powers from some base ring, e.g. the Integer Ring or even the Rational Field) are represented by &lt;pre class=&quot;crayon-plain-tag&quot;&gt;variable^base&lt;/pre&gt; , where the base ring is also specified via its shortened name. The &lt;em&gt;short notation factory&lt;/em&gt; then enables us to do the following:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: from sage.groups.asymptotic_growth_group import GrowthGroup
sage: G = GrowthGroup('x^ZZ'); G
Growth Group x^ZZ
sage: G.an_element()
x
sage: G = GrowthGroup('x^QQ'); G
Growth Group x^QQ
sage: G.an_element()
x^(1/2)&lt;/pre&gt;&lt;p&gt;Naturally, this interface carries over to the generation of asymptotic rings: instead of the (slightly dubious) &lt;pre class=&quot;crayon-plain-tag&quot;&gt;&quot;monomial&quot;&lt;/pre&gt; keyword advertised in my last blog entry, we can now actually construct the growth group by specifying the respective growth group via its short representation:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: R.&amp;lt;x&amp;gt; = AsymptoticRing('x^ZZ', QQ); R
Asymptotic Ring &amp;lt;x^ZZ&amp;gt; over Rational Field
sage: (x^2 + O(x))^50
x^100 + O(x^99)&lt;/pre&gt;&lt;p&gt;Recently, we also implemented another type of growth group: &lt;em&gt;exponential growth groups&lt;/em&gt; (see &lt;a href=&quot;http://trac.sagemath.org/ticket/19028&quot;&gt;#19028&lt;/a&gt;). These groups represent elements of the form &lt;pre class=&quot;crayon-plain-tag&quot;&gt;base^variable&lt;/pre&gt; where the base is from some multiplicative group. For example, we could do the following:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: G = GrowthGroup('QQ^x'); G
Growth Group QQ^x
sage: G.an_element()
(1/2)^x
sage: G(2^x) * G(3^x)
6^x
sage: G(5^x) * G((1/7)^x)
(5/7)^x&lt;/pre&gt;&lt;p&gt;Note: unfortunately, we did not implement a function that allows taking some element from some growth group (e.g. &lt;pre class=&quot;crayon-plain-tag&quot;&gt;x&lt;/pre&gt; from a monomial growth group) as the variable in an exponential growth group &lt;strong&gt;yet&lt;/strong&gt;. Implementing some way to &amp;#8220;change&amp;#8221; between growth groups by taking the log or the exponential function is one of our next steps.&lt;/p&gt;
&lt;p&gt;We also made this &lt;em&gt;short notation&lt;/em&gt; a central interface for working with &lt;em&gt;cartesian products&lt;/em&gt;. This is implemented in &lt;a href=&quot;http://trac.sagemath.org/ticket/18587&quot;&gt;#18587&lt;/a&gt;. For example, this allows to construct growth groups containing elements like $2^x \sqrt[5]{x^2} \log(x)^2$:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: G = GrowthGroup('QQ^x * x^QQ * log(x)^ZZ'); G
Growth Group QQ^x * x^QQ * log(x)^ZZ
sage: G.an_element()
(1/2)^x * x^(1/2) * log(x)
sage: G(2^x * x^(2/5) * log(x)^2)
2^x * x^(2/5) * log(x)^2&lt;/pre&gt;&lt;p&gt;Simple parsing from the symbolic ring (and from strings) is implemented. Like I have written above, operations like &lt;pre class=&quot;crayon-plain-tag&quot;&gt;2^G(x)&lt;/pre&gt; or &lt;pre class=&quot;crayon-plain-tag&quot;&gt;log(G(x))&lt;/pre&gt; are one of the next steps on our roadmap.&lt;/p&gt;
&lt;h3&gt;Further Steps&lt;/h3&gt;
&lt;p&gt;Of course, having an easy way to generate growth groups (and thus also asymptotic rings) is nice &amp;#8212; however, it would be even better if the process of finding the correct parent would be even more automated. Unfortunately, this requires some non-trivial effort regarding the pushout construction &amp;#8212; which will certainly not happen within the GSoC project.&lt;/p&gt;
&lt;p&gt;As soon as we have an efficient way to &amp;#8220;switch&amp;#8221; between factors of a growth group (e.g. by taking the logarithm or the exponential function), this has to be carried over up to the asymptotic ring. Operations like&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: 2^(x^2 + O(x))
2^(x^2) * 2^(O(x))&lt;/pre&gt;&lt;p&gt;where the output could also be &lt;pre class=&quot;crayon-plain-tag&quot;&gt;2^(x^2) * O(x^g)&lt;/pre&gt; , where $g$ is determined by &lt;pre class=&quot;crayon-plain-tag&quot;&gt;series_precision()&lt;/pre&gt; .&lt;/p&gt;
&lt;p&gt;Division of asymptotic expressions can be realized with just about the same idea, for example:&lt;/p&gt;
&lt;p&gt;\[ \frac{1}{x^2 + O(x)} = \frac{1}{x^2} \frac{1}{1 + O(1/x)} = x^{-2} + O(x^{-3}), \]&lt;/p&gt;
&lt;p&gt;and so on. If an infinite series occurs, it will have to be cut using an $O$-Term, most likely somehow depending on &lt;pre class=&quot;crayon-plain-tag&quot;&gt;series_precision()&lt;/pre&gt; as well.&lt;/p&gt;
&lt;p&gt;Ultimately, we would also like to incorporate, for example, Stirling&amp;#8217;s approximation of the factorial such that we could do something like&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: n.factorial()
sqrt(2*pi) * e^(n*log(n)) * (1/e)^n * n^(1/2) + ...&lt;/pre&gt;&lt;p&gt;which then can be used to obtain asymptotic expansions of binomial coefficients like $\binom{2n}{n}$:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: (2*n).factorial() / (n.factorial()^2)
1/sqrt(pi) * 4^n * n^(-1/2) + ...&lt;/pre&gt;&lt;p&gt;As you can see, there is still a lot of work within our &amp;#8220;Asymptotic Expressions&amp;#8221; project &amp;#8212; nevertheless, with the minimal working prototype and the ability to create cartesian products of growth groups, the fundament for all of this is already implemented! &lt;img src=&quot;http://s.w.org/images/core/emoji/72x72/1f609.png&quot; alt=&quot;😉&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;</content>
		<author>
			<name>Benjamin Hackl</name>
			<uri>http://benjamin-hackl.at/tag/gsoc15/</uri>
		</author>
		<source>
			<title type="html">Benjamin Hackl » GSoC15</title>
			<link rel="self" href="http://benjamin-hackl.at/tag/gsoc15/feed/"/>
			<id>http://benjamin-hackl.at/tag/gsoc15/feed/</id>
			<updated>2015-09-11T10:30:16+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Conclusion of the Main Part of the Project</title>
		<link href="http://borassisagemath.blogspot.com/2015/08/conclusion-of-main-part-of-project.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-3180150143433384427</id>
		<updated>2015-08-16T06:59:35+00:00</updated>
		<content type="html">&lt;span&gt;Hi!&lt;/span&gt;&lt;br /&gt;&lt;span&gt;In this post, I will summarize the results obtained with the inclusion in Sage of Boost and igraph libraries. This was the main part of my Google Summer of Code project, and it was completed yesterday, when ticket 19003 was closed.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;We have increased the number of graph algorithms available in Sage from 66 to 98 (according to the list used in the initial comparison of the graph libraries [1]). Furthermore, we decreased the running-time of several Sage algorithms: in some cases, we have been able to improve the asymptotic running-time, obtaining up to 10000x improvements in our tests. Finally, during the inclusion of external algorithms, we have refactored and cleaned some of Sage source code, like the shortest path routines: we have standardized the input and the output of 15 routines related to shortest paths, and we have removed duplicate code as much as possible.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;More specifically, the first part of the project was the inclusion of Boost graph library: since the library is only available in C++, we had to develop an interface. This interface lets us convert easily a Sage graph into a Boost graph, and run algorithms on the converted graph. Then, we have written routines to re-translate the output into a Sage-readable format: this way, the complicated Boost library is &quot;hidden&quot;, and users can interact with it as they do with Sage. In particular, we have interfaced the following algorithms:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Edge connectivity (trac.sagemath.org/ticket/18564);&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Clustering coefficient &lt;/span&gt;&lt;span&gt;(trac.sagemath.org/ticket/18811);&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Cuthill-McKee and King vertex orderings &lt;/span&gt;&lt;span&gt;(trac.sagemath.org/ticket/18876);&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Minimum spanning tree&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(trac.sagemath.org/ticket/18910);&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Dijkstra, Bellman-Ford, Johnson shortest paths&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(trac.sagemath.org/ticket/18931);&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;All these algorithms were either not available in Sage, or quite slow, compared to the Boost routines. As far as we know, Boost does not offer other algorithms that improve Sage algorithms: however, if such algorithms are developed in the future, it will be very easy to include them, using the new interface.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;In the second part of the project, we included igraph: since this library already offers a Python interface, we decided to include it as an optional package (before it becomes a standard package, at least an year should pass [2]). To install the package, it is enough to type the following instruction from the Sage root folder:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;sage -i igraph&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # To install the igraph C core&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;sage -i python_igraph # To install the Python interface&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Then, we can easily interact with igraph: for a list of available routines, it is enough to type &quot;&lt;span&gt;igraph.&lt;/span&gt;&quot; and click tab twice. To convert a Sage graph &lt;span&gt;g_sage&lt;/span&gt; into an igraph graph it is enough to type &lt;span&gt;g_igraph = g_sage.igraph_graph()&lt;/span&gt;, while a Sage graph can be instantiated from an igraph graph through &lt;span&gt;g_sage=Graph(g_igraph)&lt;/span&gt; or &lt;span&gt;g_sage=DiGraph(g_igraph)&lt;/span&gt;. This way, all igraph algorithms are now available in Sage.&lt;br /&gt;&lt;br /&gt;Furthermore, we have included the igraph maximum flow algoritm inside the Sage corresponding function, obtaining significant improvements (for more information and benchmarks, we refer to ticket 19003 [3]).&lt;br /&gt;&lt;br /&gt;In conclusion, I think the project reached its main goal, the original plan was followed very closely, and we have been able to overcome all problems.&lt;br /&gt;&lt;br /&gt;Before closing this post, I would like to thank many people that helped me with great advices, and who provided great solutions to all the problems I faced. First of all, my mentor David Coudert: he always answered very fast to all my queries, and he gave me great suggestions to improve the quality of the code I wrote. Then, a very big help came from Nathann Cohen, who often cooperated with David in reviewing my code and proposing new solutions. Moreover, I have to thank Martin Cross, who gave me good suggestions with Boost graph library, and Volker Braun, who closed all my ticket. Finally, I have to thank the whole Sage community for giving me this great opportunity!&lt;br /&gt;&lt;br /&gt;[1] https://docs.google.com/spreadsheets/d/1Iu1hkQtRn9J-sgfZbQTu2RoXzyjoMEWP5-cm3nAwnWE/edit?usp=sharing&lt;br /&gt;[2] http://doc.sagemath.org/html/en/developer/coding_in_other.html&lt;br /&gt;[3] http://trac.sagemath.org/ticket/19003</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2015-09-14T22:30:13+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Why I am a paying member of cloud.sagemath</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/08/09/why-I-am-a-paying-user-of-cloud.sagemath/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/08/09/why-I-am-a-paying-user-of-cloud.sagemath/</id>
		<updated>2015-08-09T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;If you are not familiar with &lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sagemath&lt;/a&gt; it is a free
open source mathematics package that does simple things like expand algebraic
expressions as well as far more complex things (optimisation, graph theory,
combinatorics, game theory etc…). &lt;a href=&quot;https://cloud.sagemath.com&quot;&gt;Cloud.sagemath&lt;/a&gt;
is a truly amazing tool not just for Sage bu for scientific computation in
general and it’s &lt;strong&gt;free&lt;/strong&gt;. Completely 100% free. In this post I’ll explain why I
pay for it.&lt;/p&gt;

&lt;p&gt;A while ago, a colleague and I were having a chat about the fact that our site
Maple license hadn’t been renewed fast enough (or something similar to that). My
colleague was fairly annoyed by this saying something like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘We are kind of like professional athletes, if I played soccer at a
professional club I would have the best facilities available to me. There
would not be a question of me having the best boots.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I don’t think we ever finished this conversation (or at least I don’t really
remember what I said) but this is something that’s stayed with me for quite a
while.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First of all:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think there are probably a very large proportion of professional soccer
players who do not play at the very top level and so do not enjoy having access
to the very best facilities (I certainly wouldn’t consider myself the Ronaldo of
mathematics…).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secondly:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mathematicians are (in some ways) &lt;strong&gt;way cooler&lt;/strong&gt; than soccer players. We are
somewhat like magicians, in the past we have not needed much more than a pencil
and some paper to work our craft. Whilst a chemist/physicist/medical research
needs a lab and/or other things we can pretty much work just with a whiteboard.&lt;/p&gt;

&lt;p&gt;We are basically magicians. We can make something from nothing.&lt;/p&gt;

&lt;p&gt;Since moving to open source software for all my research and teaching this is
certainly how I’ve felt. Before discovering open source tools I needed to make
sure I had the correct licence or otherwise before I could work but this is no
longer the case. I just need a very basic computer (I bought a thinkpad for £60
the other day!) and I am just as powerful as I could want to be.&lt;/p&gt;

&lt;p&gt;This is even more &lt;strong&gt;true&lt;/strong&gt; with &lt;a href=&quot;https://cloud.sagemath.com&quot;&gt;cloud.sagemath&lt;/a&gt;.
Anyone can use a variety of scientific computing tools for no cost whatsoever
(not even a cost associated with the time spent installing software): it just
works. I have used this to work on sage source code with students, carry out
research and also to deliver presentations: it’s awesome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, why do I pay $7 month to use it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Firstly because it gives me the ability to move some projects to servers that
are supposedly more robust. I have no doubt that they are more robust but in all
honesty I can’t say I’ve seen problems with the ‘less’ robust servers (150 of my
students used them last year and will be doing so again in the Autumn).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The main reason I pay to use cloud.sagemath is because I can afford to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This was put in very clear terms to me during the organisation of &lt;a href=&quot;http://2015.djangocon.eu/&quot;&gt;DjangoCon
Europe&lt;/a&gt;. The principle at Python conferences is that
everyone pays to attend. This in turn ensures that funds are available for
people who cannot afford to pay to attend.&lt;/p&gt;

&lt;p&gt;I am in a lucky enough financial position that for about the price of two fancy
cups of coffee a month I can help support an absolutely amazing project that
helps everyone and anyone have the same powers a magician does. This helps
(although my contribution is obviously a very small part of it) ensure that
students and anyone else who cannot afford to help support the project, can use
Sage.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Simulating continuous Markov chains</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/08/01/simulating_continuous_markov_chains/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/08/01/simulating_continuous_markov_chains/</id>
		<updated>2015-08-01T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;In a blog post I wrote in 2013, &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2013/10/pigeon-holes-markov-chains-and-sagemath.html&quot;&gt;I showed how to simulate a discrete Markov
chain&lt;/a&gt;.
In this post we’ll (written with a bit of help from &lt;a href=&quot;https://twitter.com/geraintpalmer&quot;&gt;Geraint
Palmer&lt;/a&gt;) show how to do the same with a continuous chain which can be
used to speedily obtain steady state distributions for models of queueing
processes for example.&lt;/p&gt;

&lt;p&gt;A continuous Markov chain is defined by a transition &lt;strong&gt;rate&lt;/strong&gt; matrix which shows
the rates at which transitions from 1 state to an other occur. Here is an
example of a continuous Markov chain:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/continuous_markov_chain.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This has transition rate matrix \(Q\) given by:&lt;/p&gt;



&lt;p&gt;The diagonals have negative entries, which can be interpreted as a rate of &lt;em&gt;no
change&lt;/em&gt;. To obtain the steady state probabilities \(\pi\) for this chain we
can solve the following matrix equation:&lt;/p&gt;



&lt;p&gt;if we include the fact that the sum of \(\pi\) must be 1 (so that it is indeed
a probability vector) we can obtain the probabilities in
&lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sagemath&lt;/a&gt; using the following:&lt;/p&gt;

&lt;p&gt;You can run this here (just click on ‘Evaluate’):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;This returns:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thus, if we were to randomly observe this chain:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;25% of the time it would be in state 1;&lt;/li&gt;
  &lt;li&gt;50% of the time it would be in state 2;&lt;/li&gt;
  &lt;li&gt;25% of the time it would be in state 3.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the markov chain in question means that if we’re in the first state the
rate at which a change happens to go to the second state is 2 and the rate at
which a change happens that goes to the third state is 1.&lt;/p&gt;

&lt;p&gt;This is analagous to waiting at a bus stop at the first city. Buses to the
second city arrive randomly 2 per hour, and buses to the third city arrive
randomly 1 per hour. Everyone waiting for a bus catches the first one that
arrives.  So at steady state the population will be spread amongst the three
cities according to \(\pi\).&lt;/p&gt;

&lt;p&gt;Consider yourself at this bus stop. As all this is Markovian we do not care what
time you arrived at the bus stop (memoryless property). You expect the bus to
the second city to arrive 1/2 hours from now, with randomness, and the bus to
the third city to arrive 1 hour from now, with randomness.&lt;/p&gt;

&lt;p&gt;To simulate this we can sample two random numbers from the
exponential distribution and find out which bus arrives
first and ‘catch that bus’:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expovariate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expovariate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above returned (for this particular instance):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5003491524841699&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.6107995795458322&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So here it’s going to take .5 hours for a bus to the second city to arrive, whereas it
would take .61 hours for a bus to the third. So we would catch the bust to the second city after spending 0.5 hours at the first city.&lt;/p&gt;

&lt;p&gt;We can use this to write a function that will take a transition rate matrix,
simulate the transitions and keep track of the time spent in each state:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample_from_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oo&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expovariate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;simulate_cmc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warm_up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# In case a matrix is input&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Index the state space&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time_spent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Set up a dictionary to keep track of time&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Keep track of the clock&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# First state&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Sample the transitions&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sojourn_times&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample_from_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sojourn_times&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# An infinite sojourn to the same state&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sojourn_times&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample_from_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]]&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Identify the next state&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sojourn_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sojourn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sojourn_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sojourn&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warm_up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Keep track if past warm up time&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;time_spent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sojourn&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_state&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Transition&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_spent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_spent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Calculate probabilities&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here are the probabilities from the same Markov chain as above:&lt;/p&gt;

&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;which gave (on one particular run):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.25447326473556037&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.49567517998307603&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.24985155528136352&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This approach was used by &lt;a href=&quot;https://twitter.com/geraintpalmer&quot;&gt;Geraint
Palmer&lt;/a&gt; who is doing a PhD with &lt;a href=&quot;http://www.profpaulharper.com/&quot;&gt;Paul
Harper&lt;/a&gt; and I. He used this to verify that
calculations were being carried out correctly when he was trying to fit a
model. &lt;a href=&quot;https://plus.google.com/+JamesCampbell95/posts&quot;&gt;James Campbell&lt;/a&gt; and I
are going to try to use this to get an approximation for bigger chains that
cannot be solved analytically in a reasonable amount of time. In essence the
simulation of the Markov chain makes sure we spend time calculating
probabilities in states that are common.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Including igraph Library</title>
		<link href="http://borassisagemath.blogspot.com/2015/07/including-igraph-library.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-2060557766871480571</id>
		<updated>2015-07-27T09:07:42+00:00</updated>
		<content type="html">Hello!&lt;br /&gt;In this new blog post, I would like to discuss the inclusion of igraph library inside Sage.&lt;br /&gt;Up to now, I have interfaced Sagemath with Boost graph library, in order to run Boost algorithms inside Sage. Now, I want to do the same with igraph, the other major C++ graph library, which stands out because it contains 62 routines, 29 of which are not available in Sage. Moreover, igraph library is very efficient, as shown in [1] and in the previous post on library comparison.&lt;br /&gt;&lt;br /&gt;This inclusion of igraph in Sage is quite complicated, because we have to include a new external library [2] (while in the Boost case we already had the sources). We started this procedure through ticket &lt;a href=&quot;http://trac.sagemath.org/ticket/18929&quot;&gt;18929&lt;/a&gt;: unfortunately, after this ticket is closed, igraph will only be an optional package, and we will have to wait one year before it becomes standard. The disadvantage of optional packages is that they must be installed before being able to use them; however, the installation is quite easy: it is enough to run Sage with option &lt;span&gt;-i python_igraph&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;After the installation, the usage of igraph library is very simple, because igraph already provides a Python interface, that can be used in Sage. To transform the Sagemath network &lt;span&gt;g_sage&lt;/span&gt; into an igraph network &lt;span&gt;g_igraph&lt;/span&gt;, it is enough to type &lt;span&gt;g_igraph=g_sage.igraph_graph()&lt;/span&gt;, while to create a Sagemath network from an igraph network it is enough to type &lt;span&gt;g_sage = Graph(g_igraph)&lt;/span&gt; or &lt;span&gt;&lt;span&gt;&lt;/span&gt;g_sage=DiGraph(g_igraph)&lt;span&gt;&lt;/span&gt;&lt;/span&gt;. After this conversion, we can use all routines offered by igraph!&lt;br /&gt;For instance, if we want to create a graph through the preferential attachment model, we can do it with the Sagemath routine, or with the igraph routine:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: G = graphs.RandomBarabasiAlbert(100, 2)&lt;br /&gt;sage: G.num_verts()&lt;br /&gt;100&lt;br /&gt;sage: G = Graph(igraph.Graph.Barabasi(100, int(2)))&lt;br /&gt;sage: G.num_verts()&lt;br /&gt;100&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The result is the same (apart from randomness), but the time is very different:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: import igraph&lt;br /&gt;sage: %timeit G = Graph(igraph.Graph.Barabasi(10000000, int(2)))&lt;br /&gt;1 loops, best of 3: 46.2 s per loop&lt;/span&gt;&lt;br /&gt;&lt;span&gt;sage: G = graphs.RandomBarabasiAlbert(10000000, 2)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;Stopped after 3 hours.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Otherwise, we may use igraph to generate graphs with Forest-Fire algorithm, which is not available in Sagemath:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: G = Graph(igraph.Graph.Forest_Fire(10, 0.1))&lt;br /&gt;sage: G.edges()&lt;br /&gt;[(0, 1, None), (0, 2, None), (1, 7, None), (2, 3, None), (2, 4, None), (3, 5, None), (3, 8, None), (4, 6, None), (8, 9, None)]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;We may also do the converse: transform a Sage network into an igraph network and apply an igraph algorithm. For instance, we can use label propagation to find communities (a task which is not implemented in Sage):&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: G = graphs.CompleteGraph(5)+graphs.CompleteGraph(5)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;sage: G.add_edge(0,5)&lt;br /&gt;sage: com = G.igraph_graph().community_label_propagation()&lt;br /&gt;sage: len(com)&lt;br /&gt;2&lt;br /&gt;sage: com[0]&lt;br /&gt;[0, 1, 2, 3, 4]&lt;br /&gt;sage: com[1]&lt;br /&gt;[5, 6, 7, 8, 9]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The algorithm found the two initial cliques as communities.&lt;br /&gt;&lt;br /&gt;I hope that these examples are enough to show the excellent possibilities offered by igraph library, and that these features will soon be available in Sagemath!&lt;br /&gt;&lt;br /&gt;[1] &lt;a href=&quot;https://sites.google.com/a/imtlucca.it/borassi/unpublished-works/google-summer-of-code/library-comparison&quot;&gt;https://sites.google.com/a/imtlucca.it/borassi/unpublished-works/google-summer-of-code/library-comparison&lt;/a&gt;&lt;br /&gt;[2] &lt;a href=&quot;http://doc.sagemath.org/html/en/developer/packaging.html&quot;&gt;http://doc.sagemath.org/html/en/developer/packaging.html&lt;/a&gt;</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2015-09-14T22:30:13+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">A talk on computational game theory in Sagemath</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/07/27/A-talk-on-computational-game-theory-in-Sagemath/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/07/27/A-talk-on-computational-game-theory-in-Sagemath/</id>
		<updated>2015-07-27T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Today, Cardiff University, School of Mathematics students: James Campbell, Hannah
Lorrimore as well as Google Summer of Code student Tobenna P. Igwe (PhD student
at the University of Liverpool) as well as I presented the current game
theoretic capabilities of &lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sagemath&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This talk happened as part of a two day visit to see &lt;a href=&quot;http://www.cs.ox.ac.uk/people/dmitrii.pasechnik/&quot;&gt;Dima
Pasechnik&lt;/a&gt; to work on the
stuff we’ve been doing and the visit was kindly supported by
&lt;a href=&quot;http://www.codima.ac.uk/&quot;&gt;CoDiMa&lt;/a&gt; (an
EPSRC funded project to support the development of GAP and Sagemath)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the video of the talk:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
        
    
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.sagemath.com/projects/2a31f88b-4244-4bd1-8e3a-3169ff24daac/files/Talk-2015-07-27/talk.sagews&quot;&gt;Here is a link to the sage worksheet we used for the talk.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some photos I took during the talk:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-0apjrcG0qEw/VbZsAWAPXtI/AAAAAAABlSo/ZYWuBQSwnL8/w747-h560-no/IMG_20150727_151428.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/Mdhv4ZH7H6Yww9H8P6hTJ5C8PTuTI55ysCjQUe-PTZ0=w747-h560-no&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-p6qHJDfk-xc/VbZsAab_4yI/AAAAAAABlSo/aj65EG02mvo/w747-h560-no/IMG_20150727_152941.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and here are some I took of us working on code afterwards:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-qBweJME_HBg/VbZsARW7D_I/AAAAAAABlTI/8GHa-SPNSxg/w747-h560-no/IMG_20150727_155756.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-kZLhblBepTE/VbZsAYQk_CI/AAAAAAABlTA/2USGMza-jj8/w747-h560-no/IMG_20150727_175244.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the abstract of the talk:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Game Theory is the study of rational interaction and is getting increasingly important in CS. Ability to quickly compute a solution concept for a nontrivial (non-)cooperative game helps a lot in practical and theoretic work, as well as in teaching.
This talk will describe
and demonstrate the game theoretic capabilities of Sagemath
(http://www.sagemath.org/), a Python library, described as having the following mission:
‘Creating a viable free opensource alternative to Magma, Maple, Mathematica and
Matlab’.&lt;/p&gt;

&lt;p&gt;The talk will describe algorithms and classes that are implemented for the
computation of Nash equilibria in bimatrix games. These include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A support enumeration algorithm;&lt;/li&gt;
  &lt;li&gt;A reverse search algorithm through the lrs library;&lt;/li&gt;
  &lt;li&gt;The Lemke-Howson algorithm using the Gambit library (https://github.com/gambitproject/gambit).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to this, demonstrations of further capabilities that are actively being
developed will also be given:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tests for degeneracy in games;&lt;/li&gt;
  &lt;li&gt;A class for extensive form games which include the use of the graph
theoretic capabilities of Sage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following two developments which are being carried out as part of a
Google Summer of Code project will also be demonstrated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An implementation of the Lemke-Howson algorithm;&lt;/li&gt;
  &lt;li&gt;Extensions to N player games;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Demonstrations will use the (free) online tool cloud.sagemath which allows anyone with
connectivity to use Sage (and solve game theoretic problems!). Cloud.sagemath
also serves as a great teaching and research tool with access to not only Sage but Jupyter
(Ipython) notebooks, R, LaTeX and a variety of other software tools.&lt;/p&gt;

&lt;p&gt;The talk will concentrate on strategic non-cooperative games but matching games
and characteristic function games will also be briefly discussed.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Using the two thirds of the average game in class</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/07/23/Using-the-two-thirds-of-the-average-game-in-class/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/07/23/Using-the-two-thirds-of-the-average-game-in-class/</id>
		<updated>2015-07-23T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This past week I have been delighted to have a short pedagogic paper accepted
for publication in &lt;a href=&quot;https://journals.gre.ac.uk/index.php/msor&quot;&gt;MSOR
Connections&lt;/a&gt;. The paper is entitled:
“Playing Games: A Case Study in Active Learning Applied to Game Theory”. The
journal is open access and you can see a &lt;a href=&quot;https://github.com/drvinceknight/Playing-games-a-case-study-in-active-learning/blob/master/paper/paper.pdf&quot;&gt;pre print
here&lt;/a&gt;.
As well as describing some literature on active learning I also present some
data I’ve been collecting (with the help of others) as to how people play two
subsequent plays of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Guess_2/3_of_the_average&quot;&gt;two thirds of the average
game&lt;/a&gt; (and talk about
another game also).&lt;/p&gt;

&lt;p&gt;In this post I’ll briefly put up the results here as well as mention a
Python library I’m working on.&lt;/p&gt;

&lt;p&gt;If you’re not familiar with it, the two thirds of the average game asks players
to guess a number between 0 and 100. The closest number to 2/3rds of the average
number guessed is declared the winner.&lt;/p&gt;

&lt;p&gt;I use this all the time in class and during outreach events. I start by asking
participants to play without more explanation than the basic rules of the game.
Following this, as a group we go over some simple best response dynamics that
indicate that the equilibrium play for the game is for everyone to guess 0.
&lt;strong&gt;After this explanation, everyone plays again.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Below you can see how this game has gone as a collection of all the data I’ve
put together:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/histogram_of_guesses.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will note that some participants actually increase their second guess but in
general we see a possible indication (based on two data points, so obviously
this is not meant to be a conclusive statement) of convergence towards the
theoretic equilibria.&lt;/p&gt;

&lt;p&gt;Here is a plot showing the relationship between the first and second guess (when
removing the guesses that increase, although as you can see in the paper this
does not make much difference):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/jointplot_of_guesses_removing_increasing_guesses.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The significant linear relationship between the guesses is given by:&lt;/p&gt;



&lt;p&gt;So a good indication of what someone will guess in the second round is that it
would be a third of their first round guess.&lt;/p&gt;

&lt;p&gt;Here is some Sage code that produces the cobweb diagram assuming the following
sequence represents each guess (using &lt;a href=&quot;http://wiki.sagemath.org/interact/dynsys&quot;&gt;code by Marshall
Hampton&lt;/a&gt;):&lt;/p&gt;



&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;that plot shows the iterations of the hypothetical guesses if we were to play more rounds :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The other thing&lt;/strong&gt; I wanted to point at in this blog post is this
&lt;a href=&quot;https://github.com/drvinceknight/TwoThirds&quot;&gt;twothirds&lt;/a&gt; library which will
potentially allow anyone to analyse these games quickly. I’m still working on
it but if it’s of interest please do jump in :) I have put up a &lt;a href=&quot;https://github.com/drvinceknight/TwoThirds/blob/master/demo.ipynb&quot;&gt;Jupyter
notebook demoing what it can do so far (which is almost everything but with
some rough
edges)&lt;/a&gt;. If
you want to try it out, download that notebook and run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install twothirds&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hope that once the library is set up anyone who uses it could simply send
over data of game plays via PR which would help update the above plots and
conclusions :)&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-US">
		<title type="html">Computing with Asymptotic Expressions</title>
		<link href="http://benjamin-hackl.at/2015/07/16/computing-with-asymptotic-expressions/"/>
		<id>http://benjamin-hackl.at/?p=358</id>
		<updated>2015-07-16T15:42:43+00:00</updated>
		<content type="html">&lt;p&gt;It has been quite some time since my last update on the progress of &lt;a href=&quot;http://benjamin-hackl.at/2015/05/29/asymptotic-expressions-motivation/&quot;&gt;my Google Summer of Code project&lt;/a&gt;, which has two reasons. On the one hand, I have been busy because of the end of the semester, as well as because of the finalization of &lt;a href=&quot;http://benjamin-hackl.at/2015/07/03/master-thesis-submitted/&quot;&gt;my Master&amp;#8217;s thesis&lt;/a&gt; &amp;#8212; and on the other hand, it is not very interesting to write a post on discussing and implementing rather technical details. Nevertheless, &lt;a href=&quot;http://danielkrenn.at&quot;&gt;Daniel Krenn&lt;/a&gt; and myself have been quite busy in order to bring asymptotic expressions to SageMath. Fortunately, these efforts are starting to become quite fruitful.&lt;/p&gt;
&lt;p&gt;In this post I want to discuss our current implementation roadmap (i.e. not only for the remaining Summer of Code, but also for the time afterwards), and give some examples for what we are currently able to do.&lt;/p&gt;
&lt;h3&gt;Strutcture and Roadmap&lt;/h3&gt;
&lt;p&gt;An overview of the entire roadmap can be found at &lt;a href=&quot;http://trac.sagemath.org/17601&quot;&gt;here (trac #17601)&lt;/a&gt;. Recall that the &lt;a href=&quot;http://benjamin-hackl.at/2015/05/29/asymptotic-expressions-motivation/&quot;&gt;overall goal&lt;/a&gt; of this project is to bring asymptotic expressions like $2^n + n^2 \log n + O(n)$ to Sage. Our implementation (which aims to be as general and expandable as possible) tackles this problem with a &lt;em&gt;three-layer approach&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://trac.sagemath.org/17600&quot;&gt;GrowthGroups and GrowthElements (trac #17600)&lt;/a&gt;.&lt;/em&gt; These elements and parents manage the growth (and just the growth!) of a summand in an asymptotic expression like above. The simplest cases are &lt;em&gt;monomial&lt;/em&gt; and &lt;em&gt;logarithmic&lt;/em&gt; growth groups. For example, their elements are given by $n^r$ and $\log(n)^r$ where the exponent $r$ is from some ordered ring like $\mathbb{Z}$ or $\mathbb{Q}$. Both cases (monomial and logarithmic growth groups) can be handled in the current implementation &amp;#8212; however, growth elements like $n^2 \log n$ are intended to live in the cartesian product of a monomial and a logarithmic growth group (in the same variable). Parts of this infrastructure are already prepared (see &lt;a href=&quot;http://trac.sagemath.org/18587&quot;&gt;trac #18587&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://trac.sagemath.org/17715&quot;&gt;AsymptoticTerms and TermMonoids (trac #17715)&lt;/a&gt;. &lt;/em&gt;While GrowthElements only represent the growth, AsymptoticTerms have more information: basically, they represent a summand in an asymptotic expression. There are different classes for each type of asymptotic term (e.g. &lt;em&gt;ExactTerm &lt;/em&gt;and &lt;em&gt;OTerm &amp;#8212; &lt;/em&gt;with more to come). Additionally to a growth element, some types of asymptotic terms (like exact terms) also possess a coefficient.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://trac.sagemath.org/17716&quot;&gt;AsymptoticExpression and AsymptoticRing (trac #17716)&lt;/a&gt;. &lt;/em&gt;This is what we are currently working on, and we do have a running prototype! &lt;img src=&quot;http://benjamin-hackl.at/asdf-wp/wp-includes/images/smilies/simple-smile.png&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; The version that can be found on trac is only missing some doctests and a bit of documentation. Asymptotic expressions are the central objects within this project, and essentially they are sums of several asymptotic terms. In the background, we use a special data structure (&amp;#8220;&lt;em&gt;mutable posets&lt;/em&gt;&amp;#8220;, &lt;a href=&quot;http://trac.sagemath.org/17693&quot;&gt;trac #17693&lt;/a&gt;) in order to model the (partial) order induced by the various growth elements belonging to an asymptotic expression. This allows to perform critical operations like &lt;em&gt;absorption&lt;/em&gt; (when an \(O\)-term absorbs &amp;#8220;weaker&amp;#8221; terms) efficiently and in a simple way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The resulting &lt;em&gt;minimal prototype&lt;/em&gt; can, in some sense, be compared to Sage&amp;#8217;s &lt;em&gt;PowerSeriesRing&lt;/em&gt;: however, we also allow non-integer exponents, and extending this prototype to work with multivariate expressions should not be too hard now, as the necessary infrastructure is there.&lt;/p&gt;
&lt;p&gt;Following the finalization of the &lt;em&gt;minimal prototype&lt;/em&gt;, there are several improvements to be made. Here are some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Besides addition and multiplication, we also want to &lt;em&gt;divide&lt;/em&gt; asymptotic expressions, and higher-order operations like exponentiation and taking the logarithm would be interesting as well.&lt;/li&gt;
&lt;li&gt;Also, conversion from, for example, the symbolic ring is important when it comes to usability of our tools. We will implement and enhance this conversion gradually.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;p&gt;An asymptotic ring (over a monomial growth group with coefficients and exponents from the rational field) can be created with&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: R.&amp;lt;x&amp;gt; = AsymptoticRing('monomial', QQ); R
Asymptotic Ring over Monomial Growth Group in x over Rational Field with coefficients from Rational Field&lt;/pre&gt;&lt;p&gt;Note that we marked the code as &lt;em&gt;experimental&lt;/em&gt;, meaning that you will see some warnings regarding the stability of the code. Now, as we have an asymptotic ring, we can do some calculations. For example, take $ (2\sqrt{x} + O(1))^{15}$:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: (2*x^(1/2) + O(x^0))^15
O(x^7) + 32768*x^(15/2)&lt;/pre&gt;&lt;p&gt;We can also have a look at the underlying structure:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: expr = (x^(3/7) + 2*x^(1/5)) * (x + O(x^0)); expr
O(x^(3/7)) + 2*x^(6/5) + 1*x^(10/7)
sage: expr.poset
poset(O(x^(3/7)), 2*x^(6/5), 1*x^(10/7))
sage: print expr.poset.full_repr()
poset(O(x^(3/7)), 2*x^(6/5), 1*x^(10/7))
+-- null
|   +-- no predecessors
|   +-- successors:   O(x^(3/7))
+-- O(x^(3/7))
|   +-- predecessors:   null
|   +-- successors:   2*x^(6/5)
+-- 2*x^(6/5)
|   +-- predecessors:   O(x^(3/7))
|   +-- successors:   1*x^(10/7)
+-- 1*x^(10/7)
|   +-- predecessors:   2*x^(6/5)
|   +-- successors:   oo
+-- oo
|   +-- predecessors:   1*x^(10/7)
|   +-- no successors&lt;/pre&gt;&lt;p&gt;As you might have noticed, the &amp;#8220;O&amp;#8221;-constructor that is used for the &lt;em&gt;PowerSeriesRing&lt;/em&gt; and related structures, can also be used here. In particular, $O(\mathit{expr})$ acts exactly as expected:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: expr
O(x^(3/7)) + 2*x^(6/5) + 1*x^(10/7)
sage: O(expr)
O(x^(10/7))&lt;/pre&gt;&lt;p&gt;Of course, the usual rules for computing with asymptotic expressions hold:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: O(x) + O(x)
O(x)
sage: O(x) - O(x)
O(x)&lt;/pre&gt;&lt;p&gt;So far, so good. Our next step is making the &lt;em&gt;multivariate growth groups&lt;/em&gt; usable for the &lt;em&gt;AsymptoticRing&lt;/em&gt; and then improving the overall user interface of the ring.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content>
		<author>
			<name>Benjamin Hackl</name>
			<uri>http://benjamin-hackl.at/tag/gsoc15/</uri>
		</author>
		<source>
			<title type="html">Benjamin Hackl » GSoC15</title>
			<link rel="self" href="http://benjamin-hackl.at/tag/gsoc15/feed/"/>
			<id>http://benjamin-hackl.at/tag/gsoc15/feed/</id>
			<updated>2015-09-11T10:30:16+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">New Boost Algorithms</title>
		<link href="http://borassisagemath.blogspot.com/2015/07/new-boost-algorithms.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-2595108397440560513</id>
		<updated>2015-07-09T12:51:47+00:00</updated>
		<content type="html">Hello!&lt;br /&gt;My Google Summer of Code project is continuing, and I am currently trying to include more Boost algorithms in Sage. In this post, I will make a list of the main algorithms I'm working on.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Clustering Coefficient&lt;/h4&gt;&lt;br /&gt;If two different people have a friend in common, there is a high chance that they will become friends: this is the property that the clustering coefficient tries to capture. For instance, if I pick two random people, very probably they will not know each other, but if I pick two of my acquaintances, very probably they will know each other. In this setting, the clustering coefficient of a person is the probability that two random acquaintances of this person know each other. In order to quantify this phenomenon, we can formalize everything in  terms of graphs: people are nodes and two people are connected if they  are acquaintances. Hence, we define the clustering coefficient of a vertex \(v\) in a graph  \(G=(V,E)\) as:&lt;br /&gt;$$\frac{2|\{(x,y) \in E:x,y \in N_v\}|}{\deg(v)(\deg(v)-1)}$$ where \(N_v\) is the set of neighbors of \(v\) and \(\deg(v)\) is the number of neighbors of \(v\). This is exactly the probability that two random neighbors of \(v\) are linked with an edge.&lt;br /&gt;My work has included in Sagemath the Boost algorithm to compute the clustering coefficient, which is more efficient that the previous algorithm, which was based on NetworkX:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: g = graphs.RandomGNM(20000,100000)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;sage: %timeit g.clustering_coeff(implementation='boost')&lt;/span&gt;&lt;br /&gt;&lt;span&gt;10 loops, best of 3: 258 ms per loop&lt;/span&gt;&lt;br /&gt;&lt;span&gt;sage: %timeit g.clustering_coeff(implementation='networkx')&lt;/span&gt;&lt;br /&gt;&lt;span&gt;1 loops, best of 3: 3.99 s per loop&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;But Nathann did better: he implemented a clustering coefficient algorithm from scratch, using Cython, and he managed to outperform the Boost algorithm, at least when the graph is dense. Congratulations, Nathann! However, when the graph is sparse, Boost algorithm still seems to be faster.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Dominator tree&lt;/h4&gt;&lt;br /&gt;Let us consider a road network, that is, a graph where vertices are street intersections, and edges are streets. The question is: if I close an intersection, where am I still able to go, assuming I am at home?&lt;br /&gt;The answer to this question can be summarized in a dominator tree. Assume that, in order to go from my home to my workplace, I can choose many different paths, but all these paths pass through the café, then they pass through the square (that is, if either the café or the square is closed, then there is no way I can go to work). In this case, in the dominator tree, the father of my workplace is the square, the father of the square is the café, and the father of the café is my home, that is also the root of the tree. More formally, given a graph \(G\), the dominator tree of \(G\) rooted at a vertex \(v\) is defined by connecting each vertex \(x\) with the last vertex \(y \neq x\) that belongs to each path from \(v\) to \(x\) (note that this vertex always exists, because \(v\) belongs to each path from \(v\) to \(x\)).&lt;br /&gt;Until now, Sagemath did not have a routine to compute the dominator tree: I have been able to include the Boost algorithm. Unfortunately, due to several suggestions and improvements in the code, the ticket is not closed, yet. Hopefully, it will be closed very soon!&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Cuthill-McKee ordering / King ordering&lt;/h4&gt;&lt;br /&gt;Let us consider a graph \(G=(V,E)\): a matrix \(M\) of size \(|V|\) can be associated to this graph, where \(M_{i,j}=1\) if and only if there is an edge between vertices \(i\) and \(j\).&lt;br /&gt;In some cases, this matrix can have specific properties, that can be exploited for many purposes, like speeding-up algorithms. One of this properties is bandwidth, which measures how far the matrix is from a diagonal matrix: it is defined as \(\max_{M_{i,j} \neq 0}|i-j|\). A small bandwidth might help in computing several properties of the graph, like eigenvalues and eigenvectors.&lt;br /&gt;Since the bandwidth depends on the order of vertices, we can try to permute them in order to obtain a smaller value: in Sage, we have a routine that performs this task. However, this routine is very slow, and it is prohibitive even for very small graphs (in any case, finding an optimal ordering is NP-hard).&lt;br /&gt;Hence, researchers have developed heuristics to compute good orderings: the most important ones are Cuthill-McKee ordering and King ordering. Boost contains both routines, but Sage does not: for this reason, I would like to insert these two functions. The code is almost ready, but part of it depends on the code of the dominator tree: as soon as the dominator tree is reviewed, I will open a ticket on these two routines!&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Dijkstra/Bellman-Ford/Johnson shortest paths&lt;/h4&gt;&lt;br /&gt;Let us consider again a road network. In this case, we are building a GPS software, which has to compute the shortest path between the place where we are and the destination. The textbook algorithm that performed this task is Dijkstra algorithm, which computes the distance between the starting point and any other reachable point (of course, there are more efficient algorithms involving a preprocessing, but Dijkstra is the most simple, and its running-time is asymptotically optimal). This algorithm is already implemented in Sagemath.&lt;br /&gt;Let's spice things up: what if that there are some streets with negative length? For instance, we like a street so much that we are willing to drive 100km more just to pass from that street, which is 50km long. It is like that street is -50km long!&lt;br /&gt;First of all, under these assumptions, a shortest path might not exist: if there is a cycle with negative length, we may drive along that cycle all the times we want, decreasing more and more the distance to the destination. At least, we have to assume that no negative cycle exists.&lt;br /&gt;Even with this assumption, Dijkstra algorithm does not work, and we have to perform Bellman-Ford algorithm, which is less efficient, but more general. Now, assume that we want something more: we are trying to compute the distance between all possible pairs of vertices. The first possibility is to run Bellman-Ford algorithm \(n\) times, where \(n\) is the number of nodes in the graph. But there is a better alternative: it is possible to perform Bellman-Ford algorithm only once, and then to modify the lengths of edges, so that all lengths are positive, and shortest paths are not changed. This way, we run Dijkstra algorithm \(n\) times on this modified graph, obtaining a better running time. This is Johnson algorithm.&lt;br /&gt;Both Bellman-Ford and Johnson algorithms are implemented in Boost and not in Sagemath. As soon as I manage to create weighted Boost graphs (that is, graphs where edges have a length), I will include also these two algorithm!</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2015-09-14T22:30:13+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Edge Connectivity through Boost Graph Library</title>
		<link href="http://borassisagemath.blogspot.com/2015/06/edge-connectivity-through-boost-graph_25.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-7547483421803460595</id>
		<updated>2015-06-25T00:56:40+00:00</updated>
		<content type="html">After two weeks, we have managed to interface Boost and Sagemath! &lt;br /&gt;&lt;br /&gt;However, the interface was not as simple as it seemed. The main problem we found is the genericity of Boost: almost all Boost algorithms work with several graph implementations, which differ in the data structures used to store edges and vertices. For instance, the code that implements breadth-first search works if the adjacency list of a vertex v is a vector, a list, a set, etc. This result is accomplished by using templates [1]. Unfortunately, the only way to interface Sagemath with C++ code is Cython, which is not template-friendly, yet. In particular, Cython provides genericity through fused types [2], whose support is still experimental, and which do not offer full integration with templates [3-5].&lt;br /&gt;&lt;br /&gt;After a thorough discussion with David, Nathann, and Martin (thank you very much!), we have found a solution: for the input, we have defined a fused type &quot;BoostGenGraph&quot;, including all Boost graph implementations, and all functions that interface Boost and Sagemath use this fused type. This way, for each algorithm, we may choose the most suitable graph implementation. For the output, whose type might be dependent on the input type, we use C++ to transform it into a &quot;standard&quot; type (vector, or struct).&lt;br /&gt;&lt;br /&gt;We like this solution because it is very clean, and it allows us to exploit Boost genericity without any copy-paste. Still, there are some drawbacks:&lt;br /&gt;1) Cython fused types do not allow nested calls of generic functions;&lt;br /&gt;2) Boost graphs cannot be converted to Python objects: they must be defined and deleted in the same Cython function;&lt;br /&gt;3) No variable can have a generic type, apart from the arguments of generic functions.&lt;br /&gt;&lt;br /&gt;These drawbacks will be overcome as soon as Cython makes templates and generic types interact: this way, we will be able create a much stronger interface, by writing a graph backend based on Boost, so that the user might create, convert, and modify Boost graphs directly from Python. However, for the moment, we will implement all algorithms using the current interface, which already provides genericity, and which has no drawback if the only goal is to &quot;steal&quot; algorithms from Boost.&lt;br /&gt;&lt;br /&gt;As a test, we have computed the edge connectivity of a graph through Boost: the code is available in ticket 18564 [6]. Since the algorithm provided by Sagemath is not optimal (it is based on linear programming), the difference in the running time is impressive, as shown by the following tests:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: G = graphs.RandomGNM(100,1000)&lt;br /&gt;sage: %timeit G.edge_connectivity()&lt;br /&gt;100 loops, best of 3: 1.42 ms per loop&lt;br /&gt;sage: %timeit G.edge_connectivity(implementation=&quot;sage&quot;)&lt;br /&gt;1 loops, best of 3: 11.3 s per loop&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: G = graphs.RandomBarabasiAlbert(300,3)&lt;br /&gt;sage: %timeit G.edge_connectivity(implementation=&quot;sage&quot;)&lt;br /&gt;1 loops, best of 3: 9.96 s per loop&lt;br /&gt;sage: %timeit G.edge_connectivity()&lt;br /&gt;100 loops, best of 3: 3.33 ms per loop&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Basically, on a random Erdos-Renyi graph with 100 vertices and 1000 edges, the new algorithm is 8,000 times faster, and on a random Barabasi-Albert graph with 300 nodes and average degree 3, the new algorithm is 3,000 times faster! This way, we can compute the edge connectivity of much bigger graphs, like a random Erdos-Renyi graph with 5,000 vertices and 50,000 edges:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: G = graphs.RandomGNM(5,000, 50,000)&lt;br /&gt;sage: %timeit G.edge_connectivity()&lt;br /&gt;1 loops, best of 3: 16.2 s per loop&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The results obtained with this first algorithm are very promising: in the next days, we plan to interface several other algorithms, in order to improve both the number of available routines and the speed of Sagemath graph library!&lt;br /&gt;&lt;br /&gt;[1] https://en.wikipedia.org/wiki/Template_%28C%2B%2B%29&lt;br /&gt;[2] http://docs.cython.org/src/userguide/fusedtypes.html&lt;br /&gt;[3] https://groups.google.com/forum/#!topic/cython-users/qQpMo3hGQqI&lt;br /&gt;[4] https://groups.google.com/forum/#!searchin/cython-users/fused/cython-users/-7cHr6Iz00Y/Z8rS03P7-_4J&lt;br /&gt;[5] https://groups.google.com/forum/#!searchin/cython-users/fused$20template/cython-users/-7cHr6Iz00Y/Z8rS03P7-_4J&lt;br /&gt;[6] http://trac.sagemath.org/ticket/18564</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2015-09-14T22:30:13+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">On testing degeneracy of bi-matrix games</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/06/25/on_testing_degeneracy_of_games/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/06/25/on_testing_degeneracy_of_games/</id>
		<updated>2015-06-25T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;We (&lt;a href=&quot;https://plus.google.com/+JamesCampbell95/posts&quot;&gt;James Campbell&lt;/a&gt; and Vince Knight are writing this together) have been working
on implementing code in &lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sage&lt;/a&gt; to test if a game is
degenerate or not. In this post we’ll prove a simple result that is used in the
algorithm that we are/have implemented.&lt;/p&gt;

&lt;h2 id=&quot;bi-matrix-games&quot;&gt;Bi-Matrix games&lt;/h2&gt;

&lt;p&gt;For a general overview of these sorts of things take a look at &lt;a href=&quot;http://vknight.org/unpeudemath/code/2014/12/10/sneak-preview-of-game-theory-in-sage-3-of-3/&quot;&gt;this post from a
while ago on the subject of bi-matrix games in
Sage&lt;/a&gt;.
A bi-matrix is a matrix of tuples corresponding to payoffs for a 2 player Normal Form Game.
Rows represent strategies for the first player and columns represent strategies
for the second player, and each tuple of the bi-matrix corresponds to a tuple of
payoffs. Here is an example:&lt;/p&gt;



&lt;p&gt;We see that if the first player plays their third row strategy and the second
player their second column strategy then the first player gets a utility of 6
and the second player a utility of 1.&lt;/p&gt;

&lt;p&gt;This can also be written as two separate matrices.
A matrix \(A\) for Player 1 and \(B\) for Player 2.&lt;/p&gt;



&lt;p&gt;Here is how this can be constructed in Sage using the &lt;code&gt;NormalFormGame&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalFormGame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Normal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;following&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Currently, within Sage, we can obtain the Nash equilibria of games:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtain_nash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We see that this game has 3 Nash equilibria. For each, we see that the
supports (the number of non zero entries) of both players’ strategies are the
same size. This is, in fact, a theoretical certainty when games are &lt;strong&gt;non
degenerate&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If we modify the game slightly:&lt;/p&gt;



&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalFormGame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtain_nash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We see that the second equilibrium has supports of different sizes. In fact,
 if the first player did play \((1,0,0)\) (in other words just play the
first row) the second player could play &lt;strong&gt;any mixture&lt;/strong&gt; of strategies as a best
response and not particularly \((2/3,1/3)\). This is because the game in
consideration is now &lt;strong&gt;degenerate&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;(Note that both of the games above are taken from
&lt;a href=&quot;https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CCEQFjAA&amp;url=http%3A%2F%2Fwww.cambridge.org%2Fjournals%2Fnisan%2Fdownloads%2FNisan_Non-printable.pdf&amp;ei=bymLVdTxBaS27gbYhILABg&amp;usg=AFQjCNGcYWvHGjECHZGGUuCMaENGCP2HYw&amp;sig2=w6RVpLM9DYILh2gbzOPRqw&amp;bvm=bv.96339352,bs.1,d.bGg&quot;&gt;Nisan et al. 2007 [pdf]&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-degenerate-game&quot;&gt;What is a degenerate game&lt;/h2&gt;

&lt;p&gt;A bimatrix game is called nondegenerate if the number of pure best responses to
a mixed strategy never exceeds the size of its support.
In a degenerate game, this definition is violated, for example if there is a
pure strategy that has two pure best responses (as in the example above), but
it is also possible to have a mixed strategy with support size \(k\) that
has \(k+1\) strategies that are a best response.&lt;/p&gt;

&lt;p&gt;Here is an example of this:&lt;/p&gt;



&lt;p&gt;If we consider the mixed strategy for player 2: \(y=(1/2,1/2)\), then the
utility to player 1 is given by:&lt;/p&gt;



&lt;p&gt;We see that there are 3 best responses to \(y\) and as \(y\) has support
size 2 this implies that the game above is degenerate.&lt;/p&gt;

&lt;h2 id=&quot;what-does-the-literature-say-about-degenerate-games&quot;&gt;What does the literature say about degenerate games&lt;/h2&gt;

&lt;p&gt;The original definition of degenerate games was given in &lt;a href=&quot;http://www.math.mcgill.ca/vetta/CS764.dir/lemke.pdf&quot;&gt;Lemke, Howson
1964 [pdf]&lt;/a&gt;
and their definition was dependent on the labeling polytope that they used for
their famous algorithm for the computation of equilibria (which is currently
being implemented in Sage!).
Further to this &lt;a href=&quot;https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CCEQFjAA&amp;url=http%3A%2F%2Fwww.cis.upenn.edu%2F~mkearns%2Fteaching%2Fcgt%2Fstengel.ps&amp;ei=HCmLVZ-vJOWM7Aa8_7kQ&amp;usg=AFQjCNGb_r3PDIvTBl4N3UXi55kDR_01OQ&amp;sig2=9yUZEl49EmM5nAUD95oOjg&amp;bvm=bv.96339352,bs.1,d.bGg&quot;&gt;Stengel
1999 [ps]&lt;/a&gt; offers a nice overview of a variety of
equivalent definitions.&lt;/p&gt;

&lt;p&gt;Sadly, all of these definitions require finding a particular mixed strategy
profile \((x, y)\) for which a particular condition holds.
To be able to implement a test for degeneracy based on any of these definitions
would require a continuous search over possible mixed strategy pairs.&lt;/p&gt;

&lt;p&gt;In the previous example (where we take \(y=(1/2,1/2)\) we could have
identified this \(y\) by looking at the utilities for each pure strategy for
player 1 against \(y=(y_1, 1-y_1)\):&lt;/p&gt;







&lt;p&gt;(\(r_i\) denotes row strategy \(i\) for player 1.)
A plot of this is shown:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/plot_for_degenerate_game_post.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can (in this instance) quickly search through values of \(y_1\) and
identify the point that has &lt;strong&gt;the most&lt;/strong&gt; best responses which gives the best
chance of passing the degeneracy condition (\(y_1=1/2\)).
This is not really practical from a generic point of view which leads to
this blog post: we have identified what the particular \(x, y\) is that
is sufficient to test.&lt;/p&gt;

&lt;h2 id=&quot;a-sufficient-mixed-strategy-to-test-for-degeneracy&quot;&gt;A sufficient mixed strategy to test for degeneracy&lt;/h2&gt;

&lt;p&gt;The definition of degeneracy can be written as:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Def.&lt;/strong&gt; A Normal Form Game is degenerate iff:&lt;/p&gt;

&lt;p&gt;There exists \(x\in \Delta X\) such that \( |S(x)| &amp;lt; |\sigma_2| \)
where \(\sigma_2\) is the support such that \( (xB)_j = \max(xB) \), for all
\(j \) in \( \sigma_2\).&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;There exists \(y\in \Delta Y\) such that \( |S(x)| &amp;lt; |\sigma_1| \)
where \(\sigma_1\) is the support such that \( (Ay)_i = \max(Ay) \), for all
\(i \) in \( \sigma_1\).&lt;/p&gt;

&lt;p&gt;(\(X\) and \(Y\) are the pure strategies for player 1 and 2 and \(\Delta X,
\Delta Y\) the corresponding mixed strategies spaces.&lt;/p&gt;

&lt;p&gt;The result we are implementing in Sage aims to remove the need to search
particular mixed strategies \(x, y\) (a continuous search) and replace
that by a search over supports (a discrete search).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt; A Normal Form Game is degenerate iff:&lt;/p&gt;

&lt;p&gt;There exists \( \sigma_1 \subseteq X \) and \( \sigma_2 \subseteq Y \)
such that \( |\sigma_1| &amp;lt; |\sigma_2| \) and \( S(x^*) = \sigma_1 \)
where \( x^* \) is a solution of \( (xB)_j = \max(xB) \), for
all \(j \) in \( \sigma_2 \) (note that a valid \(x^*\) is understood to
be a mixed strategy vector).&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;There exists \( \sigma_1 \subseteq X \) and \( \sigma_2 \subseteq Y \)
such that \( |\sigma_1| &amp;gt; |\sigma_2| \) and \( S(y^*) = \sigma_2 \)
where \( y^* \) is a solution of \( (Ay)_i = \max(Ay) \), for
all \(i \) in \( \sigma_1 \).&lt;/p&gt;

&lt;p&gt;Using the definition given above the proof is relatively straightforward but we
will include it below (mainly to try and convince ourselves that we haven’t made a
mistake).&lt;/p&gt;

&lt;p&gt;We will only consider the first part of each condition (the ones for the first
player). The result follows in the same way for the second player.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof \(\Leftarrow\)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Assume a game defined by \(A, B\) is degenerate, by the above &lt;strong&gt;definition&lt;/strong&gt;
without loss of generality this implies that there exists an
\(x\in \Delta X\) such that \( |S(x)| &amp;lt; |\sigma_2| \)
where \(\sigma_2\) is the support such that \( (xB)_j = \max(xB) \), for all
\(j \) in \( \sigma_2\).&lt;/p&gt;

&lt;p&gt;If we denote \(S(x)\) by \(\sigma_1\)
then the definition implies that \(|\sigma_1| &amp;lt; |\sigma_2| \)
and further more that \( (xB)_j = \max(xB) \), for all \(j \) in \( \sigma_2 \) as required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof \(\Rightarrow\)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we now assume that we have \(\sigma_1, \sigma_2, x^*\) as per the first part
of the theorem then we have \(|\sigma_1|&amp;lt;|\sigma_2|\) and taking \(x=x^*\)
implies that \(|S(x)|&amp;lt;|\sigma_2|\). Furthermore as \(x^*\) is a solution of
\( (xB)_j = \max(xB) \) the result follows (by the &lt;strong&gt;definition&lt;/strong&gt; given above).&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;This result implies that we simply need to consider all potential pairs of
supports. Depending on the relative size of the supports we can use one of the
two conditions of the result. If we ordered the supports by size the situation
for the two player game looks somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/diagram_for_search_space_for_post_on_degenerate_game.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that for an \(m\times n\) game there are \((2^m-1)\) potential supports
for player 1 (the size of the powerset of strategy set without the empty set)
and \((2^n-1)\) potential supports of for player 2.
Thus the rectangle drawn above has dimension \((2^m-1)\times(2^n-1)\).
Needless to say that our implementation will not be efficient (testing
degeneracy is after all an NP complete problem in linear programming (see &lt;a href=&quot;http://www-personal.umich.edu/~murty/np-comp_prob_lin_prog.pdf&quot;&gt;Chandrasekaran 1982 - [pdf]&lt;/a&gt;) but at least we
have identified exactly which mixed strategy we need to test for each support
pair.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Chandrasekaran, R., Santosh N. Kabadi, and Katta G. Murthy. “Some NP-complete
problems in linear programming.” Operations Research Letters 1.3 (1982):
101-104.
&lt;a href=&quot;http://www-personal.umich.edu/~murty/np-comp_prob_lin_prog.pdf&quot;&gt;[pdf]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lemke, Carlton E., and Joseph T. Howson, Jr. “Equilibrium points of bimatrix
games.” Journal of the Society for Industrial &amp;amp; Applied Mathematics 12.2
(1964): 413-423. &lt;a href=&quot;http://www.math.mcgill.ca/vetta/CS764.dir/lemke.pdf&quot;&gt;[pdf]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;N Nisan, T Roughgarden, E Tardos, VV Vazirani Vol. 1. Cambridge:
Cambridge University Press, 2007. &lt;a href=&quot;https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CCEQFjAA&amp;url=http%3A%2F%2Fwww.cambridge.org%2Fjournals%2Fnisan%2Fdownloads%2FNisan_Non-printable.pdf&amp;ei=bymLVdTxBaS27gbYhILABg&amp;usg=AFQjCNGcYWvHGjECHZGGUuCMaENGCP2HYw&amp;sig2=w6RVpLM9DYILh2gbzOPRqw&amp;bvm=bv.96339352,bs.1,d.bGg&quot;&gt;[pdf]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;von Stengel, B. “Computing equilibria for two person games.” Technical report.
&lt;a href=&quot;https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CCEQFjAA&amp;url=http%3A%2F%2Fwww.cis.upenn.edu%2F~mkearns%2Fteaching%2Fcgt%2Fstengel.ps&amp;ei=HCmLVZ-vJOWM7Aa8_7kQ&amp;usg=AFQjCNGb_r3PDIvTBl4N3UXi55kDR_01OQ&amp;sig2=9yUZEl49EmM5nAUD95oOjg&amp;bvm=bv.96339352,bs.1,d.bGg&quot;&gt;[ps]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Python, natural language processing and predicting funny</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/06/14/natural-language-and-predicting-funny/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/06/14/natural-language-and-predicting-funny/</id>
		<updated>2015-06-14T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Every year there is a big festival in Edinburgh called &lt;a href=&quot;https://tickets.edfringe.com/?gclid=Cj0KEQjwzPSrBRC_oOXfxPWP6t0BEiQARqav2KeTlfbBfcnFIHJN6llKStyz-2p1di-dm69gm88C3B0aAivP8P8HAQ&quot;&gt;the fringe
festival&lt;/a&gt;.
I blogged about this a while ago, &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2013/08/a-very-brief-and-shallow-analysis-of.html&quot;&gt;in that post I did a very basic bit of
natural language
processing&lt;/a&gt;
aiming to try and identify what made things funny.
In this blog post I’m going to push that a bit further by building a
classification model that aims to predict if a joke is funny or not.
(tldr: I don’t really succeed but but that’s mainly because I have very little
data - having more data would not necessarily guarantee success either but the code and approach is what’s worth taking from this post… 😪).&lt;/p&gt;

&lt;p&gt;If you want to skip the brief description and go straight to look at the code
you can find the &lt;a href=&quot;https://github.com/drvinceknight/EdinburghFringeJokes/blob/master/nlp-of-jokes.ipynb&quot;&gt;ipython notebook on github
here&lt;/a&gt; and &lt;a href=&quot;https://cloud.sagemath.com/projects/a4f27edc-8528-4c7f-adf7-b6c790e29349/files/nlp-of-jokes.html&quot;&gt;on cloud.sagemath here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;data&lt;/strong&gt; comes from a series of &lt;a href=&quot;http://www.bbc.co.uk/news/uk-scotland-edinburgh-east-fife-28838287&quot;&gt;BBC
articles&lt;/a&gt;
which reports (more or less every year since 2011?) the top ten jokes at the
fringe festival. This does in fact only give 60 odd jokes to work with…&lt;/p&gt;

&lt;p&gt;Here is the latest winner (by Tim Vine):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I decided to sell my Hoover… well it was just collecting dust.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After cleaning it up slightly I’ve thrown that all in a &lt;a href=&quot;https://github.com/drvinceknight/EdinburghFringeJokes/blob/master/jokes.json&quot;&gt;&lt;code&gt;json&lt;/code&gt; file here&lt;/a&gt;.
So in order to import the data in to a panda data frame I just run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pandas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'jokes.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Loading the json file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pandas is great, I’ve been used to creating my own bespoke classes for handling
data but in general just using pandas does the exact right job.
At this point I basically follow along with
&lt;a href=&quot;http://www.laurentluce.com/posts/twitter-sentiment-analysis-using-python-and-nltk/&quot;&gt;this post on sentiment analysis of twitter&lt;/a&gt; which makes use of the ridiculously powerful &lt;code&gt;nltk&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;nltk&lt;/code&gt; library to ‘tokenise’ and get rid of common words:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;commonwords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nltk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corpus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopwords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'english'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# &amp;lt;- Need to download the corpus: import nltk; nltk.download()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;commonwords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'VE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Adding a couple of things that need to be removed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tokenizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nltk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokenize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegexpTokenizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'\w+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# To be able to strip out unwanted things in strings&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string_to_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokenize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commonwords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Joke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Raw_joke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this requires downloading one of the awesome corpuses
(&lt;a href=&quot;https://www.google.co.uk/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;es_th=1&amp;ie=UTF-8#q=plural%20of%20corpus&amp;es_th=1&quot;&gt;thats apparently the right way to say that&lt;/a&gt;) from nltk.&lt;/p&gt;

&lt;p&gt;Here is how this looks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'I decided to sell my Hoover... well it was just collecting dust.'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which gives:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'DECIDED'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'SELL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'HOOVER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'WELL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'COLLECTING'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'DUST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;we-can-now-get-started-on-building-a-classifier&quot;&gt;We can now get started on building a classifier&lt;/h2&gt;

&lt;p&gt;Here is the general idea of what will be happening:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/description_of_ratio_learning_for_nlp_jokes.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First of all we need to build up the ‘features’ of each joke,
in other words pull the words out in to a nice easy format.&lt;/p&gt;

&lt;p&gt;To do that we need to find all the words from our training data set, another way of describing this is that we need to build up our dictionary:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_all_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    A function that gets all the words from the Joke column in a given dataframe&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;all_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jk&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Joke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;all_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_words&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;all_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_all_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# This uses all jokes before 2013 as our training data set.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We then build something that will tell us for each joke which of the overall words is in it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'contains(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Once we have done that, we just need to decide what we will call a &lt;strong&gt;funny&lt;/strong&gt; joke&lt;/em&gt;. For this purpose
We’ll use a &lt;code&gt;funny_threshold&lt;/code&gt; and any joke that ranks above the
&lt;code&gt;funny_threshold&lt;/code&gt; in any given year will be considered &lt;strong&gt;funny&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;funny_threshold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rank'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rank'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Funny'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rank'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funny_threshold&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we just need to create a tuple for each joke that puts the features mentioned earlier and a classification (if the joke was funny or not) together:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Labeled_Feature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Features'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Funny'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can now (&lt;strong&gt;in one line of code!!!!&lt;/strong&gt;) create a classifier:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nltk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NaiveBayesClassifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Labeled_Feature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This classifier will take into account all the words in a given joke and spit out if it’s funny or not.
It can also give us some indication as to what makes a joke funny or not:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show_most_informative_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is the output of that:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;Most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Informative&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Features&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;2.4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KNOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEOPLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRIEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOUGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This immediately gives us some information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If your joke is about &lt;code&gt;SEX&lt;/code&gt; is it more likely to &lt;em&gt;not&lt;/em&gt; be funny.&lt;/li&gt;
  &lt;li&gt;If your joke is about &lt;code&gt;FRIEND&lt;/code&gt;s is it more likely to &lt;em&gt;be&lt;/em&gt; funny.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all very nice but we can now (theoretically - again, I really don’t have enough data for this) start using the mathematical model to tell you if something is funny:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Why was 10 afraid of 7? Because 7 8 9'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_all_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That joke is apparently funny (the output of above is &lt;code&gt;True&lt;/code&gt;). The following joke however is apparently not (the output of below if &lt;code&gt;False&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Your mother is ...'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_all_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see in the &lt;a href=&quot;https://github.com/drvinceknight/EdinburghFringeJokes/blob/master/nlp-of-jokes.ipynb&quot;&gt;ipython notebook&lt;/a&gt;
it is then very easy to measure how good the predictions are
(I used the data from years before 2013 to predict 2014).&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;Here is a plot of the accuracy of the classifier for changing values of &lt;code&gt;funny_threshold&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/varying_values_of_funny_threshold.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll notice a couple of things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When the threshold is 0 or 1: the classifier works perfectly.
This makes sense: all the jokes are either funny or not so it’s very easy
for the classifier to do well.&lt;/li&gt;
  &lt;li&gt;There seems to be a couple of regions where the classifier does
particularly poorly: just after a value of 4. Indeed there are points where
the classifier does worse than flipping a coin.&lt;/li&gt;
  &lt;li&gt;At a value of 4, the classifier does particularly well!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, one final thing I’ll take a look at is what happens if I start
randomly selecting a portion of the entire data set to be the training set:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/description_of_random_ratio_learning_for_nlp_jokes.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Below are 10 plots that correspond to 50 repetitions of the above where I
randomly sample a ratio of the data set to be the training set:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally (although it’s really not helpful), here are all of those on a single plot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-all.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First of all: all those plots are basically one line of &lt;a href=&quot;http://stanford.edu/~mwaskom/software/seaborn/&quot;&gt;&lt;code&gt;seaborn&lt;/code&gt; code&lt;/a&gt; which is ridiculously cool&lt;/strong&gt;. Seaborn is basically magic:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tsplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Second of all, it looks like the lower bound of the classifiers is around .5.
Most of them start of at .5, in other words they are as good as flipping a coin
before we let them learn from anything, which makes sense.
Finally it seems that the threshold of 4 classifier seems to be the only one that
gradually improves as more data is given to it. That’s perhaps indicating that
something interesting is happening there but that investigation would be for another day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All of the conclusions about the actual data should certainly not be taken seriously:
I simply do not have enough data.&lt;/strong&gt; But, the overall process and code is what is worth taking away.
&lt;strong&gt;It’s pretty neat that the variety of awesome python libraries
lets you do this sort of thing more or less out of the box.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please do take a look at &lt;a href=&quot;https://github.com/drvinceknight/EdinburghFringeJokes&quot;&gt;this github repository&lt;/a&gt;
but I’ve also just put the notebook on &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;cloud.sagemath&lt;/a&gt; so assuming you
&lt;code&gt;pip install&lt;/code&gt; the libraries and get the data etc you can play around with this right in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.sagemath.com/projects/a4f27edc-8528-4c7f-adf7-b6c790e29349/files/nlp-of-jokes.html&quot;&gt;Here is the notebook on cloud.sagemath&lt;/a&gt;.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Performance Comparison of Different Graph Libraries</title>
		<link href="http://borassisagemath.blogspot.com/2015/06/performance-comparison-of-different.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-517109036063053537</id>
		<updated>2015-06-09T07:30:46+00:00</updated>
		<content type="html">As promised in the last post, I have compared the performances of several graph libraries, in order to choose which ones should be deployed with Sagemath. Here, I provide the main results of this analysis, while more details are available on &lt;a href=&quot;https://sites.google.com/a/imtlucca.it/borassi/unpublished-works/google-summer-of-code/library-comparison&quot;&gt;my website&lt;/a&gt; (see also the links below).&lt;br /&gt;The libraries chosen are the most famous graph libraries written in Python, C, or C++ (I have chosen these languages because they are easier to integrate in Sagemath, using Cython). Furthermore, I have excluded NetworkX, which is already deployed with Sagemath.&lt;br /&gt;First of all, I have to enforce that no graph library comparison can be completely fair, and also this comparison can be criticized, due to the large amount of available routines, to the constant evolution of libraries, and to many small differences in the outputs (for instance, one library might compute the value of a maximum s-t flow, another library might actually compute the flow, and a third one might compute all maximum flows). Despite this, I have tried to be as fair as possible, through a deeper and more detailed analysis than previous comparisons (&lt;a href=&quot;https://graph-tool.skewed.de/performance&quot;&gt;https://graph-tool.skewed.de/performance&lt;/a&gt;, &lt;a href=&quot;http://www.programmershare.com/3210372/&quot;&gt;http://www.programmershare.com/3210372/&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/pdf/1403.3005.pdf&quot;&gt;http://arxiv.org/pdf/1403.3005.pdf&lt;/a&gt;).&lt;br /&gt;The first comparison deals with the number of algorithms implemented. I have chosen a set of 107 possible algorithms, trying to cover all possible tasks that a graph library should perform (avoiding easy tasks that are common to all libraries, like outputting the number of nodes, the number of edges, the neighbors of a node, etc). In some cases, two tasks were collapsed in one, if the algorithms solving these tasks are very similar (for instance, computing a maximum flow and computing a minimum cut, computing vertex betweenness and edge betweenness, etc).&lt;br /&gt;The number of routines available for each library is plotted in the following chart, and a table containing all features is available in &lt;a href=&quot;https://sites.google.com/a/imtlucca.it/borassi/unpublished-works/google-summer-of-code/library-comparison/detailed-feature-comparison&quot;&gt;HTML&lt;/a&gt; or as a &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1Iu1hkQtRn9J-sgfZbQTu2RoXzyjoMEWP5-cm3nAwnWE/edit?usp=sharing&quot;&gt;Google Sheet&lt;/a&gt;.&lt;br /&gt;        &lt;br /&gt;The results show that Sagemath has more routines than all competitors (66), closely followed by igraph (62). All other libraries are very close to each other, having about 30 routines each. Furthermore, Sagemath could be improved in the fields of neighbor similarity measures (assortativity, bibcoupling, cocitation, etc), community detection, and random graph generators. For instance, igraph contains 29 routines that are not available in Sagemath.&lt;br /&gt;&lt;br /&gt;The second comparison analyzes the running-time of some of the algorithms implemented in the libraries. In particular, I have chosen 8 of the most common tasks in graph analysis: computing the diameter, computing the maximum flow between two vertices, finding connected components and strongly connected components, computing betweenness centrality, computing the clustering coefficient, computing the clique number, and generating a graph with the preferential attachment model. I have run each of these algorithms on 3 inputs, and I have considered the total execution time (excluding the time needed to load the graph). More details on this experiment are available &lt;a href=&quot;https://sites.google.com/a/imtlucca.it/borassi/unpublished-works/google-summer-of-code/library-comparison/detailed-performance-comparison&quot;&gt;here&lt;/a&gt;, and the results are also available in a &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1Iu1hkQtRn9J-sgfZbQTu2RoXzyjoMEWP5-cm3nAwnWE/edit?usp=sharing&quot;&gt;Google Sheet&lt;/a&gt;.&lt;br /&gt;In order to make the results more readable, I have plotted the ratio between the time needed by a given library and the minimum time needed by any library. If an algorithm was not implemented, or it needed more than 3 hours to complete, the corresponding bar is not shown.&lt;br /&gt;     &lt;br /&gt;Overall, the results show that NetworKit is the fastest library, or one of the fastest, in all routines that are implemented (apart from the generation of preferential attachment graphs, where it is very slow). Boost graph library is very close to NetworKit, and it also contains more routines. Also Sagemath is quite efficient in all tasks, apart from the computation of strongly connected components and the generation of a preferential attachment graph, where it needed more than 3 hours. However, in the latter case, the main problem was not speed but memory consumption.&lt;br /&gt;&lt;br /&gt;In conclusion, Sagemath can highly benefit from the possibility of using algorithms from other libraries. First of all, it might improve the number of algorithms offered, especially by including igraph, and it also might improve its performance, by including Boost, NetworKit, or other fast graph libraries.</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2015-09-14T22:30:13+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Comparison of Graph Libraries</title>
		<link href="http://borassisagemath.blogspot.com/2015/06/comparison-of-graph-libraries.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-5727768572864220659</id>
		<updated>2015-06-04T02:11:58+00:00</updated>
		<content type="html">Many times, people asked me &quot;Which is the best available graph library?&quot;, or &quot;Which graph library should I use to compute this, or that?&quot;.&lt;br /&gt;Well, personally I love to use Sage, but there are also several good alternatives. Then, the question becomes &quot;How could we improve Sage, so that people will choose it?&quot;.&lt;br /&gt;&lt;br /&gt;In my opinion, graph libraries are compared according to the following parameters:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;simplicity and documentation: people have little time, and the faster they learn how to use the library, the better;&lt;/li&gt;&lt;li&gt;number of routines available;&lt;/li&gt;&lt;li&gt;speed: sometimes, the input is very big, and the algorithms take much time to finish, so that a fast implementation is fundamental.&lt;/li&gt;&lt;/ol&gt;While it is very difficult to measure the first point, the others can be compared and improved. For this reason, in order to outperform other libraries, we should implement new features, and improve existing ones. You don't say!&lt;br /&gt;&lt;br /&gt;However, this answer is not satisfactory: in principle, we could add all features available in other libraries, but this is a huge translational work, and while we are doing this work the other libraries will change, making this effort a never-ending story.&lt;br /&gt;&lt;br /&gt;My project proposes an alternative: cooperating instead of competing. I will try to interface Sage with other libraries, and to use their algorithms when the Sage counterpart is not available, or less efficient. This way, with an affordable amount of work, we will be able to run all algorithms available in the best graph libraries!&lt;br /&gt;&lt;br /&gt;As a first step, I have compared all the most famous C, C++, and Python graph libraries according to points 2 and 3, in order to choose which libraries should be included. The next posts will analyze the results of this comparison.</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2015-09-14T22:30:13+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Google Summer of Code: let's start!</title>
		<link href="http://borassisagemath.blogspot.com/2015/06/google-summer-of-code-lets-start.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-6371615580569256662</id>
		<updated>2015-06-04T01:10:03+00:00</updated>
		<content type="html">This blog will follow my Google Summer of Code project, entitled &lt;i&gt;Performance Improvements for the Graph Module of Sagemath&lt;/i&gt;. The complete project is available &lt;a href=&quot;https://sites.google.com/a/imtlucca.it/borassi/unpublished-works/google-summer-of-code&quot;&gt;here&lt;/a&gt;, and related documents with partial results will be available on the same website.&lt;br /&gt;In this first post, I would like to thank my mentor David Coudert and Nathann Cohen, who helped me a lot in writing this project and understanding how the graph module of Sagemath works.&lt;br /&gt;With their help, and with the help of the Sage community, I hope it will be a useful and funny work! Let's start!</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2015-09-14T22:30:13+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-US">
		<title type="html">Asymptotic Expressions: Motivation</title>
		<link href="http://benjamin-hackl.at/2015/05/29/asymptotic-expressions-motivation/"/>
		<id>http://benjamin-hackl.at/?p=244</id>
		<updated>2015-05-29T01:34:40+00:00</updated>
		<content type="html">&lt;p&gt;\( \def\R{\mathbb{R}} \)So, as Google Summer of Code started on Monday, May 25th it is time to give a proper motivation for the project I have proposed. The working title of my project is &lt;b&gt;&lt;i&gt;(Multivariate) Asymptotic Expressions&lt;/i&gt;&lt;/b&gt;, and its overall goal is to bring &lt;em&gt;asymptotic expressions&lt;/em&gt; to SageMath.&lt;/p&gt;
&lt;h3&gt;What are A&lt;em&gt;symptotic Expressions?&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;A motivating answer for this question comes from the theory of &lt;a href=&quot;http://en.wikipedia.org/wiki/Taylor_series&quot;&gt;Taylor series&lt;/a&gt;. Assume that we have a sufficiently nice (in this case meaning smooth) function $f : \R \to \R$ that we want to approximate in a neighborhood of some point $x_0 \in \R$. Taylor&amp;#8217;s theorem allows us to write $f(x) = T_n(x) + R_n(x)$ where&lt;/p&gt;
&lt;p&gt;\[ T_n(x) = \sum_{j=0}^n \frac{f^{(j)}(x_0)}{j!}\cdot (x-x_0)^j = f(x_0) + f'(x_0)\cdot (x-x_0) + \cdots + \frac{f^{(n)}(x_0)}{n!}\cdot (x-x_0)^n,  \]&lt;/p&gt;
&lt;p&gt;and $R_n(x) = \frac{f^{(n+1)}(\xi)}{(n+1)!} \cdot (x-x_0)^{n+1}$, where $\xi$ lies in a neighborhood of $x_0$. Note that for $x\to x_0$, $R_n(x)$ &amp;#8220;behaves like&amp;#8221; $(x-x_0)^{n+1}$. In particular, we can certainly find a constant $C &amp;gt; 0$ such that $|R_n(x)| \leq C\cdot |x-x_0|^{n+1}$, or, in other words: for $x\to x_0$ the growth of the function $R_n(x)$ is bounded from above by the growth of $(x-x_0)^{n+1}$.&lt;/p&gt;
&lt;p&gt;The idea of bounding the growth of a function by the growth of another function when the argument approaches some number (or $\infty$) is the central idea behind the &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;big O notation&lt;/a&gt;. &lt;/em&gt;For function $f, g : \R \to \R$ we write $f(x) = O(g(x))$ for $x\to x_0$ if there is a constant $C &amp;gt; 0$ such that $|f(x)| \leq C\cdot |g(x)|$ for all $x$ in some neighborhood of $x_0$.&lt;/p&gt;
&lt;p&gt;A case that is particularly important is the case of $x_0 = \infty$, that is if we want to compare and/or characterize the behavior of some function for $x\to\infty$, which is also called the functions &lt;em&gt;asymptotic behavior&lt;/em&gt;. For example, consider the functions $\log x$, $x^3$ and $e^x$. All of them are growing unbounded for $x\to\infty$ &amp;#8212; however, their asymptotic behavior differs. This can be seen by considering pairwise quotients of these functions: $\frac{x^3}{e^x} \to 0$ for $x\to\infty$, and therefore the asymptotic growth of $x^3$ can be bounded above by the growth of $e^x$, meaning $x^3 = O(e^x)$ for $x\to\infty$.&lt;/p&gt;
&lt;p&gt;The analysis of a functions asymptotic behavior is important for many applications, for example when determining time and space complexity of algorithms in computer science, or for describing the growth of classes of combinatorial objects: take, for example, binary strings of length $2n$ that contain equally many zeros and ones. If $s_n$ denotes the number of such strings, then we have&lt;/p&gt;
&lt;p&gt;\[ s_n = \binom{2n}{n} = \frac{4^n}{\sqrt{n\pi}} \left(1 + O\left(\frac{1}{n}\right)\right) \quad\text{ for } n\to\infty. \]&lt;/p&gt;
&lt;p&gt;Expressions like these are &lt;em&gt;asymptotic expressions.&lt;/em&gt; When we consider asymptotic expressions in only one variable, everything works out nicely as a total order is induced. But as soon as multiple variables are involved, we don&amp;#8217;t have a total order any more. Consider, for example, $x^2 y$ and $xy^2$ when $x$ and $y$ approach $\infty$. These two elements cannot be compared to each other, which complicates computing with these expressions as they may contain multiple &amp;#8220;irreducible&amp;#8221; O-terms.&lt;/p&gt;
&lt;p&gt;The following univariate and multivariate examples shall demonstrate how computing with such expressions looks like (all variables are assumed to go to $\infty$):&lt;/p&gt;
&lt;p&gt;\[ x + O(x) = O(x),\quad x^2 \cdot (x + O(1)) = x^3 + O(x^2),\quad O(x^2) \cdot O(x^3) = O(x^5),  \]&lt;/p&gt;
&lt;p&gt;\[ x y + O(x^2 y) = O(x^2y),\quad (y \log y + O(y)) (x^2 y + O(4^x \sqrt{x})) =  x^2 y^2 \log y + O(x^2 y^2) + O(4^x \sqrt{x} y \log y).   \]&lt;/p&gt;
&lt;p&gt;Our plan is to provide an implementation based on which computations with these and more complicated expressions are possible.&lt;/p&gt;
&lt;h3&gt;Planned Structure&lt;/h3&gt;
&lt;p&gt;There are four core concepts of our implementation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/17601&quot;&gt;Asymptotic Growth Groups&lt;/a&gt;&lt;/strong&gt;:&lt;em&gt; &lt;/em&gt;These are multiplicative groups that contain &lt;em&gt;growth elements&lt;/em&gt; like $x^2$, $\log x$, $2^x \cdot x \cdot \log x$. For starters, only univariate power growth groups will be implemented.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/17715&quot;&gt;Asymptotic Term Monoids&lt;/a&gt;&lt;/strong&gt;: These monoids contain &lt;em&gt;asymptotic terms &lt;/em&gt;&amp;#8212; in essence, these are summands of asymptotic terms. Apart from exact term monoids (growth elements with a coefficient), we will also implement O-term monoids as well as a term monoid for a deviation of O-terms. Asymptotic terms have (in addition to their group operation, multiplication) &lt;em&gt;absorption &lt;/em&gt;as an additional operation: for example, O-terms are able to absorb all asymptotically &amp;#8220;smaller&amp;#8221; elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/17693&quot;&gt;Mutable Poset&lt;/a&gt;&lt;/strong&gt;: As we have mentioned above, due to the fact that multivariate asymptotic expressions do not have a total order with respect to their growth, we need a partially ordered set (&amp;#8220;Poset&amp;#8221;) that deals with this structure such that operations like absorbing terms can be performed efficiently. The mutable poset is the central data structure that asymptotic expressions are built upon.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/17716&quot;&gt;Asymptotic&lt;/a&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/17716&quot;&gt; Ring&lt;/a&gt;&lt;/strong&gt;: This is our top-level structure which is also supposed to be the main interaction object for users. The asymptotic ring contains the asymptotic expressions, i.e. intelligently managed sums of asymptotic terms. All common operations shall be possible here. Furthermore, the interface should be intelligent enough such that admissible expressions from the symbolic ring can be directly converted into elements of the asymptotic ring.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, this &amp;#8220;planned structure&amp;#8221; is rather superficial. However, this is only to supplement the motivation for my project with some ideas on the implementation. I&amp;#8217;ll go a lot more into the details of what I am currently implementing in the next few blog posts!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content>
		<author>
			<name>Benjamin Hackl</name>
			<uri>http://benjamin-hackl.at/tag/gsoc15/</uri>
		</author>
		<source>
			<title type="html">Benjamin Hackl » GSoC15</title>
			<link rel="self" href="http://benjamin-hackl.at/tag/gsoc15/feed/"/>
			<id>http://benjamin-hackl.at/tag/gsoc15/feed/</id>
			<updated>2015-09-11T10:30:16+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Guiding principles for SageMath, Inc.</title>
		<link href="http://sagemath.blogspot.com/2015/05/guiding-principles-for-sagemath-inc.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-9002226548496308542</id>
		<updated>2015-05-27T13:03:52+00:00</updated>
		<content type="html">&lt;div class=&quot;salvus-editor-html-md-preview-content&quot;&gt;In February of this year (2015), I founded a Delaware C Corporation called &quot;SageMath, Inc.&quot;. &amp;nbsp;This is a first stab at the guiding principles for the company. &amp;nbsp; &amp;nbsp;It should help clarify the relationship between the company, the Sage project, and other projects like OpenDreamKit and Jupyter/IPython.&lt;br /&gt;&lt;h3 id=&quot;company-mission-statement-&quot;&gt;Company mission statement:&lt;/h3&gt;&lt;blockquote&gt;Make open source mathematical software ubiquitous.&lt;/blockquote&gt;This involves both creating the SageMathCloud website and supporting the development and distribution of the SageMath and other software, including Jupyter, Octave, Scilab, etc.  Anything open source.&lt;br /&gt;&lt;h3 id=&quot;company-principles-&quot;&gt;Company principles:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Absolutely all company funded software must be open source, under a &lt;strong&gt;GPLv3 &lt;i&gt;compatible&lt;/i&gt;&lt;/strong&gt; license.    We are a 100% open source company.&lt;br /&gt; &lt;/li&gt;&lt;li&gt;Company independence and self-determination is far more important than money.  A core principle is that SMI is not for sale at any price, and will not participate in any partnership (for cost) that would restrict our freedom. This means:&lt;br /&gt; &lt;ul&gt;&lt;li&gt;reject any offers from corp development from big companies to purchase or partner,&lt;/li&gt;&lt;li&gt;do not take any investment money unless absolutely necessary, and then only from the highest quality investors&lt;/li&gt;&lt;li&gt;do not take venture capital ever&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Be as open as possible about everything involving the company.  What should not be open (since it is dangerous):&lt;br /&gt; &lt;ul&gt;&lt;li&gt;security issues, passwords&lt;/li&gt;&lt;li&gt;finances (which could attract trolls)&lt;/li&gt;&lt;li&gt;private user data&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;What should be open:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;aggregate usage data, e.g., number of users.&lt;/li&gt;&lt;li&gt;aggregate data that could help other open source projects improve their development, e.g., common problems we observe with Jupyter notebooks should be provided to their team.&lt;/li&gt;&lt;li&gt;guiding principles&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;business-model&quot;&gt;Business model&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;SageMathCloud is freemium with the expectation that 2-5% of users pay.&lt;br /&gt; &lt;/li&gt;&lt;li&gt;Target audience: all potential users of cloud-based math-related software.&lt;br /&gt; &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;sagemathcloud-mission&quot;&gt;SageMathCloud mission&lt;/h3&gt;&lt;blockquote&gt;Make it as easy as possible to use open source mathematical software in the cloud.&lt;/blockquote&gt;This means:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Minimize onboard friction, so in less than 1 minute, you can create an account and be using Sage or Jupyter or LaTeX.  Morever, the UI should be simple and streamlined specifically for the tasks, while still having deep functionality to support expert users.  Also, everything persists and can be sorted, searched, used later, etc.&lt;br /&gt; &lt;/li&gt;&lt;li&gt;Minimize support friction, so one click from within SMC leads to a support forum, an easy way for admins to directly help, etc.  This is not at all implemented yet.  Also, a support marketplace where experts get paid to help non-experts (tutoring, etc.).&lt;br /&gt; &lt;/li&gt;&lt;li&gt;Minimize teaching friction, so &lt;em&gt;everything&lt;/em&gt; involving software related to teaching a course is as easy as possible, including managing a list of students, distributing and collecting homework, and automated grading and feedback.&lt;br /&gt; &lt;/li&gt;&lt;li&gt;Minimize pay friction, sign up for a $7 monthly membership, then simple clear pay-as-you-go functionality if you need more power.          &lt;br /&gt; &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2015-09-14T22:30:05+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-US">
		<title type="html">Google Summer of Code — Countdown</title>
		<link href="http://benjamin-hackl.at/2015/05/23/google-summer-of-code-countdown/"/>
		<id>http://benjamin-hackl.at/?p=109</id>
		<updated>2015-05-23T01:58:33+00:00</updated>
		<content type="html">&lt;p&gt;Today I received the welcome package for attending this year&amp;#8217;s &amp;#8220;Google Summer of Code&amp;#8221;! Actually, it&amp;#8217;s pretty cool; the following things were included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a blue notebook with a monochromatic GSoC 15 logo (in dark blue) printed on it&lt;/li&gt;
&lt;li&gt;a sticker with a colored GSoC 15 logo&lt;/li&gt;
&lt;li&gt;a pen that is both a blue ballpoint pen as well as a mechanical pencil (0.5)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a photo of all this stuff:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://benjamin-hackl.at/asdf-wp/wp-content/uploads/2015/05/gsoc_welcome.jpg&quot;&gt;&lt;img class=&quot; size-medium wp-image-118 aligncenter&quot; src=&quot;http://benjamin-hackl.at/asdf-wp/wp-content/uploads/2015/05/gsoc_welcome-225x300.jpg&quot; alt=&quot;gsoc_welcome&quot; width=&quot;225&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The work on our project (multivariate) Asymptotic Expressions (in cooperation with &lt;a href=&quot;http://danielkrenn.at&quot;&gt;Daniel Krenn&lt;/a&gt; and &lt;a href=&quot;http://wwwu.aau.at/cheuberg&quot;&gt;Clemens Heuberger&lt;/a&gt;) begins (or rather continues) on Monday, the 25th of May. Over the course of next week (probably in a $\varepsilon$-neighborhood of Monday) I will blog about the status quo, as well as about the motivation for the project. &lt;img src=&quot;http://benjamin-hackl.at/asdf-wp/wp-includes/images/smilies/simple-smile.png&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;</content>
		<author>
			<name>Benjamin Hackl</name>
			<uri>http://benjamin-hackl.at/tag/gsoc15/</uri>
		</author>
		<source>
			<title type="html">Benjamin Hackl » GSoC15</title>
			<link rel="self" href="http://benjamin-hackl.at/tag/gsoc15/feed/"/>
			<id>http://benjamin-hackl.at/tag/gsoc15/feed/</id>
			<updated>2015-09-11T10:30:16+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Code on cake, poker and a number theory classification web app</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/05/04/code-on-cake-poker-and-a-number-theory-classification-webapp/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/05/04/code-on-cake-poker-and-a-number-theory-classification-webapp/</id>
		<updated>2015-05-04T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;I have just finished writing feedback and obtaining marks for my first year
students’ presentations. These presentations follow 11 weeks during which
students formed companies and worked together to come up with a ‘product’ which
had to involve mathematics and code (this semester comes just after 11 weeks of
learning Python and Sage). In this post I’ll briefly describe some of the great
things that the students came up with.&lt;/p&gt;

&lt;p&gt;I must say that I was blown away by the standard this year. Last year the
students did exceptionally well but this year the standard was even higher, I am
so grateful for the effort put in by more or less everyone.&lt;/p&gt;

&lt;p&gt;Some of the great projects included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A website that used a fitted utility function (obtained from questioning
family, friends, flatmates) to rank parking lots in terms of price and
distance from a given venue (the website was written in Django and the
function fitted using Sage).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A commando training app, with an actual reservist marine who is a student
of ours:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/venture.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A story based game with an original storyline stemming from the zodiac. The
presentation culminated in Geraint, Jason and I (who were the audience)
retaliating to their Nerf gun attack with our (hidden under the desk) Nerf guns (we had a hunch
that this group would ambush us…). The game mechanics itself was coded in
pure Python and the UI was almost written in Django (that
was the goal but they didn’t have the time to fully implement it).&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/cardiff_elite_four.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A Django site that had a graphical timeline of mathematics (on click you had
access to a quizz and info etc…). This was one I was
particularly excited about as it’s a tool I would love to use.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An outreach/educational package based around cryptography. They coded a
variety of cyphers in Python and also put together an excellent set of
teaching resources with really well drawn characters etc… They even threw in
my dog Auraya (the likeness of the drawing is pretty awesome :)):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/cryptogram.jpg&quot; alt=&quot;&quot; /&gt;
  &lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/auraya.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I ask my students to find an original way of showcasing their code. I don’t
actually know the right answer to that ‘challenge’. Most students showcase the
website and/or app, some will talk me through some code but this year one
group did something quite frankly awesome: &lt;strong&gt;code on cake&lt;/strong&gt;. Here’s some of
the code they wrote for their phone app (written with kivy):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/-1_cake.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One group built a fully functioning and hosted web app (after taking a look at
Django they decided that Flask was the way to go for this particular tool).
Their app takes in a natural number and classifies it against a number of
categories, go ahead and try it right now: &lt;a href=&quot;http://jayrobertvos.pythonanywhere.com/&quot;&gt;Categorising Numbers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One of the more fun presentations was for a poker simulation app that uses a
prime number representation of a hand of poker to simulate all possible
outcomes of a given state. This work remarkably fast and immediately spits out
(with neat graphics of the cards) the probability of winning given the current
cards. As well as an impressive app the students presented it very well and
invited me to play a game of poker (I lost, their mark was not affected…):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/team_super_awesome_funsies_selfie.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Here are a couple of screen shots of the app itself:&lt;/p&gt;

    &lt;p&gt;Home screen:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/oddson_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;The input card screen:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/oddson_0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am missing out a bunch of great projects (including an impressive &lt;em&gt;actual&lt;/em&gt;
business that I will be delighted to talk about more when appropriate). I am
very grateful to the efforts put in by all the students and wish them well
during their exams.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">My 5 reasons why jekyll + github is a terrible teaching tool.</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/04/06/my-5-reasons-why-jekyll-with-github-is-a-terrible-teaching-tool/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/04/06/my-5-reasons-why-jekyll-with-github-is-a-terrible-teaching-tool/</id>
		<updated>2015-04-06T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;For the past year or so I have been using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; for all
my courses.
If you do not know, in a nutshell, jekyll is a ruby framework that lets you
write templates for pages and build nice websites using static markdown files
for your content.
Here I will describe what I think of jekyll from a pedagogic point of view, in 5 main points.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-the-tutorial-is-too-well-written-and-easy-to-follow&quot;&gt;1. Jekyll is terrible because the tutorial is too well written and easy to follow.&lt;/h2&gt;

&lt;p&gt;First of all, as an academic I enjoy when things are difficult to read and
follow.
The Jekyll tutorial can get you up and running with a jekyll site in less than 5
minutes.
It is far too clear and easy to follow.
This sort of clear and to the point
explanation is very dangerous from a pedagogic point of view as students might
stumble upon it and raise their expectations of the educational process they are
going through.&lt;/p&gt;

&lt;p&gt;In all seriousness, the tutorial is well written and clear, with a basic
knowledge of the command line you can modify the base site and have a website
deployed in less than 10 minutes.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-it-works-too-seamlessly-with-github&quot;&gt;2. Jekyll is terrible because it works too seamlessly with github.&lt;/h2&gt;

&lt;p&gt;First of all gh-pages takes care of the hosting.
Not having to use a complicated server saves far too much time.
As academics we have too much free time already, I do not like getting bored.&lt;/p&gt;

&lt;p&gt;Github promotes the sharing and openness of code, resources and processes.
Using a jekyll site in conjunction with github means that others can
easily see and comment on all the materials as well as potentially
improve them.
This openness is dangerous as it ensures that courses are living and breathing
things as opposed to a set of notes/problem sheets that sit safely in a drawer
somewhere.&lt;/p&gt;

&lt;p&gt;The fact that jekyll uses markdown is also a problem.
On github anyone can easily read and send a pull request (which improves things)
without really knowing markdown (let alone git).
This is very terrible indeed, &lt;a href=&quot;https://github.com/drvinceknight/Computing_for_mathematics/commit/c9370a3e2880e0d6d2d3a0f4e3bb90a306783787&quot;&gt;here for example is a pull request sent to me by a
student&lt;/a&gt;.
The student in question found a mistake in a question sheet and asked me about it,
right there in the lab I just said ‘go ahead and fix it :)’ (and they did).
Involving students in the process of fixing/improving their course materials
has the potential for utter chaos.
Furthermore normalising mistakes is another big problem: all students should be
terrified of making a mistake and/or trying things.&lt;/p&gt;

&lt;p&gt;Finally, having a personal site as a github project gives you a site at the
following url:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;username.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By simply having a &lt;code&gt;gh-pages&lt;/code&gt; branch for each class site, this will
automatically be served at:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;username.github.io/class-site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is far too sensible and flexible.
Furthermore the promotion of decentralisation of content is dangerous.
If one of my class sites breaks: none of my others will be affected!!!
How can I expect any free time with such a robust system?
This is dangerously efficient.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-it-is-too-flexible&quot;&gt;3. Jekyll is terrible because it is too flexible.&lt;/h2&gt;

&lt;p&gt;You can (if you want to) include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://disqus.com/&quot;&gt;A disqus.com&lt;/a&gt; board to a template for a page which means
that students can easily comment and talk to you about materials.
Furthermore you can also use this to add things to your materials in a
discussion based way, for example I have been able to far too easily to add a
picture of a whiteboard explaining something students have asked.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.mathjax.org/&quot;&gt;Mathjax&lt;/a&gt;. With some escaping this works out of the
box. Being able to include nicely rendered mathematics misaligns students’
expectations as to what is on the web.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://sagecell.sagemath.org/&quot;&gt;Sage cells&lt;/a&gt; can be easily popped in to
worksheets allowing students to immediately use code to illustrate/explain a
concept.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and various others: you can just include any html/javascript etc…&lt;/p&gt;

&lt;p&gt;This promotion of interactive and modern resources by Jekyll is truly terrible
as it gets students away from what teaching materials should really be about:
dusty notes in the bottom of a drawer (worked fine for me).&lt;/p&gt;

&lt;p&gt;The flexibility of Jekyll is also really terrible as it makes me forget the
restrictions imposed on me by whatever VLE we are supposed to use.
This is making me weak and soft, when someone takes the choice away from me and
I am forced to use the VLE, I most probably won’t be ready.&lt;/p&gt;

&lt;p&gt;(A jekyll + github setup also implis that a wiki immediately exists for a page
and I am also experimenting with a &lt;a href=&quot;https://gitter.im&quot;&gt;gitter.im&lt;/a&gt; room for each class).&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-it-gives-a-responsive-site-out-of-the-box&quot;&gt;4. Jekyll is terrible because it gives a responsive site out of the box.&lt;/h2&gt;

&lt;p&gt;Students should consume their materials exactly when and how we want them to.
The base jekyll site cames with a basic responsive framework, here is a photo of
one of my class sheets (which also again shows the disgustingly beautifully
rendered mathematics):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/jekyll_site.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This responsive framework works right out of the box (you can also obviously use
further frameworks if you want to, see my point about flexibility) from the tutorial and this
encourages students to have access to the materials on whatever platform they
want whenever they want.
This cannot be a good thing.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-it-saves-me-too-much-time&quot;&gt;5. Jekyll is terrible because it saves me too much time.&lt;/h2&gt;

&lt;p&gt;The main point that is truly worrying about jekyll is how much time it saves me.
I have mentioned this before, as academics we need to constantly make sure we do
not get bored.
Jekyll does not help with this.&lt;/p&gt;

&lt;p&gt;I can edit my files using whatever system I want (I can even do this on github
directly if I wanted to), I push and the website is up to date.&lt;/p&gt;

&lt;p&gt;In the past I would have a lot of time taken up by compiling a LaTeX document
and uploading to our VLE.
I would sit back and worry about being bored before realising (thankfully) that
I had a typo and so needed to write, delete and upload again.&lt;/p&gt;

&lt;p&gt;Furthermore, I can easily use the github issue tracker to keep on top of to do
lists etc… (which I am actually beginning to do for more or less every aspect
of my life).
TAs can also easily fix/improve minor things without asking me to upload
whatever it is they wrote.&lt;/p&gt;

&lt;p&gt;Github + Jekyll works seamlessly and ensures that I have more time to respond to
student queries and think.
This time for reflection on teaching practice is dangerous: I might choose to do
things differently than how they have been done for the past 100 years.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;In case my tone is unclear: I am such a huge jekyll fan and think it is a
brilliant pedagogic tool.
There might well be various other static site generators and other options so please do
comment about them below :)&lt;/em&gt;)&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">A one week flipped learning environment to introduce Object Oriented Programming</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/25/a_one_week_flipped_teaching_environment_to_introduce_object_oriented_programming/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/25/a_one_week_flipped_teaching_environment_to_introduce_object_oriented_programming/</id>
		<updated>2015-03-25T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This post describes a teaching activity that is run for the Cardiff MSc. programmes.
The activity is revolves around a two day hackathon that gets students to use Python and object oriented programming to solve a challenge.
The activity is placed within a flipped learning environment and makes use of what I feel is a very nice form of assessment (we just get to know the students).&lt;/p&gt;

&lt;p&gt;This year is the third installment of this exercise which came as a result of the MSc advisory board requesting that object oriented programming be introduced to our MSc.&lt;/p&gt;

&lt;p&gt;Before describing the activity itself let me just put this simple diagram that describes the flipped learning environment here (if you would like more info about it be sure to talk to &lt;a href=&quot;https://plus.google.com/+RobertTalbert/posts&quot;&gt;Robert Talbert&lt;/a&gt; who has always been very helpful to me):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/flipped_environment.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;description-of-what-happens&quot;&gt;Description of what happens&lt;/h2&gt;

&lt;p&gt;After 3 iterations and a number of discussions about the format with &lt;a href=&quot;https://plus.google.com/u/0/+PaulHarper/posts&quot;&gt;Paul Harper&lt;/a&gt; (the director of the MSc) I think the last iteration is pretty spot on and it goes something like this:&lt;/p&gt;

&lt;h3 id=&quot;monday-transfer-of-content&quot;&gt;Monday: Transfer of content&lt;/h3&gt;

&lt;p&gt;We give a brief overview of Python (you can see the &lt;a href=&quot;http://vincent-knight.com/Introduction_to_OOP/&quot;&gt;slides here&lt;/a&gt;) up until and including basic syntax for classes.&lt;/p&gt;

&lt;h3 id=&quot;tuesday--wednesday-nothing&quot;&gt;Tuesday + Wednesday: Nothing&lt;/h3&gt;

&lt;p&gt;Students can, if they want to, read up about Python, look through videos at the website and elsewhere, look through past challenges etc…
&lt;strong&gt;This is in effect when the knowledge transfer happens&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;thursday-flying-solo-followed-by-feedback&quot;&gt;Thursday: Flying solo followed by feedback&lt;/h3&gt;

&lt;p&gt;Students are handed a challenge of some sort (you can see the past two &lt;a href=&quot;http://vincent-knight.com/Introduction_to_OOP/Challenges/&quot;&gt;here&lt;/a&gt;).
Students work in groups of 4 at attempting to solve the problem.
On this day, the two postgrads (&lt;a href=&quot;https://plus.google.com/u/0/+JasonYoung/posts&quot;&gt;Jason&lt;/a&gt; and &lt;a href=&quot;https://plus.google.com/u/0/118222786508884333473/posts&quot;&gt;Geraint&lt;/a&gt;) and myself observe the groups.
When we are asked questions we in general ask questions back.
This sometimes leads to a fair bit of frustration but is the difficult process that makes the rest of the process worthwhile.&lt;/p&gt;

&lt;p&gt;Here is a photo of some of the groups getting to work:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/oop_thursday_gp_1.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/oop_thursday_gp_2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the very end of the day (starting at 1600 for about 30 minutes with each group).
During this feedback session go through the code written by each group in detail, highlighting things they are having difficulty with and agreeing on a course of action for the next day.
&lt;strong&gt;This is the point at which the class ‘flips’ so to speak: transfer of content is done and difficulties are identified and conceptualised&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here is a photo of Jason, Geraint and I at the end of a very long day after the feedback sessions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/oop_post_feedback.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The other point of this day is that we start our continuous assessment: taking notes and discussing how each group is doing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Where are they progress wise?&lt;/li&gt;
  &lt;li&gt;What difficulties do we need to look out for?&lt;/li&gt;
  &lt;li&gt;How are the groups approaching the problem and working together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here you can see a photo of Jason in front of the board that we fill up over the 2 days with notes and comments:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/oop_board.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;friday-sprint-finish-with-more-assistance&quot;&gt;Friday: Sprint finish with more assistance&lt;/h3&gt;

&lt;p&gt;On the second/last day students are given slightly more assistance from Jason, Geraint and I but are still very much left to continue with their hard work.
The main difference being that when students ask questions we sometimes answer them.&lt;/p&gt;

&lt;p&gt;Here is one group who managed to crack something quite difficult on the second day:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/oop_friday_gp.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The final part of this day is to round all the students together and announce the marks, which brings us nicely to the assessment part of this activity.&lt;/p&gt;

&lt;h2 id=&quot;assessment&quot;&gt;Assessment&lt;/h2&gt;

&lt;p&gt;I really enjoy assessing this activity.
This is not something I say about assessment very often, but we are continuously assessing the students and are able to gain a true idea of how they do.
The final piece of code is not what everything is marked on as it is in essence not terribly important.&lt;/p&gt;

&lt;p&gt;Here is a photo of the team who did the best this year:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/oop_winners.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If I could sit with students over the 11 week period of the other courses I teach and get to know them and assess them that way, that is indeed how I would do it.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt; Summary&lt;/h2&gt;

&lt;p&gt;Here is a summary of how I feel this activity fits in the original diagram I had:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/oop_day_as_a_flipped_environment.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see despite ‘being in contact’ with students for most of Thursday I would not consider this contact time in the usual sense as most of that contact is part of the assessment.&lt;/p&gt;

&lt;p&gt;This is always a very fun (and exhausting) two days and I look forward to next year.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Marrying toys and students</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/24/marrying_toys_and_students/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/24/marrying_toys_and_students/</id>
		<updated>2015-03-24T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;In class yesterday we took a look at matching games.
These are sometimes referred to as stable marriage problems.
To have some data for us to play with I asked for some volunteers to marry.
Sadly I apparently am not allowed to ask students to rank each other in class and I also do not have the authority to marry.
So, &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/03/matching-games-in-class.html&quot;&gt;like last year&lt;/a&gt; I used some of my office toys and asked students to rank them.&lt;/p&gt;

&lt;p&gt;I brought three toys to class:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The best ninja turtle: Donatello&lt;/li&gt;
  &lt;li&gt;A tech deck&lt;/li&gt;
  &lt;li&gt;A foam football&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I asked 3 students to come down and rank them and in turn I let the toys rank the students.&lt;/p&gt;

&lt;p&gt;We discussed possible matchings with some great questions such as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Are we trying to make everyone as happy as possible?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer to that is: no.
We are simply trying to ensure that no one has an incentive to deviate from their current matching by breaking their match for someone they prefer and who also prefers them.&lt;/p&gt;

&lt;p&gt;Here is the stable matching we found together:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/matching_game.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that we can run the Gale-Shapley value using Sage:&lt;/p&gt;

&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;The 3 students got to hold on to the toys for the hour and I was half expecting the football to be thrown around but sadly that did not happen.
Perhaps next year.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Cooperative basketball in class</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/23/cooperative_basketball_in_class/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/23/cooperative_basketball_in_class/</id>
		<updated>2015-03-23T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Today in class we repeated the game we played &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/03/basketball-and-cooperative-games-in.html&quot;&gt;last year&lt;/a&gt;.
3 teams of 3 students took part this year and here is a photo of the aftermath:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/basketball.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a class we watched the three teams attempt to free-throw as many crumpled up pieces of paper in to the bin as possible.&lt;/p&gt;

&lt;p&gt;Based on the total number we then tried to come up with how many each subset/coalition of players would have gotten in.
So for example, 2 out of 3 of the teams had one student crumple paper while the other 2 took shots.
So whilst that individual did not get any in, they contributed an important part to the team effort.&lt;/p&gt;

&lt;p&gt;Here are the characteristic functions that show what each team did:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/basketball-characteristic-functions.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is some &lt;a href=&quot;http://sagemath.org/&quot;&gt;Sage&lt;/a&gt; code that gives the Shapley value for each game (&lt;a href=&quot;http://vincent-knight.com/Year_3_game_theory_course/Content/Chapter_16_Cooperative_games/&quot;&gt;take a look at my class notes&lt;/a&gt; or at &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/03/basketball-and-cooperative-games-in.html&quot;&gt;last years post&lt;/a&gt; to see how to calculate this):&lt;/p&gt;

&lt;p&gt;Let us define the first game:&lt;/p&gt;

&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;If you click &lt;code&gt;Evaluate&lt;/code&gt; above you see that the Shapley value is given by:&lt;/p&gt;



&lt;p&gt;(This one we calculated in class)&lt;/p&gt;

&lt;p&gt;By changing the numbers above we get the following for the other two games.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Game 2:&lt;/p&gt;

    
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Game 3:&lt;/p&gt;

    
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was a bit of fun and most importantly from a class point of view gave us some nice numbers to work from and calculate the Shapley value together.&lt;/p&gt;

&lt;p&gt;If anyone would like to read about the Shapley value a bit more take a look at the &lt;a href=&quot;http://www.sagemath.org/doc/reference/game_theory/sage/game_theory/cooperative_game.html&quot;&gt;Sage documentation&lt;/a&gt; which not only shows how to calculate it using Sage but also goes over some of the mathematics (including another formulation).&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Character Theory Basics</title>
		<link href="http://sheaves.github.io/Character-Theory/"/>
		<id>http://sheaves.github.io/Character-Theory/</id>
		<updated>2015-03-20T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This post illustrates some of SageMath’s character theory functionality, as well as some basic results about characters of finite groups. &lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;basic-definitions-and-properties&quot;&gt;Basic Definitions and Properties&lt;/h2&gt;

&lt;p&gt;Given a representation $(V,\rho)$ of a group $G$, its &lt;a href=&quot;http://en.wikipedia.org/wiki/Character_theory&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;character&lt;/strong&gt;&lt;/a&gt; is a map $ \chi: G \to \mathbb{C}$ that returns the &lt;a href=&quot;http://en.wikipedia.org/wiki/Trace_(linear_algebra)&quot; target=&quot;_blank&quot;&gt;trace&lt;/a&gt; of the matrices given by $\rho$:&lt;/p&gt;



&lt;p&gt;A character $\chi$ is &lt;strong&gt;irreducible&lt;/strong&gt; if the corresponding $(V,\rho)$ is &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/&quot; target=&quot;_blank&quot;&gt;irreducible&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Despite the simplicity of the definition, the (irreducible) characters of a group contain a surprising amount of information about the group. Some &lt;a href=&quot;http://en.wikipedia.org/wiki/Character_theory#Applications&quot; target=&quot;_blank&quot;&gt;big theorems&lt;/a&gt; in group theory depend heavily on character theory.&lt;/p&gt;

&lt;p&gt;Let’s calculate the character of the permutation representation of $D_4$. For each $g \in G$, we’ll display the pairs:&lt;/p&gt;



&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Many of the following properties of characters can be deduced from properties of the trace:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;strong&gt;dimension&lt;/strong&gt; of a character is the dimension of $V$ in $(V,\rho)$. Since $\rho(\text{Id})$ is always the identity matrix, the dimension of $\chi$ is $\chi(\text{Id})$.&lt;/li&gt;
  &lt;li&gt;Because the trace is &lt;a href=&quot;http://en.wikipedia.org/wiki/Similarity_invariance&quot; target=&quot;_blank&quot;&gt;invariant under similarity transformations&lt;/a&gt;, $\chi(hgh^{-1}) = \chi(g)$ for all $g,h \in G$. So characters are constant on conjugacy classes, and are thus &lt;a href=&quot;http://en.wikipedia.org/wiki/Class_function&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;class functions&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Let $\chi_V$ denote the character of $(V,\rho)$. Recalling the definitions of &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Sums-Products/&quot; target=&quot;_blank&quot;&gt;direct sums and tensor products&lt;/a&gt;, we see that&lt;/li&gt;
&lt;/ol&gt;



&lt;h2 id=&quot;the-character-table&quot;&gt;The Character Table&lt;/h2&gt;

&lt;p&gt;Let’s ignore the representation $\rho$ for now, and just look at the character $\chi$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;This is succinct, but we can make it even shorter. From point 2 above, $\chi$ is constant on conjugacy classes of $G$, so we don’t lose any information by just looking at the values of $\chi$ on each conjugacy class:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Even shorter, let’s just display the values of $\chi$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;This single row of numbers represents the character of &lt;em&gt;one&lt;/em&gt; representation of $G$. If we knew all the irreducible representations of $G$ and their corresponding characters, we could form a table with one row for each character. This is called the &lt;a href=&quot;http://en.wikipedia.org/wiki/Character_table&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;character table&lt;/strong&gt;&lt;/a&gt; of $G$.&lt;/p&gt;

&lt;p&gt;Remember how we had to define our representations by hand, one by one? We don’t have to do that for characters, because  SageMath has the &lt;a href=&quot;http://www.sagemath.org/doc/constructions/rep_theory.html&quot; target=&quot;_blank&quot;&gt;character tables of small groups built-in&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;This just goes to show how important the character of a group is. We can also access individual characters as a functions. Let’s say we want the last one:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Notice that the character we were playing with, $[4,2,0,0,0]$, is not in the table. This is because its representation $\rho$  is not irreducible. At the end of the post on &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Decomposing-Representations/&quot; target=&quot;_blank&quot;&gt;decomposing representations&lt;/a&gt;, we saw that $\rho$ splits into two $1$-dimensional irreducible representations and one $2$-dimensional one. It’s not hard to see that the character of $\rho$ is the sum of rows 1,4 and 5 in our character table:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Just as we could decompose every representation of $G$ into a sum of irreducible representations, we can express any character as a sum of irreducible characters. &lt;/p&gt;

&lt;p&gt;The next post discusses how to do this easily, by making use of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Schur_orthogonality_relations&quot;&gt;Schur orthogonality relations&lt;/a&gt;. These are really cool relations among the rows and columns of the character table. Apart from decomposing representations into irreducibles, we’ll also be able to prove that the character table is always square!&lt;/p&gt;</content>
		<author>
			<name>Liang Ze</name>
			<uri>http://sheaves.github.io/</uri>
		</author>
		<source>
			<title type="html">Sheaves</title>
			<subtitle type="html">Making math concrete with Sage</subtitle>
			<link rel="self" href="http://sheaves.github.io/feed.xml"/>
			<id>http://sheaves.github.io/feed.xml</id>
			<updated>2015-05-25T16:03:28+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Playing stochastic games in class</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/19/playing_stochastic_games_in_class/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/19/playing_stochastic_games_in_class/</id>
		<updated>2015-03-19T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;The final blog post I am late in writing is about the Stochastic game we played in class last week.
The particular type of game I am referring to is also called a Markov game where players play a series of Normal Form games, with the &lt;em&gt;next&lt;/em&gt; game being picked from a random distribution the nature of which depends on the strategy profiles.
In other words the choice of the players does not only impact on the utility gained by the players but also on the probability of what the net game will be…
I blogged about &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/03/playing-stochasticmarkov-games-in-class.html&quot;&gt;this last year&lt;/a&gt; so feel free to read about some of the details there.&lt;/p&gt;

&lt;p&gt;The main idea is that one stage game corresponds to this normal form game (a prisoner’s dilemma):&lt;/p&gt;



&lt;p&gt;at the other we play:&lt;/p&gt;



&lt;p&gt;The probability distributions, of the form \((x,1-x)\) where \(x\) is the probability with which we play the first game again are given by:&lt;/p&gt;



&lt;p&gt;and the probability distribution for the second game was \((0,1)\).
In essence the second game was an &lt;em&gt;absorption&lt;/em&gt; game and so players would try and avoid it.&lt;/p&gt;

&lt;p&gt;To deal with the potential for the game to last for ever we played this with a discounting factor \(\delta=1/2\).
Whilst that discounting factor will be interpreted as such in theory, for the purposes of playing the game in class we used that as a probability at which the game continues.&lt;/p&gt;

&lt;p&gt;You can see a photo of this all represented on the board:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/markov_game-game.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We played this as a team game and you can see the results here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/markov_game-results.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As opposed to last year no actual duel lasted more than one round: I had a coded dice to sample at each step.
The first random roll of the dice was to see if the game continued based on the \(\delta\) property (this in effect ‘deals with infinity’).
The second random sample was to find out which game we payed next and if we ever went to the absorption games things finished there.&lt;/p&gt;

&lt;p&gt;The winner was team B who in fact defected after the initial cooperation in the first game (perhaps that was enough to convince other teams they would be cooperative).&lt;/p&gt;

&lt;p&gt;After playing this, we calculated (using some basic algebra examining each potential pure equilibria) the Nash equilibria for this game and found that there were two pure equilibria: both players Cooperating and both players defecting.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Incomplete information games in class</title>
		<link href="http://drvinceknight.github.io/unpeudemath/gametheory/2015/03/17/incomplete_information_games_in_class/"/>
		<id>http://drvinceknight.github.io/unpeudemath/gametheory/2015/03/17/incomplete_information_games_in_class/</id>
		<updated>2015-03-17T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Last week my class and I looked at the basics of games with incomplete information.
The main idea is that players do not necessarily know where there are in an extensive form game.
We repeated a game I played last year that you can read about &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/03/playing-game-with-incomplete.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a picture of the game we played (for details take a look at the post from last year):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/matchingpenniesunderuncertainty.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We played a round robing where everyone played against everyone else and you can see the results in these two notebook pages that Jason kept track off:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/2015-incomplete-info-game-1.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/2015-incomplete-info-game-2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that the winner was Reg, who on both occasions of being the second player: went with the coin.&lt;/p&gt;

&lt;p&gt;To find the Nash equilibria for this game we can translate it in to normal form game by doing the following two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Identify the strategy sets for the players&lt;/li&gt;
  &lt;li&gt;Averaging of the outcome probabilities&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This gives the following strategies:&lt;/p&gt;



&lt;p&gt;and&lt;/p&gt;



&lt;p&gt;The strategies for the second player correspond to a 2-vector indexed by the information sets of the second player.
In other words the first letter says what to do if the coin comes up as heads and the second letter says what to do if the coin comes up as tails:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;\(HH\): No matter what: play heads;&lt;/li&gt;
  &lt;li&gt;\(HT\): If the coin comes up as heads: play heads. If the coin comes up as tails: play tails.&lt;/li&gt;
  &lt;li&gt;\(TH\): If the coin comes up as heads: play tails. If the coin comes up as tails: play heads.&lt;/li&gt;
  &lt;li&gt;\(TT\): No matter what: play tails;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once we have done that and using the above ordering we can obtain the normal form game representation:&lt;/p&gt;



&lt;p&gt;In class we obtained the Nash equilibria for this game by realising that the third column strategy (\(TH\): always disagree with the coin) was dominated and then carrying out some indifference analysis.&lt;/p&gt;

&lt;p&gt;Here let us just throw it at Sage (&lt;a href=&quot;https://www.youtube.com/watch?v=QjXAvRiU4Og&quot;&gt;here is a video showing and explaining some of the code&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;The equilibria returned confirms what we did in class: the first player can more or less randomly (with bounds on the distribution) pick heads or tails but the second player should always agree with the coin.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Discussing the game theory of walking/driving in class</title>
		<link href="http://drvinceknight.github.io/unpeudemath/gametheory/2015/03/17/discussing_the_game_theory_of_walking_in_class/"/>
		<id>http://drvinceknight.github.io/unpeudemath/gametheory/2015/03/17/discussing_the_game_theory_of_walking_in_class/</id>
		<updated>2015-03-17T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Last week, in game theory class we looked at pairwise contest games.
To introduce this we began by looking at the particular game that one could use to model the situation of two individuals walking or driving towards each other:&lt;/p&gt;



&lt;p&gt;The above models people walking/driving towards each other and choosing a side of the road.
If they choose the same side they will not walk/drive in to each other.&lt;/p&gt;

&lt;p&gt;I got a coupe of volunteers to simulate this and ‘walk’ towards each other having picked a side.
We very quickly arrived at one of the stage Nash equilibria: both players choosing left and/or choosing right.&lt;/p&gt;

&lt;p&gt;I wrote a blog post about this a while ago when the BBC wrote an article about social convention.
You can read that &lt;a href=&quot;http://vknight.org/unpeudemath/mathematics/2014/07/27/game-theory-and-pavement-etiquette/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We went on to compute the evolutionary stability of 3 potential stable equilibria:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Everyone driving on the left;&lt;/li&gt;
  &lt;li&gt;Everyone driving on the right;&lt;/li&gt;
  &lt;li&gt;Everyone randomly picking a side each time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that the above corresponds to the three Nash equilibria of the game itself.
You can see this using some Sage code immediately (&lt;a href=&quot;https://www.youtube.com/watch?v=QjXAvRiU4Og&quot;&gt;here is a video I just put together showing how one can use Sage to obtain Nash equilibria&lt;/a&gt;) - just click on ‘Evaluate’:&lt;/p&gt;

&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;We did this calculations in two ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;From first principles using the definitions of evolutionary stability (this took a while).
2 Using a clever theoretic result that in effect does the analysis for us once and for all.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both gave us the same result: driving on a given side of the road is evolutionarily stable whereas everyone randomly picking a side is not (a nudge in any given direction would ensure people picked a side).&lt;/p&gt;

&lt;p&gt;This kind of corresponds to the two (poorly drawn) pictures below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/stability.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To further demonstrate the instability of the ‘choose a random side’ situation here is a plot of the actual evolutionary process (&lt;a href=&quot;https://www.youtube.com/watch?v=Tz-lZy0AKRI&quot;&gt;here is a video that shows what is happening&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/evolution_from_random_walking.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that if we start by walking randomly the tiniest of mutation send everyone to picking a side.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Animated GIFs</title>
		<link href="http://sheaves.github.io/Animations/"/>
		<id>http://sheaves.github.io/Animations/</id>
		<updated>2015-03-12T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;I really should be posting about character theory, but I got distracted making some aesthetic changes to this blog (new icon and favicon!) and creating animations like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://sheaves.github.io/images/harmonograph_loop.gif&quot; alt=&quot;harmonograph&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;no_out&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;I’m not putting this in a SageCell because this could take quite a while, especially if you increase the number of frames (by changing the parameters in &lt;code&gt;srange&lt;/code&gt;), but feel free to try it out on your own copy of Sage. It saves an animated GIF that loops forever (&lt;code&gt;iterations = 0&lt;/code&gt;) at the location specified by &lt;code&gt;savefile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more information, checkout the &lt;a href=&quot;http://www.sagemath.org/doc/reference/plotting/sage/plot/animate.html&quot;&gt;Sage reference for animated plots&lt;/a&gt;.&lt;/p&gt;</content>
		<author>
			<name>Liang Ze</name>
			<uri>http://sheaves.github.io/</uri>
		</author>
		<source>
			<title type="html">Sheaves</title>
			<subtitle type="html">Making math concrete with Sage</subtitle>
			<link rel="self" href="http://sheaves.github.io/feed.xml"/>
			<id>http://sheaves.github.io/feed.xml</id>
			<updated>2015-05-25T16:03:28+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Playing an infinitely repeated game in class</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/08/playing-an-infinitely-repeated-game-in-class/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/03/08/playing-an-infinitely-repeated-game-in-class/</id>
		<updated>2015-03-08T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Following &lt;a href=&quot;http://vknight.org/unpeudemath/pedagogy/2015/02/26/this-class-teaches-me-to-not-trust-my-classmates/&quot;&gt;the iterated Prisoner’s dilemma tournament my class I and I played last week&lt;/a&gt; we went on to play a version of the game where we repeated things infinitely many times.
This post will briefly describe what we got up to.&lt;/p&gt;

&lt;p&gt;As you can read in the post about this activity from &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/02/iterated-prisoners-dilemma-with-twist.html&quot;&gt;last year&lt;/a&gt;, the way we play for an infinite amount of time (that would take a while) is to apply a discounting factor \(\delta\) to the payoffs &lt;strong&gt;and&lt;/strong&gt; to interpret this factor as the probability with which the game continues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before I go any further (and put up pictures with the team names) I need to explain something (for the readers who are not my students).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For every class I teach I insist in spending a fair while going over a mid module feedback form that is used at Cardiff University (asking students to detail 3 things they like and don’t like about the class).
One student wrote (what is probably my favourite piece of feedback ever):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Vince is a dick… but in a good way.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anyway, I mentioned that to the class during my feedback-feedback session and that explains one of the team names (which I found pretty amusing):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Orange&lt;/li&gt;
  &lt;li&gt;Where’s the gun&lt;/li&gt;
  &lt;li&gt;We don’t know&lt;/li&gt;
  &lt;li&gt;Vince is a good dick&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we had the team names set up (and I stopped trying to stop laughing) I wrote some quick Python code that we could run after each iteration:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;continue_prob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue_prob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Game continues'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Game Over'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We started off by playing with (\delta=.5) and here are the results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/infinite_pd_2015_results.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the various duels here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/infinite_pd_2015_duels.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, very little cooperation happened this way and in fact because everyone could see what everyone else was doing Orange took advantage of the last round to create a coalition and win.
We also see one particular duel that cost two teams very highly (because the ‘dice rolls’ did not really help).&lt;/p&gt;

&lt;p&gt;After this I suggest to the class that we play again but that no one got to see what was happening to the other teams (this was actually suggested to me by students the year before).
We went ahead with this and used \(delta=.25\): so the game had a less chance of carrying on.&lt;/p&gt;

&lt;p&gt;You can see the result and duels here (this had to be squeezed on to a board that could be hidden):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/infinite_pd_2015_second_game.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on the theory we would expect more cooperation to be likely but as you can see this did not happen.&lt;/p&gt;

&lt;p&gt;The tie at the end was settled with a game of Rock Paper Scissors Lizard Spock which actually gave place to a rematch of the &lt;a href=&quot;http://vknight.org/unpeudemath/pedagogy/2015/02/13/rock-paper-scissors-lizard-spock/&quot;&gt;Rock Paper Scissors Lizard Spock tournament&lt;/a&gt; we played earlier.
Except this time Laura, lost her crown :)&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Arnoux-Rauzy-Poincaré sequences</title>
		<link href="http://www.slabbe.org/blogue/2015/02/arnoux-rauzy-poincare-sequences"/>
		<id>http://www.slabbe.org/blogue/2015/02/arnoux-rauzy-poincare-sequences</id>
		<updated>2015-02-26T16:22:00+00:00</updated>
		<content type="html">&lt;div class=&quot;document&quot;&gt;
&lt;p&gt;In a recent article with Valérie Berthé &lt;a class=&quot;citation-reference&quot; href=&quot;http://www.slabbe.org/blogue/2015/02/arnoux-rauzy-poincare-sequences#bl15&quot; id=&quot;id1&quot;&gt;[BL15]&lt;/a&gt;, we provided a multidimensional
continued fraction algorithm called Arnoux-Rauzy-Poincaré (ARP) to construct,
given any vector \(v\in\mathbb{R}_+^3\), an infinite word
\(w\in\{1,2,3\}^\mathbb{N}\) over a three-letter alphabet such that the
frequencies of letters in \(w\) exists and are equal to \(v\) and such that
the number of factors (i.e.  finite block of consecutive letters) of length
\(n\) appearing in \(w\) is linear and less than \(\frac{5}{2}n+1\). We
also conjecture that for almost all \(v\) the contructed word describes a
discrete path in the positive octant staying at a bounded distance from the
euclidean line of direction \(v\).&lt;/p&gt;
&lt;p&gt;In Sage, you can construct this word using the next version of my package
slabbe-0.2 (not released yet, email me to press me to finish it). The one with
frequencies of letters proportionnal to \((1, e, \pi)\) is:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: from slabbe.mcf import algo
sage: D = algo.arp.substitutions()
sage: it = algo.arp.coding_iterator((1,e,pi))
sage: w = words.s_adic(it, repeat(1), D)
word: 1232323123233231232332312323123232312323...
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;The factor complexity is close to 2n+1 and the balance is often less or equal
to three:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: w[:10000].number_of_factors(100)
202
sage: w[:100000].number_of_factors(1000)
2002
sage: w[:1000].balance()
3
sage: w[:2000].balance()
3
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Note that bounded distance from the euclidean line almost surely was proven in
&lt;a class=&quot;citation-reference&quot; href=&quot;http://www.slabbe.org/blogue/2015/02/arnoux-rauzy-poincare-sequences#dhs2013&quot; id=&quot;id2&quot;&gt;[DHS2013]&lt;/a&gt; for Brun algorithm, another MCF algorithm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other approaches: Standard model and billiard sequences&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Other approaches have been proposed to construct such discrete lines.&lt;/p&gt;
&lt;p&gt;One of them is the standard model of Eric Andres &lt;a class=&quot;citation-reference&quot; href=&quot;http://www.slabbe.org/blogue/2015/02/arnoux-rauzy-poincare-sequences#a03&quot; id=&quot;id3&quot;&gt;[A03]&lt;/a&gt;. It is also equivalent
to billiard sequences in the cube. It is well known that the factor complexity
of billiard sequences is quadratic \(p(n)=n^2+n+1\) &lt;a class=&quot;citation-reference&quot; href=&quot;http://www.slabbe.org/blogue/2015/02/arnoux-rauzy-poincare-sequences#amst94&quot; id=&quot;id4&quot;&gt;[AMST94]&lt;/a&gt;.
Experimentally, we can verify this. We first create a billiard word of some
given direction:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: from slabbe import BilliardCube
sage: v = vector(RR, (1, e, pi))
sage: b = BilliardCube(v)
sage: b
Cubic billiard of direction (1.00000000000000, 2.71828182845905, 3.14159265358979)
sage: w = b.to_word()
sage: w
word: 3231232323123233213232321323231233232132...
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;We create some prefixes of \(w\) that we represent internally as &lt;tt class=&quot;docutils literal&quot;&gt;char*&lt;/tt&gt;.
The creation is slow because the implementation of billiard words in my
optional package is in Python and is not that efficient:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: p3 = Word(w[:10^3], alphabet=[1,2,3], datatype='char')
sage: p4 = Word(w[:10^4], alphabet=[1,2,3], datatype='char') # takes 3s
sage: p5 = Word(w[:10^5], alphabet=[1,2,3], datatype='char') # takes 32s
sage: p6 = Word(w[:10^6], alphabet=[1,2,3], datatype='char') # takes 5min 20s
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;We see below that exactly \(n^2+n+1\) factors of length \(n&amp;lt;20\) appears in
the prefix of length 1000000 of \(w\):&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: A = ['n'] + range(30)
sage: c3 = ['p_(w[:10^3])(n)'] + map(p3.number_of_factors, range(30))
sage: c4 = ['p_(w[:10^4])(n)'] + map(p4.number_of_factors, range(30))
sage: c5 = ['p_(w[:10^5])(n)'] + map(p5.number_of_factors, range(30)) # takes 4s
sage: c6 = ['p_(w[:10^6])(n)'] + map(p6.number_of_factors, range(30)) # takes 49s
sage: ref = ['n^2+n+1'] + [n^2+n+1 for n in range(30)]
sage: T = table(columns=[A,c3,c4,c5,c6,ref])
sage: T
  n    p_(w[:10^3])(n)   p_(w[:10^4])(n)   p_(w[:10^5])(n)   p_(w[:10^6])(n)   n^2+n+1
+----+-----------------+-----------------+-----------------+-----------------+---------+
  0    1                 1                 1                 1                 1
  1    3                 3                 3                 3                 3
  2    7                 7                 7                 7                 7
  3    13                13                13                13                13
  4    21                21                21                21                21
  5    31                31                31                31                31
  6    43                43                43                43                43
  7    52                55                56                57                57
  8    63                69                71                73                73
  9    74                85                88                91                91
  10   87                103               107               111               111
  11   100               123               128               133               133
  12   115               145               151               157               157
  13   130               169               176               183               183
  14   144               195               203               211               211
  15   160               223               232               241               241
  16   176               253               263               273               273
  17   192               285               296               307               307
  18   208               319               331               343               343
  19   224               355               368               381               381
  20   239               392               407               421               421
  21   254               430               448               463               463
  22   268               470               491               507               507
  23   282               510               536               553               553
  24   296               552               583               601               601
  25   310               596               632               651               651
  26   324               642               683               703               703
  27   335               687               734               757               757
  28   345               734               787               813               813
  29   355               783               842               871               871
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Billiard sequences generate paths that are at a bounded distance from an
euclidean line. This is equivalent to say that the balance is finite. The
balance is defined as the supremum value of difference of the number of
apparition of a letter in two factors of the same length. For billiard
sequences, the balance is 2:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: p3.balance()
2
sage: p4.balance() # takes 2min 37s
2
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Other approaches: Melançon and Reutenauer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Melançon and Reutenauer &lt;a class=&quot;citation-reference&quot; href=&quot;http://www.slabbe.org/blogue/2015/02/arnoux-rauzy-poincare-sequences#mr13&quot; id=&quot;id5&quot;&gt;[MR13]&lt;/a&gt; also suggested a method that generalizes
Christoffel words in higher dimension. The construction is based on the
application of two substitutions generalizing the construction of sturmian
sequences. Below we compute the factor complexity and the balance of some of
their words over a three-letter alphabet.&lt;/p&gt;
&lt;p&gt;On a three-letter alphabet, the two morphisms are:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: L = WordMorphism('1-&amp;gt;1,2-&amp;gt;13,3-&amp;gt;2')
sage: R = WordMorphism('1-&amp;gt;13,2-&amp;gt;2,3-&amp;gt;3')
sage: L
WordMorphism: 1-&amp;gt;1, 2-&amp;gt;13, 3-&amp;gt;2
sage: R
WordMorphism: 1-&amp;gt;13, 2-&amp;gt;2, 3-&amp;gt;3
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Example 1: periodic case \(LRLRLRLRLR\dots\). In this example, the factor
complexity seems to be around \(p(n)=2.76n\) and the balance is at least 28:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: from itertools import repeat, cycle
sage: W = words.s_adic(cycle((L,R)),repeat('1'))
sage: W
word: 1213122121313121312212212131221213131213...
sage: map(W[:10000].number_of_factors, [10,20,40,80])
[27, 54, 110, 221]
sage: [27/10., 54/20., 110/40., 221/80.]
[2.70000000000000, 2.70000000000000, 2.75000000000000, 2.76250000000000]
sage: W[:1000].balance()  # takes 1.6s
21
sage: W[:2000].balance()  # takes 6.4s
28
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Example 2: \(RLR^2LR^4LR^8LR^{16}LR^{32}LR^{64}LR^{128}\dots\) taken from
the conclusion of their article. In this example, the factor complexity seems
to be \(p(n)=3n\) and balance at least as high (=bad) as \(122\):&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: W = words.s_adic([R,L,R,R,L,R,R,R,R,L]+[R]*8+[L]+[R]*16+[L]+[R]*32+[L]+[R]*64+[L]+[R]*128,'1')
sage: W.length()
330312
sage: map(W.number_of_factors, [10, 20, 100, 200, 300, 1000])
[29, 57, 295, 595, 895, 2981]
sage: [29/10., 57/20., 295/100., 595/200., 895/300., 2981/1000.]
[2.90000000000000,
 2.85000000000000,
 2.95000000000000,
 2.97500000000000,
 2.98333333333333,
 2.98100000000000]
sage: W[:1000].balance()  # takes 1.6s
122
sage: W[:2000].balance()  # takes 6s
122
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Example 3: some random ones. The complexity \(p(n)/n\) occillates between 2
and 3 for factors of length \(n=1000\) in prefixes of length 100000:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: for _ in range(10):
....:     W = words.s_adic([choice((L,R)) for _ in range(50)],'1')
....:     print W[:100000].number_of_factors(1000)/1000.
2.02700000000000
2.23600000000000
2.74000000000000
2.21500000000000
2.78700000000000
2.52700000000000
2.85700000000000
2.33300000000000
2.65500000000000
2.51800000000000
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;For ten randomly generated words, the balance goes from 6 to 27 which is much
more than what is obtained for billiard words or by our approach:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: for _ in range(10):
....:     W = words.s_adic([choice((L,R)) for _ in range(50)],'1')
....:     print W[:1000].balance(), W[:2000].balance()
12 15
8 24
14 14
5 11
17 17
14 14
6 6
19 27
9 16
12 12
&lt;/pre&gt;&lt;/div&gt;



&lt;div class=&quot;section&quot; id=&quot;references&quot;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;bl15&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.slabbe.org/blogue/2015/02/arnoux-rauzy-poincare-sequences#id1&quot;&gt;[BL15]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;V. Berthé, S. Labbé,
Factor Complexity of S-adic words generated by the Arnoux-Rauzy-Poincaré Algorithm,
&lt;em&gt;Advances in Applied Mathematics&lt;/em&gt; 63 (2015) 90-130.
&lt;a class=&quot;reference external&quot; href=&quot;http://dx.doi.org/10.1016/j.aam.2014.11.001&quot;&gt;http://dx.doi.org/10.1016/j.aam.2014.11.001&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;dhs2013&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.slabbe.org/blogue/2015/02/arnoux-rauzy-poincare-sequences#id2&quot;&gt;[DHS2013]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Delecroix, Vincent, Tomás Hejda, and Wolfgang Steiner. “Balancedness of
Arnoux-Rauzy and Brun Words.” In Combinatorics on Words, 119–31. Springer,
2013. &lt;a class=&quot;reference external&quot; href=&quot;http://link.springer.com/chapter/10.1007/978-3-642-40579-2_14&quot;&gt;http://link.springer.com/chapter/10.1007/978-3-642-40579-2_14&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;a03&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.slabbe.org/blogue/2015/02/arnoux-rauzy-poincare-sequences#id3&quot;&gt;[A03]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;E. Andres,
Discrete linear objects in dimension n: the standard model,
Graphical Models 65 (2003) 92-111.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;amst94&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.slabbe.org/blogue/2015/02/arnoux-rauzy-poincare-sequences#id4&quot;&gt;[AMST94]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;P. Arnoux, C. Mauduit, I. Shiokawa, J. I. Tamura,
Complexity of sequences defined by billiards in the cube,
Bull. Soc. Math. France 122 (1994) 1-12.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;mr13&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.slabbe.org/blogue/2015/02/arnoux-rauzy-poincare-sequences#id5&quot;&gt;[MR13]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;G. Melançon, C. Reutenauer,
On a class of Lyndon words extending Christoffel words and related to a
multidimensional continued fraction algorithm.
J. Integer Seq. 16, No. 9, Article 13.9.7, 30 p., electronic only (2013).
&lt;a class=&quot;reference external&quot; href=&quot;https://cs.uwaterloo.ca/journals/JIS/VOL16/Reutenauer/reut3.html&quot;&gt;https://cs.uwaterloo.ca/journals/JIS/VOL16/Reutenauer/reut3.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
		<author>
			<name>Sébastien Labbé</name>
			<uri>http://www.slabbe.org/blogue/</uri>
		</author>
		<source>
			<title type="html">Sébastien Labbé</title>
			<subtitle type="html">Sébastien Labbé</subtitle>
			<link rel="self" href="http://www.slabbe.org/blogue/categorie/sage/feed/atom/index.xml"/>
			<id>http://www.slabbe.org/blogue/feed/atom/</id>
			<updated>2015-09-11T13:30:06+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">This class teaches me to not trust my classmates: An iterated prisoners dilemma in class</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/02/26/this-class-teaches-me-to-not-trust-my-classmates/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/02/26/this-class-teaches-me-to-not-trust-my-classmates/</id>
		<updated>2015-02-26T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;On Monday, in class we played an iterated prisoner’s dilemma tournament.
I have done this many times (both in outreach events with &lt;a href=&quot;http://www.profpaulharper.com/&quot;&gt;Paul Harper&lt;/a&gt; and in this class).
This is always a lot of fun but none more so than last year when Paul’s son Thomas joined us.
You can read about that one &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/02/iterated-prisoners-dilemma-tournament.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The format of the game is as close to that of Axelrod’s original tournament as I think it can be.
I split the class in to 4 teams and we create a round robin where each team plays every other team at 8 consecutive rounds of the prisoner’s dilemma:&lt;/p&gt;



&lt;p&gt;The utilities represent ‘years in prison’ and over the 3 matches that each team will play (against every other team) the goal is to reduce the total amount of time spent in prison.&lt;/p&gt;

&lt;p&gt;Here are some photos from the game:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/pd_2015_01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/pd_2015_02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/pd_2015_03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are the scores:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/pd_2015_results.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that ‘We will take the gun’ acquired the least total score and so they won the collection of cookies etc…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/pd_2015_cookies.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(The names followed a promise from me to let the team with the coolest name have a nerf gun… Can’t say this had the wanted effect…)&lt;/p&gt;

&lt;p&gt;At one point during the tournament, one team actually almost declared a strategy which was cool:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We will cooperate until you defect at which point we will reevaluate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was pretty cool as I hadn’t discussed at all what a strategy means in a repeated game (ie I had not discussed the fact that a strategy in a repeated game takes count of both play histories).&lt;/p&gt;

&lt;p&gt;Here are all the actual duels:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/pd_2015_duels.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll also notice at the end that a coalition formed and one team agreed to defect so that they could share the prize.
This happens about 50% of the time when we play this game but I never cease to be amused by it.
Hopefully everyone found this fun and perhaps some even already agree with a bit of feedback I received on this course last year:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘This class teaches me to not trust my classmates’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the other really cool things that happened after this class was H asking for a hand to submit a strategy to my Axelrod repository.
She built a strategy called ‘Once Bitten’ that performs pretty well!
You can see it &lt;a href=&quot;https://github.com/drvinceknight/Axelrod/blob/master/axelrod/strategies/oncebitten.py&quot;&gt;here&lt;/a&gt; (click on ‘Blame’ and you can see the code that she wrote).&lt;/p&gt;

&lt;p&gt;(Big thanks to Jason for keeping track of the scores and to Geraint for helping and grabbing some nice pictures)&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://drvinceknight.github.io/unpeudemath/feed.xml"/>
			<id>http://drvinceknight.github.io/unpeudemath/feed.xml</id>
			<updated>2015-09-06T17:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">The Group Ring and the Regular Representation</title>
		<link href="http://sheaves.github.io/Group-Ring-Regular-Representation/"/>
		<id>http://sheaves.github.io/Group-Ring-Regular-Representation/</id>
		<updated>2015-02-15T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;In the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Decomposing-Representations/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt;, we saw how to decompose a given group representation into irreducibles. But we still don’t know much about the irreducible representations of a (finite) group. What do they look like? How many are there? Infinitely many?&lt;/p&gt;

&lt;p&gt;In this post, we’ll construct the &lt;a href=&quot;http://en.wikipedia.org/wiki/Group_ring&quot; target=&quot;_blank&quot;&gt;group ring&lt;/a&gt; of a group. Treating this as a vector space, we get the &lt;a href=&quot;http://en.wikipedia.org/wiki/Regular_representation&quot; target=&quot;_blank&quot;&gt;regular representation&lt;/a&gt;, which turns out to contain &lt;em&gt;all&lt;/em&gt; the irreducible representations of $G$!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;the-group-ring-fg&quot;&gt;The group ring $FG$&lt;/h2&gt;

&lt;p&gt;Given a (finite) group $G$ and a field $F$, we can treat each element of $G$ as a basis element of a vector space over $F$. The resulting vector space generated by $g \in G$ is&lt;/p&gt;



&lt;p&gt;Let’s do this is Sage with the group $G = D_4$ and the field $F = \mathbb{Q}$:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;We can view $v \in FG$ as vector in $F^n$, where $n$ is the size of $G$ : &lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Here, we’re treating each $g \in G$ as a basis element of $FG$&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Vectors in $FG$ are added component-wise:&lt;/p&gt;



&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;multiplication-as-a-linear-transformation&quot;&gt;Multiplication as a linear transformation&lt;/h2&gt;

&lt;p&gt;In fact $FG$ is also a  &lt;em&gt;ring&lt;/em&gt; (called the &lt;a href=&quot;http://en.wikipedia.org/wiki/Group_ring&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;group ring&lt;/strong&gt;&lt;/a&gt;), because we can multiply vectors using the multiplication rule of the group $G$:&lt;/p&gt;



&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;That wasn’t very illuminating. However, treating multiplication by $v \in FG$ as a function&lt;/p&gt;



&lt;p&gt;one can check that each $T_v$ is a linear transformation! We can thus represent $T_v$ as a matrix whose columns are $T_v(g), g \in G$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;the-regular-representation&quot;&gt;The regular representation&lt;/h2&gt;

&lt;p&gt;We’re especially interested in $T_g, g \in G$. These are invertible, with inverse $T_{g^{-1}}$, and their matrices are all permutation matrices, because multiplying by $g \in G$ simply permutes elements of $G$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Define a function $\rho_{FG}$ which assigns to each $g\in G$ the corresponding $T_g$:&lt;/p&gt;



&lt;p&gt;Then $(FG,\rho_{FG})$ is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Regular_representation&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;regular representation&lt;/strong&gt;&lt;/a&gt; of $G$ over $F$. &lt;/p&gt;

&lt;p&gt;The regular representation of any non-trivial group is not irreducible. In fact, it is a direct sum of &lt;em&gt;all&lt;/em&gt; the irreducible representations of $G$! What’s more, if $(V,\rho)$ is an irreducible representation of $G$ and $\dim V = k$, then $V$ occurs $k$ times in the direct-sum decomposition of $FG$!&lt;/p&gt;

&lt;p&gt;Let’s apply the decomposition algorithm in the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Decomposing-Representations/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt; to $(FG,\rho_{FG})$ (this might take a while to run):&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;So the regular representation of $D_4$ decomposes into four (distinct) $1$-dim representations and two (isomorphic) $2$-dim ones.&lt;/p&gt;

&lt;h2 id=&quot;building-character&quot;&gt;Building character&lt;/h2&gt;

&lt;p&gt;We’ve spent a lot of time working directly with representations of a group. While more concrete, the actual matrix representations themselves tend to be a little clumsy, especially when the groups in question get large. &lt;/p&gt;

&lt;p&gt;In the next few posts, I’ll switch gears to &lt;a href=&quot;http://en.wikipedia.org/wiki/Character_theory&quot; target=&quot;_blank&quot;&gt;character theory&lt;/a&gt;, which is a simpler but more powerful way of working with group representations.&lt;/p&gt;</content>
		<author>
			<name>Liang Ze</name>
			<uri>http://sheaves.github.io/</uri>
		</author>
		<source>
			<title type="html">Sheaves</title>
			<subtitle type="html">Making math concrete with Sage</subtitle>
			<link rel="self" href="http://sheaves.github.io/feed.xml"/>
			<id>http://sheaves.github.io/feed.xml</id>
			<updated>2015-05-25T16:03:28+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Decomposing Representations</title>
		<link href="http://sheaves.github.io/Representation-Theory-Decomposing-Representations/"/>
		<id>http://sheaves.github.io/Representation-Theory-Decomposing-Representations/</id>
		<updated>2015-02-02T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;In this post, we’ll implement an algorithm for decomposing representations that &lt;a href=&quot;http://www.ams.org/journals/mcom/1970-24-111/S0025-5718-1970-0280611-6/S0025-5718-1970-0280611-6.pdf&quot; target=&quot;_blank&quot;&gt;Dixon published in 1970&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;As a motivating example, I’ll use the permutation matrix representation of $D_4$ that we saw in an &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Intro/&quot; target=&quot;_blank&quot;&gt;earlier post&lt;/a&gt;. To make the code more generally applicable, let’s call the group $G$ and the representation $\rho$:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;We’ll see that this is decomposable, and find out what its irreducible components are.&lt;/p&gt;

&lt;h3 id=&quot;unitary-representations&quot;&gt;Unitary representations&lt;/h3&gt;

&lt;p&gt;A short remark before we begin: The algorithm assumes that $\rho$ is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Unitary_representation&quot; target=&quot;_blank&quot;&gt;unitary representation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i.e. for all $g \in G$,&lt;/p&gt;



&lt;p&gt;where $A*$ is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Conjugate_transpose&quot; target=&quot;_blank&quot;&gt;conjugate transpose&lt;/a&gt; of a matrix $A$. 
For $G$ a finite group, all representations can be made unitary under an appropriate change of basis, so we need not be too concerned about this. In any case, permutation representations are always unitary, so we can proceed with our example.&lt;/p&gt;

&lt;h2 id=&quot;finding-non-scalar-commuting-matrices&quot;&gt;Finding non-scalar, commuting matrices&lt;/h2&gt;

&lt;p&gt;At the end of the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt; we saw that in order to decompose a representation $(V,\rho)$, it is enough to find a non-scalar matrix $T$ that commutes with $\rho(g)$ for every $g \in G$.  This first step finds a &lt;a href=&quot;http://en.wikipedia.org/wiki/Hermitian_matrix&quot; target=&quot;_blank&quot;&gt;Hermitian&lt;/a&gt; non-scalar $H$ that commutes with $\rho(G)$ (if there is one to be found).&lt;/p&gt;

&lt;p&gt;Let $E_{rs}$ denote the $n \times n$ matrix with a $1$ in the $(r,s)$th entry and zeros everywhere else. Here $n$ is the dimension of $V$ in the representation $(V,\rho)$. Define&lt;/p&gt;



&lt;p&gt;then the set of matrices $H_{rs}$ forms a Hermitian basis for the $n \times n$ matrices over $\mathbb{C}$.&lt;/p&gt;

&lt;p&gt;Now for each $r,s$, compute the sum&lt;/p&gt;



&lt;p&gt;Observe that $H$ has the following properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it is hermitian&lt;/li&gt;
  &lt;li&gt;it commutes with $\rho(g)$ for all $g \in G$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If $\rho$ is irreducible, then $H$ is a scalar matrix for all $r,s$. Otherwise, it turns out that there &lt;strong&gt;will&lt;/strong&gt; be some $r,s$ such that $H$ is non-scalar (this is due to the fact that the $H_{rs}$ matrices form a basis of the $n \times n$ matrices$).&lt;/p&gt;

&lt;p&gt;Let’s test this algorithm on our permutation representation of $D_4$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;We get a non-scalar $H$! So the permutation representation of $D_4$ is reducible!&lt;/p&gt;

&lt;h2 id=&quot;using-h-to-decompose-rho&quot;&gt;Using $H$ to decompose $\rho$&lt;/h2&gt;

&lt;p&gt;Our next step is to use the eigenspaces of $H$ to decompose $\rho$. At the end of the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt;, we saw that $\rho(g)$ preserves the eigenspaces of $H$, so we need only find the eigenspaces of $H$ to decompose $\rho$. &lt;/p&gt;

&lt;p&gt;Since $H$ is hermitian, it is &lt;a href=&quot;http://en.wikipedia.org/wiki/Diagonalizable_matrix&quot; target=&quot;_blank&quot;&gt;diagonalizable&lt;/a&gt;, so its eigenvectors form a basis of $V$. We can find this basis by computing the &lt;a href=&quot;http://en.wikipedia.org/wiki/Jordan_normal_form&quot; target=&quot;_blank&quot;&gt;Jordan decomposition&lt;/a&gt; of $H$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Finally, we observe that $P^{-1} \rho(g) P$ has the same block-diagonal form for each $g \in G$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;We have thus decomposed $\rho$ into two 1-dimensional representations and one 2-dimensional one! &lt;/p&gt;

&lt;h2 id=&quot;decomposing-into-irreducibles&quot;&gt;Decomposing into irreducibles&lt;/h2&gt;

&lt;p&gt;Finally, to get a decomposition into irreducibles,  we can apply the algorithm recursively on each of the subrepresentations to see if they further decompose. &lt;/p&gt;

&lt;p&gt;Here’s a stand-alone script that decomposes a representation into its irreducible components:&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;getting-all-irreducible-representations&quot;&gt;Getting all irreducible representations&lt;/h2&gt;

&lt;p&gt;Now we know how to test for irreducibility and decompose reducible representations. But we still don’t know how many irreducible representations a group has. &lt;/p&gt;

&lt;p&gt;It turns out that finite groups have finitely many irreducible representations! In the &lt;a href=&quot;http://sheaves.github.io/Group-Ring-Regular-Representation/&quot;&gt;next post&lt;/a&gt;, we’ll construct a representation for any finite group $G$ that contains &lt;em&gt;all&lt;/em&gt; the irreducible representations of $G$.&lt;/p&gt;</content>
		<author>
			<name>Liang Ze</name>
			<uri>http://sheaves.github.io/</uri>
		</author>
		<source>
			<title type="html">Sheaves</title>
			<subtitle type="html">Making math concrete with Sage</subtitle>
			<link rel="self" href="http://sheaves.github.io/feed.xml"/>
			<id>http://sheaves.github.io/feed.xml</id>
			<updated>2015-05-25T16:03:28+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Irreducible and Indecomposable Representations</title>
		<link href="http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/"/>
		<id>http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/</id>
		<updated>2015-01-26T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Following up from the questions I asked at the end of the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Sums-Products/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt;, I’ll define (ir)reducible and (in)decomposable representations, and discuss how we might detect them. Unlike previous posts, this post will have just text, and no code. This discussion will form the basis of the algorithm in the next post.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;decomposability&quot;&gt;Decomposability&lt;/h2&gt;

&lt;p&gt;In the previous post, I showed how to form the direct sum $(V_1 \oplus V2,\rho)$ of two representations $(V_1,\rho_1)$ and $(V_2,\rho_2)$. The matrices given by $\rho$ looked like this:&lt;/p&gt;



&lt;p&gt;A representation $(V,\rho)$ is &lt;strong&gt;decomposable&lt;/strong&gt; if there is a basis of $V$ such that each $\rho(g)$ takes this block diagonal form. If $(V,\rho)$ does not admit such a decomposition, it is &lt;strong&gt;indecomposable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Equivalently, $(V,\rho)$ is decomposable if there is an invertible matrix $P$ such that for all $g\in G$,&lt;/p&gt;



&lt;p&gt;and indecomposable otherwise. Here, $P$ is a change of basis matrix and conjugating by $P$ changes from the standard basis to the basis given by the columns of $P$. &lt;/p&gt;

&lt;h2 id=&quot;reducibility&quot;&gt;Reducibility&lt;/h2&gt;

&lt;p&gt;Notice that if $\rho(g)$ were block diagonal, then writing $v \in V$ as ${v_1 \choose v_2}$, where $v_1$ and $v_2$ are vectors whose dimensions agree with the blocks of $\rho(g)$, we see that&lt;/p&gt;



&lt;p&gt;Let $V_1$ be the subspace of $V$ corresponding to vectors of the form ${v_1 \choose 0}$, and $V_2$ be the subspace of vectors of the form ${0 \choose v_2}$. Then for all $g \in G, v \in V_i$,&lt;/p&gt;



&lt;p&gt;Now suppose instead that for all $g \in G, \rho(g)$ has the block upper-triangular form&lt;/p&gt;



&lt;p&gt;where $ * $ represents an arbitrary matrix (possibly different for each $g \in G$). If $*$ is not the zero matrix for some $g$, then we will still have $\rho(g) v \in V_1 \,\, \forall v \in V_1$, but we no longer have $\rho(g) v \in V_2 \,\, \forall v \in V_2$. In this case, we say that $V_1$ is a subrepresentation of $V$ whereas $V_2$ is not.&lt;/p&gt;

&lt;p&gt;Formally, if we have a subspace $W \subset V$ such that for all $g \in G, w \in W$,&lt;/p&gt;



&lt;p&gt;then $W$ is a $G$-&lt;strong&gt;invariant&lt;/strong&gt; subspace of $V$, and $(W,\rho)$ is a  &lt;strong&gt;subrepresentation&lt;/strong&gt; of $(V,\rho)$.&lt;/p&gt;

&lt;p&gt;Any representation $(V,\rho)$ has at least two subrepresentations: $(0,\rho)$ and $(V,\rho)$. If there are no other subrepresentations, then $(V,\rho)$ is &lt;a href=&quot;http://en.wikipedia.org/wiki/Irreducible_representation&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;irreducible&lt;/strong&gt;&lt;/a&gt;. Otherwise, it is &lt;strong&gt;reducible&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Equivalently, $(V,\rho)$ is reducible if there is an invertible matrix $P$ such that for all $g \in G$,&lt;/p&gt;



&lt;p&gt;and irreducible otherwise.&lt;/p&gt;

&lt;h2 id=&quot;maschkes-theorem&quot;&gt;Maschke’s Theorem&lt;/h2&gt;

&lt;p&gt;Note that a decomposable representation is also reducible, but the converse is not generally true.
(Equivalently: an irreducible representation is also indecomposable, but the converse is not generally true.)
&lt;a href=&quot;http://en.wikipedia.org/wiki/Maschke%27s_theorem&quot; target=&quot;_blank&quot;&gt;Maschke’s Theorem&lt;/a&gt; tells us that the converse is true over fields of characteristic zero! In other words:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Suppose $V$ is a vector space over a field of characteristic zero, say $\mathbb{C}$, and $(V,\rho)$ has a subrepresentation $(W_1,\rho)$. Then there is a subspace $W_2$ (called the direct complement of $W_1$) such that $V = W_1 \oplus W_2$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since we will be working over $\mathbb{C}$, we can thus treat (in)decomposability as equivalent to (ir)reducibility. To understand representations of $G$, we need only understand its irreducible representations, because any other representation can be decomposed into a direct sum of irreducibles.&lt;/p&gt;

&lt;h2 id=&quot;schurs-lemma&quot;&gt;Schur’s Lemma&lt;/h2&gt;

&lt;p&gt;How may we detect (ir)reducible representations? We’ll make use of the following linear algebraic properties:&lt;/p&gt;

&lt;p&gt;Given an eigenvalue $\lambda$ of a matrix $A \in \mathbb{C}^{n \times n}$, its $\lambda$-eigenspace is&lt;/p&gt;



&lt;p&gt;Clearly, each eigenspace is an invariant subspace of $A$. If we have another matrix $B \in \mathbb{C}^{n \times n}$ such that $AB = BA$, then $B$ preserves the eigenspaces of $A$ as well. To see this, take $v \in E_\lambda$, then&lt;/p&gt;



&lt;p&gt;so $E_\lambda$ is also an invariant subspace of $B$!&lt;/p&gt;

&lt;p&gt;Now suppose we have a representation $(V,\rho)$ and a linear map $T:V \to V$ such that for all $g \in G, v \in V$,&lt;/p&gt;



&lt;p&gt;Treating $T$ as a matrix, this is equivalent to saying that $\rho(g)T = T\rho(g)$ for all $g \in G$. In that case, the eigenspaces of $T$ are $G$-invariant subspaces, and will yield decompositions of $(V,\rho)$  if they are not the whole of $V$. But if $E_\lambda = V$, then $Tv = \lambda v$ for all $v \in V$, so in fact $T = \lambda I$, where $I$ is the identity matrix. We have thus shown a variant of &lt;a href=&quot;http://en.wikipedia.org/wiki/Schur%27s_lemma&quot; target=&quot;_blank&quot;&gt;Schur’s lemma&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If $(V,\rho)$ is irreducible, and $\rho(g) T = T \rho(g)$ for all $g \in G$, then $T =\lambda I$ for some $\lambda$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We already know that scalar matrices (i.e. matrices of the form $\lambda I$) commute with all matrices. If $(V,\rho)$ is irreducible, this result says that there are no other matrices that commute with all $\rho(g)$. The converse is also true:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If $(V,\rho)$ is a reducible, then there is some $T \neq \lambda I$ such that $\rho(g) T = T\rho(g)$ for all $g \in G$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I won’t prove this, but note that if $V$ has a decomposition $W_1 \oplus W_2$, then the projection onto either $W_i$ will have the desired properties.  If we have such a $T$, then its eigenspaces will give a decomposition of $(V,\rho)$. This will be the subject of the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Decomposing-Representations/&quot;&gt;next post&lt;/a&gt;.&lt;/p&gt;</content>
		<author>
			<name>Liang Ze</name>
			<uri>http://sheaves.github.io/</uri>
		</author>
		<source>
			<title type="html">Sheaves</title>
			<subtitle type="html">Making math concrete with Sage</subtitle>
			<link rel="self" href="http://sheaves.github.io/feed.xml"/>
			<id>http://sheaves.github.io/feed.xml</id>
			<updated>2015-05-25T16:03:28+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Direct Sums and Tensor Products</title>
		<link href="http://sheaves.github.io/Representation-Theory-Sums-Products/"/>
		<id>http://sheaves.github.io/Representation-Theory-Sums-Products/</id>
		<updated>2015-01-24T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;In this short post, we will show two ways of combining existing representations to obtain new representations.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;recall&quot;&gt;Recall&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Intro/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt;, we saw two representations of $D_4$: the permutation representation, and the representation given in this &lt;a href=&quot;http://en.wikipedia.org/wiki/Dihedral_group#Matrix_representation&quot; target=&quot;_blank&quot;&gt;Wikipedia example&lt;/a&gt;. Let’s first define these in Sage:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;direct-sums&quot;&gt;Direct Sums&lt;/h2&gt;

&lt;p&gt;If $(V_1,\rho_1), (V_2,\rho_2)$ are representations of $G$, the &lt;a href=&quot;http://groupprops.subwiki.org/wiki/Direct_sum_of_linear_representations&quot; target=&quot;_blank&quot;&gt;direct sum&lt;/a&gt; of these representations is $(V_1 \oplus V_2, \rho)$, where $\rho$ sends $g \in G$ to the &lt;a href=&quot;http://en.wikipedia.org/wiki/Block_matrix#Block_diagonal_matrices&quot; target=&quot;_blank&quot;&gt;block diagonal matrix&lt;/a&gt; &lt;/p&gt;



&lt;p&gt;Here $\rho_1(g), \rho_2(g)$ and the “zeros” are all &lt;em&gt;matrices&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It’s best to illustrate with an example. We can define a function &lt;code&gt;direct_sum&lt;/code&gt; in Sage that takes two representations and returns their direct sum.&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;tensor-products&quot;&gt;Tensor products&lt;/h2&gt;
&lt;p&gt;We can also form the &lt;a href=&quot;http://groupprops.subwiki.org/wiki/Tensor_product_of_linear_representations&quot; target=&quot;_blank&quot;&gt;tensor product&lt;/a&gt; $(V_1 \otimes V_2,\rho)$, where $\rho$ sends $g \in G$ to the &lt;a href=&quot;http://en.wikipedia.org/wiki/Kronecker_product&quot; target=&quot;_blank&quot;&gt;Kronecker product&lt;/a&gt; of the matrices $\rho_1(g)$ and $\rho_2(g)$.&lt;/p&gt;

&lt;p&gt;We define a function &lt;code&gt;tensor_prod&lt;/code&gt; that takes two representations and returns their tensor product.&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Observe that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$\dim V_1 \oplus V_2 = \dim V_1 + \dim V_2$,&lt;/li&gt;
  &lt;li&gt;$\dim V_1 \otimes V_2 = \dim V_1 \times \dim V_2$,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;which motivates the terms direct &lt;em&gt;sum&lt;/em&gt; and tensor &lt;em&gt;product&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We can keep taking direct sums and tensor products of existing representations to obtain new ones:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;decomposing-representations&quot;&gt;Decomposing representations&lt;/h2&gt;
&lt;p&gt;Now we know how to build new representations out of old ones. One might be interested in the inverse questions: &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Is a given representation a direct sum of smaller representations?&lt;/li&gt;
  &lt;li&gt;Is a given representation a tensor product of smaller representations?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It turns out that Q1 is a much more interesting question to ask than Q2.&lt;/p&gt;

&lt;p&gt;A (very poor) analogy of this situation is the problem of “building up” natural numbers. We have two ways of building up new integers from old: we can either add numbers, or multiply them. Given a number $n$, it’s easy (and not very interesting) to find smaller numbers that add up to $n$. However, &lt;a href=&quot;http://en.wikipedia.org/wiki/Integer_factorization&quot; target=&quot;_blank&quot;&gt;finding numbers whose product is $n$&lt;/a&gt; is &lt;em&gt;much much&lt;/em&gt; harder (especially for large $n$) and much more &lt;a href=&quot;http://en.wikipedia.org/wiki/Algebraic_number_theory&quot; target=&quot;_blank&quot;&gt;rewarding&lt;/a&gt;. Prime numbers also play a special role in the latter case: every positive integer has a unique factorization into primes.&lt;/p&gt;

&lt;p&gt;The analogy is a poor one (not least because the roles of “sum” and “product” are switched!). However, it motivates the question &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What are the analogues of “primes” for representations?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll try to answer this last question and Q1 in the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Irreducibility-Indecomposability/&quot;&gt;next few posts&lt;/a&gt;, and see what it means for us when working with representations in Sage.&lt;/p&gt;</content>
		<author>
			<name>Liang Ze</name>
			<uri>http://sheaves.github.io/</uri>
		</author>
		<source>
			<title type="html">Sheaves</title>
			<subtitle type="html">Making math concrete with Sage</subtitle>
			<link rel="self" href="http://sheaves.github.io/feed.xml"/>
			<id>http://sheaves.github.io/feed.xml</id>
			<updated>2015-05-25T16:03:28+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Representation Theory in Sage - Basics</title>
		<link href="http://sheaves.github.io/Representation-Theory-Intro/"/>
		<id>http://sheaves.github.io/Representation-Theory-Intro/</id>
		<updated>2015-01-20T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This is the first of a series of posts about working with group representations in Sage.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;basic-definitions&quot;&gt;Basic Definitions&lt;/h2&gt;

&lt;p&gt;Given a group $G$, a linear representation of $G$ is a group homomorphism $\rho: G \to \mathrm{GL}(V)$ 
such that &lt;/p&gt;



&lt;p&gt;For our purposes, we will assume that $G$ is a finite group and $V$ is an $n$-dimensional vector space over $\mathbb{C}$. Then $\mathrm{GL}(V)$ is isomorphic to the invertible $n \times n$ matrices over $\mathbb{C}$, which we will denote $\mathrm{GL}_n \mathbb{C}$. &lt;/p&gt;

&lt;p&gt;So a representation is just a function that takes group elements and returns invertible matrices, in such a way that the above equation holds.&lt;/p&gt;

&lt;p&gt;Various authors refer to the map $\rho$, the vector space $V$, or the tuple $(V,\rho)$ as a representation; this shouldn’t cause any confusion, as it’s usually clear from context whether we are referring to a map or a vector space. When I need to be extra precise, I’ll use $(V,\rho)$.&lt;/p&gt;

&lt;h2 id=&quot;some-simple-examples&quot;&gt;Some simple examples&lt;/h2&gt;

&lt;h3 id=&quot;trivial-representation&quot;&gt;Trivial representation&lt;/h3&gt;
&lt;p&gt;The simplest representation is just the trivial representation that sends every element of $G$ to the identity matrix (of some fixed dimension $n$). Let’s do this for the symmetric group $S_3$:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;We can verify that this is indeed a group homomorphism (warning: There are 6 elements in $S_3$, which means we have to check $6^2 = 36$ pairs!):&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;permutation-representation&quot;&gt;Permutation representation&lt;/h3&gt;
&lt;p&gt;This isn’t very interesting. However, we also know that $S_3$ is the group of permutations of the 3-element set {$1,2,3$}. We can associate to each permutation a &lt;a href=&quot;http://mathworld.wolfram.com/PermutationMatrix.html&quot; target=&quot;_blank&quot;&gt;permutation matrix&lt;/a&gt;. Sage already has this implemented for us, via the method &lt;code&gt;matrix()&lt;/code&gt; for a group element &lt;code&gt;g&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Qn: From the permutation matrix, can you tell which permutation $g$ corresponds to?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can again verify that this is indeed a representation. Let’s not print out all the output; instead, we’ll only print something if it is &lt;em&gt;not&lt;/em&gt; a representation. If nothing pops up, then we’re fine:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;defining-a-representation-from-generators&quot;&gt;Defining a representation from generators&lt;/h3&gt;
&lt;p&gt;We could define permutation representations so easily only because Sage has them built in. But what if we had some other representation that we’d like to work with in Sage? Take the &lt;a href=&quot;http://en.wikipedia.org/wiki/Dihedral_group&quot; target=&quot;_blank&quot;&gt;dihedral group&lt;/a&gt; $D_4$. Wikipedia tells us that this group has &lt;a href=&quot;http://en.wikipedia.org/wiki/Dihedral_group#Matrix_representation&quot; target=&quot;_blank&quot;&gt;a certain matrix representation&lt;/a&gt;. How can we recreate this in Sage?&lt;/p&gt;

&lt;p&gt;We could hard-code the relevant matrices in our function definition. However, typing all these matrices can be time-consuming, especially if the group is large.&lt;/p&gt;

&lt;p&gt;But remember that representations are group homomorphisms. If we’ve defined $\rho(g)$ and $\rho(h)$, then we can get $\rho(gh)$ simply by multiplying the matrices $\rho(g)$ and $\rho(h)$! If we have a &lt;a href=&quot;http://en.wikipedia.org/wiki/Generating_set_of_a_group&quot; target=&quot;_blank&quot;&gt;set of generators&lt;/a&gt; of a group, then we only need to define $\rho$ on these generators. Let’s do that for the generators of $D_4$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;We see that $D_4$ has a generating set of 2 elements (note: the method &lt;code&gt;gens()&lt;/code&gt; need not return a &lt;em&gt;minimal&lt;/em&gt; generating set, but in this case, we do get a minimal generating set). Let’s call these $r$ and $s$. We know that elements of $D_4$ can be written $r^is^j$, where $i = 0,1,2,3$ and $j = 0,1$. We first run through all such pairs $(i,j)$ to create a &lt;a href=&quot;https://docs.python.org/2/tutorial/datastructures.html#dictionaries&quot; target=&quot;_blank&quot;&gt;dictionary&lt;/a&gt; that tells us which group elements are given by which $(i,j)$:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Now for $g = r^i s^j \in D_4$, we can define $\rho(g) = \rho(r)^i \rho(s)^j$ and we will get a representation of $D_4$. We need only choose the matrices we want for $\rho(r)$ and $\rho(s)$.&lt;/p&gt;

&lt;p&gt;$r$ and $s$ correspond to $R_1$ and $S_0$, resp., in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Dihedral_group#Matrix_representation&quot; target=&quot;_blank&quot;&gt;Wikipedia example&lt;/a&gt;, so let’s use their matrix representations to generate our representation:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;One can verify that this does indeed give the same matrices as the Wikipedia example, albeit in a different order.&lt;/p&gt;

&lt;h2 id=&quot;we-can-do-better&quot;&gt;We can do better!&lt;/h2&gt;
&lt;p&gt;All the representations we’ve defined so far aren’t very satisfying! For the last example, we required the special property that all elements in $D_4$ have the form $r^i s^j$. In general, it isn’t always easy to express a given group element in terms of the group’s generators (this is known as the &lt;a href=&quot;http://en.wikipedia.org/wiki/Word_problem_for_groups&quot; target=&quot;_blank&quot;&gt;word problem&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We’ve also been constructing representations in a rather ad-hoc manner. Is there a more general way to construct representations? And how many are representations are there?&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;http://sheaves.github.io/Representation-Theory-Sums-Products/&quot;&gt;next post&lt;/a&gt;, I’ll run through two simple ways of combining existing representations to get new ones: the direct sum and the tensor product. I’ll also define &lt;em&gt;irreducible&lt;/em&gt; representations, and state some results that will shed some light on the above questions.&lt;/p&gt;</content>
		<author>
			<name>Liang Ze</name>
			<uri>http://sheaves.github.io/</uri>
		</author>
		<source>
			<title type="html">Sheaves</title>
			<subtitle type="html">Making math concrete with Sage</subtitle>
			<link rel="self" href="http://sheaves.github.io/feed.xml"/>
			<id>http://sheaves.github.io/feed.xml</id>
			<updated>2015-05-25T16:03:28+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Subgroup Explorer</title>
		<link href="http://sheaves.github.io/Subgroup-Explorer/"/>
		<id>http://sheaves.github.io/Subgroup-Explorer/</id>
		<updated>2015-01-17T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;&lt;img src=&quot;http://sheaves.github.io/images/SubgroupExplorer.png&quot; alt=&quot;Subgroup Explorer&quot; title=&quot;Subgroup Lattice Generator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve written a subgroup lattice generator for all groups of size up to 32. It’s powered by Sage and GAP, and allows you to view the lattice of subgroups or subgroup conjugacy classes of a group from your browser.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;Click &lt;strong&gt;Go!&lt;/strong&gt; below to refresh the viewer, or if it doesn’t load.&lt;/p&gt;

&lt;div class=&quot;go&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Normal_subgroup&quot; target=&quot;_blank&quot;&gt;Normal subgroups&lt;/a&gt; are colored green. Additionally, the &lt;a href=&quot;http://en.wikipedia.org/wiki/Center_%28group_theory%29&quot; target=&quot;_blank&quot;&gt;center&lt;/a&gt; is blue while the &lt;a href=&quot;http://en.wikipedia.org/wiki/Commutator_subgroup&quot; target=&quot;_blank&quot;&gt;commutator subgroup&lt;/a&gt; is pink.&lt;/p&gt;

&lt;p&gt;Showing the full subgroup lattice can get messy for large groups. If the option &lt;code&gt;Conjugacy classes of subgroups&lt;/code&gt; is selected, the viewer only shows the &lt;a href=&quot;http://en.wikipedia.org/wiki/Conjugacy_class#Conjugacy_of_subgroups_and_general_subsets&quot; target=&quot;_blank&quot;&gt;conjugacy classes of subgroups&lt;/a&gt; (i.e. all subgroups that are conjugate are combined into a single vertex).&lt;/p&gt;

&lt;p&gt;The edge labels indicate how many subgroups of one conjugacy class a given representative subgroup of another conjugacy class &lt;strong&gt;contains&lt;/strong&gt;, or how many subgroups of one conjugacy class a given representative subgroup of another conjugacy class is &lt;strong&gt;contained by&lt;/strong&gt;. The labels are omitted if these numbers are 1. The edge colors indicate whether the subgroups in the “smaller” conjugacy class are normal subgroups of those in “larger” conjugacy class.&lt;/p&gt;

&lt;p&gt;In the image at the top of the post, the group &lt;code&gt;C15 : C4&lt;/code&gt; (the colon stands for &lt;a href=&quot;http://en.wikipedia.org/wiki/Semidirect_product&quot; target=&quot;_blank&quot;&gt;semi-direct product&lt;/a&gt; and is usually written $\rtimes$) contains 5 subgroups isomorphic to &lt;code&gt;C3 : C4&lt;/code&gt;, which in turn contains 3 subgroups isomorphic to &lt;code&gt;C4&lt;/code&gt; and 1 subgroup isomorphic to &lt;code&gt;C6&lt;/code&gt; (the 5 belows to another edge). The edge colors indicate that &lt;code&gt;C6&lt;/code&gt; is a normal subgroup of &lt;code&gt;C3 : C3&lt;/code&gt; whereas &lt;code&gt;C4&lt;/code&gt; is not. For further information on group descriptors, click &lt;a href=&quot;http://groupprops.subwiki.org/wiki/GAP:StructureDescription#Aspects_of_structure_description&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And here’s the code for a version that you can run on &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt;. It allows you to input much larger groups. This was used to produce the image at the top of the post. Don’t try running it here, however, since the SageCellServer doesn’t have the &lt;code&gt;database_gap&lt;/code&gt; package installed.&lt;/p&gt;

&lt;div class=&quot;no_eval&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Finally, while verifying the results of this program, I found an error in &lt;a href=&quot;http://www.cambridge.org/us/academic/subjects/mathematics/algebra/representations-groups-computational-approach&quot; target=&quot;_blank&quot;&gt;this book&lt;/a&gt;!
The correction has been pencilled in. The original number printed was 1.
&lt;img src=&quot;http://sheaves.github.io/images/A5Lattice_CompareSmall.jpg&quot; alt=&quot;A5 Lattice&quot; title=&quot;A5 Subgroup Lattice&quot; /&gt;&lt;/p&gt;</content>
		<author>
			<name>Liang Ze</name>
			<uri>http://sheaves.github.io/</uri>
		</author>
		<source>
			<title type="html">Sheaves</title>
			<subtitle type="html">Making math concrete with Sage</subtitle>
			<link rel="self" href="http://sheaves.github.io/feed.xml"/>
			<id>http://sheaves.github.io/feed.xml</id>
			<updated>2015-05-25T16:03:28+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Lattice of Subgroups III - Coloring Edges</title>
		<link href="http://sheaves.github.io/Subgroup-Lattice-Edges/"/>
		<id>http://sheaves.github.io/Subgroup-Lattice-Edges/</id>
		<updated>2014-12-27T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This post will cover the coloring of edges in the lattice of subgroups of a group. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://sheaves.github.io/images/C3semiC8.png&quot; alt=&quot;Lattice of subgroups of $C3:C8$&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Coloring edges is almost as simple as &lt;a href=&quot;http://sheaves.github.io/Subgroup-Lattice-Color-Vertices/&quot;&gt;coloring vertices&lt;/a&gt;, so we’ll start with that. &lt;/p&gt;

&lt;h2 id=&quot;generating-small-groups&quot;&gt;Generating small groups&lt;/h2&gt;
&lt;p&gt;As we’ve done in previous posts, let’s start by choosing a group and generate its lattice of subgroups. This can be done by referring to this list of &lt;a href=&quot;http://www.sagemath.org/doc/constructions/groups.html#construction-instructions-for-every-group-of-order-less-than-32&quot;&gt;constructions for every group of order less than 32 &lt;/a&gt;. These instructions allow us to construct every group on Wikipedia’s &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_small_groups&quot;&gt;list of small groups&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;For this post, we’ll use $G = C_3 \rtimes C_8$ (or $\mathbb{Z}_3 \rtimes \mathbb{Z}_8$). First, we’ll generate $G$ and display it’s poset of subgroups. For simplicity, we’ll label by cardinality, and we won’t color the vertices.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Sage cells in this post are linked, so things may not work if you don’t execute them in order.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;coloring-edges&quot;&gt;Coloring edges&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&quot;http://sheaves.github.io/Subgroup-Lattice-Color-Vertices/&quot;&gt;previous post&lt;/a&gt;, we colored vertices according to whether the corresponding subgroup was normal (or abelian, or a Sylow subgroup, etc.) These are properties that depend only on each individual subgroup.&lt;/p&gt;

&lt;p&gt;However, suppose we want to see the subnormal series of the group. A &lt;a href=&quot;http://en.wikipedia.org/wiki/Subgroup_series#Normal_series.2C_subnormal_series&quot;&gt;subnormal series&lt;/a&gt; is a series of subgroups where each subgroup is a normal subgroup of the next group in the series. Checking whether a particular series of subgroups is a subnormal series requires checking &lt;em&gt;pairs&lt;/em&gt; of subgroups to see whether one is a normal subgroup of the other. This suggests that we color &lt;em&gt;edges&lt;/em&gt; according to whether one of its endpoints is a normal subgroup of the other endpoint.&lt;/p&gt;

&lt;p&gt;The edges of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Hasse_diagram&quot;&gt;Hasse diagram&lt;/a&gt; of a poset are the pairs $(h,k)$ where $h$ is &lt;a href=&quot;http://en.wikipedia.org/wiki/Covering_relation&quot;&gt;covered by&lt;/a&gt; $k$ in the poset. This means that $h &amp;lt; k$, with nothing else in between. We thus obtain all the edges of a Hasse diagram by calling &lt;code&gt;P.cover_relations()&lt;/code&gt; on the poset $P$.&lt;/p&gt;

&lt;p&gt;To color edges of a graph, we create a dictionary &lt;code&gt;edge_colors&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;up-next&quot;&gt;Up next…&lt;/h3&gt;
&lt;p&gt;This is the last post describing relatively simple things one can do to visualize subgroup lattices (or more generally, posets) in Sage. In the next post, I’ll write code to label edges. Doing this requires extracting the Hasse diagram of a poset as a graph and modifying the edge labels. Also, subgroup lattices tend to get unwieldy for large groups. In the next post, we’ll restrict our attention to conjugacy classes of subgroups, rather than all subgroups.&lt;/p&gt;

&lt;p&gt;After that, I hope to write a bit about doing some simple representation theory things in Sage.&lt;/p&gt;</content>
		<author>
			<name>Liang Ze</name>
			<uri>http://sheaves.github.io/</uri>
		</author>
		<source>
			<title type="html">Sheaves</title>
			<subtitle type="html">Making math concrete with Sage</subtitle>
			<link rel="self" href="http://sheaves.github.io/feed.xml"/>
			<id>http://sheaves.github.io/feed.xml</id>
			<updated>2015-05-25T16:03:28+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Holiday Harmonograph</title>
		<link href="http://sheaves.github.io/Holiday-Harmonograph/"/>
		<id>http://sheaves.github.io/Holiday-Harmonograph/</id>
		<updated>2014-12-25T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;&lt;em&gt;(Guest post from the Annals of Harmonography)&lt;/em&gt;
&lt;img src=&quot;http://sheaves.github.io/images/harmonograph_loop.gif&quot; alt=&quot;harmonograph&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;When it’s snowing outside (or maybe not),&lt;/p&gt;

&lt;p&gt;And your feet are cold (or maybe hot),&lt;/p&gt;

&lt;p&gt;When it’s dark as day (or bright as night),&lt;/p&gt;

&lt;p&gt;And your heart is heavy (and head is light),&lt;/p&gt;

&lt;p&gt;What should you do (what should you say)&lt;/p&gt;

&lt;p&gt;To make it all right (to make it okay)?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;Just pick up a pen (a pencil will do),&lt;/p&gt;

&lt;p&gt;Set up a swing (or &lt;a href=&quot;http://www.karlsims.com/harmonograph/&quot;&gt;three&lt;/a&gt;, or two),&lt;/p&gt;

&lt;p&gt;And while the world spins (or comes to a still),&lt;/p&gt;

&lt;p&gt;In your own little room (or on top of a hill),&lt;/p&gt;

&lt;p&gt;Let your pendulum sway (in its time, in its way),&lt;/p&gt;

&lt;p&gt;And watch as the pen draws your worries away!&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Click inside the colored box to choose a color. Then click outside and watch it update.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;auto_out&quot;&gt;
  
&lt;/div&gt;

&lt;h3 id=&quot;related-articles&quot;&gt;Related Articles:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;7 celebrities and their harmonographs&lt;/li&gt;
  &lt;li&gt;What your harmonograph says about you&lt;/li&gt;
  &lt;li&gt;10 tips for a happier harmonograph&lt;/li&gt;
  &lt;li&gt;Harmonograph secrets… revealed!&lt;/li&gt;
&lt;/ul&gt;</content>
		<author>
			<name>Liang Ze</name>
			<uri>http://sheaves.github.io/</uri>
		</author>
		<source>
			<title type="html">Sheaves</title>
			<subtitle type="html">Making math concrete with Sage</subtitle>
			<link rel="self" href="http://sheaves.github.io/feed.xml"/>
			<id>http://sheaves.github.io/feed.xml</id>
			<updated>2015-05-25T16:03:28+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">SageMathCloud Notifications are Now Better</title>
		<link href="http://sagemath.blogspot.com/2014/11/sagemathcloud-notifications-are-now.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-8239368345310276770</id>
		<updated>2014-11-14T14:31:34+00:00</updated>
		<content type="html">&lt;span&gt;I just made live a new notifications systems for&amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt;&lt;span&gt;, which I spent all week writing. &amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-WUoD0M9H66Q/VGaAvhl9LMI/AAAAAAABRRg/M4oyqykFK1w/s1600/Screen%2BShot%2B2014-11-14%2Bat%2B2.15.09%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-WUoD0M9H66Q/VGaAvhl9LMI/AAAAAAABRRg/M4oyqykFK1w/s1600/Screen%2BShot%2B2014-11-14%2Bat%2B2.15.09%2BPM.png&quot; height=&quot;248&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;These notifications are what you see when you click the bell in the upper right. &amp;nbsp; This new system replaces the one I made live two weeks ago. &amp;nbsp; &amp;nbsp; Whenever somebody actively *edits* (using the web interface) any file in any project you collaborate on, a notification will get created or updated. &amp;nbsp; &amp;nbsp;If a person *comments* on any file in any project you collaborate on (using the chat interface to the right), then not only does the notification get updated, there is also a little red counter on top of the bell and also in the title of the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt;&lt;span&gt;&amp;nbsp;tab. &amp;nbsp; In particular, people will now be&amp;nbsp;much more likely to see the chats you make on files.&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-MuNCyjAT7ec/VGaBGsXLWgI/AAAAAAABRRo/YTENwRbG7Fw/s1600/Screen%2BShot%2B2014-11-14%2Bat%2B2.23.58%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-MuNCyjAT7ec/VGaBGsXLWgI/AAAAAAABRRo/YTENwRbG7Fw/s1600/Screen%2BShot%2B2014-11-14%2Bat%2B2.23.58%2BPM.png&quot; height=&quot;231&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;NOTE: &lt;/b&gt;I have not yet enabled any sort of daily email notification summary, but that is planned.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Some technical details: &amp;nbsp;Why did this take all week? &amp;nbsp;It's because the technology that makes it work behind the scenes is something that was fairly difficult for me to figure out how to implement. &amp;nbsp;I implemented a way to create an object that can be used simultaneously by many clients and supports realtime synchronization.... but is stored by the distributed &lt;a href=&quot;http://www.datastax.com/&quot; target=&quot;_blank&quot;&gt;Cassandra &lt;/a&gt;database instead of a file in a project. &amp;nbsp; Any changes to that object get synchronized around very quickly. &amp;nbsp; It's similar to how synchronized text editing (with several people at once) works, but I rethought &lt;a href=&quot;https://neil.fraser.name/writing/sync/&quot; target=&quot;_blank&quot;&gt;differential synchronization&lt;/a&gt; carefully, and also figured out how to synchronize using an eventually consistent database. &amp;nbsp; &amp;nbsp;This will be useful for implementing a lot other things in &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt; that operate at a different level than &quot;one single project&quot;. &amp;nbsp;For example, I plan to add functions so you can access these same &quot;synchronized databases&quot; from Python processes -- then you'll be able to have sage worksheets (say) running on several different projects, but all saving their data to some common synchronized place (backed by the database). &amp;nbsp; Another application will be a listing of the last 100 (say) files you've opened, with easy ways to store extra info about them. &amp;nbsp; &amp;nbsp;It will also be easy to make account and project settings more realtime, so when you change something, it automatically takes effect and is also synchronized across other browser tabs you may have open. &amp;nbsp; If you're into modern Single Page App web development, this might remind you of Angular or React or Hoodie or Firebase -- what I did this week is probably kind of like some of the sync functionality of those frameworks, but I use Cassandra (instead of MongoDB, say) and differential synchronization. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I &lt;a href=&quot;https://gist.github.com/williamstein/badf771e50658010d56d&quot; target=&quot;_blank&quot;&gt;BSD-licensed the differential synchronization code &lt;/a&gt;&amp;nbsp;that&amp;nbsp;I wrote as part of the above.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2015-09-14T22:30:05+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">A Non-technical Overview of the SageMathCloud Project</title>
		<link href="http://sagemath.blogspot.com/2014/10/a-non-technical-overview-of.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-3221518328989833144</id>
		<updated>2014-10-17T12:04:41+00:00</updated>
		<content type="html">&lt;a href=&quot;http://1.bp.blogspot.com/-zd2T2HBgpag/VEFoFOU5GaI/AAAAAAABQ4U/ODq-0-ua7y0/s1600/Screen%2BShot%2B2014-10-17%2Bat%2B12.03.25%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-zd2T2HBgpag/VEFoFOU5GaI/AAAAAAABQ4U/ODq-0-ua7y0/s1600/Screen%2BShot%2B2014-10-17%2Bat%2B12.03.25%2BPM.png&quot; height=&quot;194&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;What problems is the &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud project&lt;/a&gt; trying to solve?  What pain points does it address?  Who are the competitors and what is the state of the technology right now?     &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2 id=&quot;what-problems-youre-trying-to-solve-and-why-are-these-a-problem&quot;&gt;What problems you’re trying to solve and why are these a problem?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Computational Education&lt;/strong&gt;: How can I &lt;em&gt;teach a course&lt;/em&gt; that involves mathematical computation and programming?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Computational Research:&lt;/strong&gt; How can I carry out &lt;em&gt;collaborative computational research&lt;/em&gt; projects?&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cloud computing:&lt;/strong&gt; How can I get easy user-friendly collaborative access to a &lt;em&gt;remote Linux server&lt;/em&gt;?&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;what-are-the-pain-points-of-the-status-quo-and-who-feels-the-pain&quot;&gt;What are the pain points of the status quo and who feels the pain?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Student/Teacher pain:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;Getting &lt;em&gt;students to install software&lt;/em&gt; needed for a course on their computers is a major pain; sometimes it is just impossible, due to no major math software (not even Sage) supporting all recent versions of Windows/Linux/OS X/iOS/Android.&lt;/li&gt;&lt;li&gt;Getting university &lt;em&gt;computer labs to install the software&lt;/em&gt; you need for a course is frustrating and expensive (time and money).&lt;/li&gt;&lt;li&gt;Even if computer labs worked, they are often being used by another course, stuffy, and students can't possibly do all their homework there, so computation gets short shrift. Lab keyboards, hardware, etc., all hard to get used to. Crappy monitors.&lt;/li&gt;&lt;li&gt;Painful confusing problems &lt;em&gt;copying files around&lt;/em&gt; between teachers and students.&lt;/li&gt;&lt;li&gt;Helping a student or collaborator with their specific problem is very hard &lt;em&gt;without physical access&lt;/em&gt; to their computer.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Researcher pain:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;Making &lt;em&gt;backups every few minutes&lt;/em&gt; of the complete state of everything when doing research often hard and distracting, but important for reproducibility.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Copying around documents&lt;/em&gt;, emailing or pushing/pulling them to revision control is frustrating and confusing.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Installing obscuring software&lt;/em&gt; is frustarting and distracting from the research they really want to do.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Everybody:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;It is frustrating not having &lt;em&gt;LIVE working access&lt;/em&gt; to your files wherever you are. (Dropbox/Github doesn't solve this, since files are static.)&lt;/li&gt;&lt;li&gt;It is difficult to &lt;em&gt;leave computations running remotely&lt;/em&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;why-is-your-technology-poised-to-succeed&quot;&gt;Why is your technology poised to succeed?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;When it works, &lt;strong&gt;SageMathCloud solves every pain point listed above.&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;The timing is right, due to &lt;em&gt;massive improvements in web browsers&lt;/em&gt; during the last 3 years.&lt;/li&gt;&lt;li&gt;I am on full &lt;em&gt;sabbatical&lt;/em&gt; this year, so at least success isn't totally impossible due to not working on the project.&lt;/li&gt;&lt;li&gt;I have been solving the above problems in less scalable ways for myself, colleagues and students &lt;em&gt;since the 1990s&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;em&gt;SageMathCloud has many users&lt;/em&gt; that provide valuable feedback.&lt;/li&gt;&lt;li&gt;We have already &lt;em&gt;solved difficult problems&lt;/em&gt; since I started this project in Summer 2012 (and launched first version in April 2013).&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;who-are-your-competitors&quot;&gt;Who are your competitors?&lt;/h2&gt;&lt;em&gt;There are no competitors&lt;/em&gt; with a similar range of functionality. However, there are many webapps that have some overlap in capabilities:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Mathematical overlap:&lt;/strong&gt; Online Mathematica: &quot;Bring Mathematica to life in the cloud&quot;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Python overlap:&lt;/strong&gt; Wakari: &quot;Web-based Python Data Analysis&quot;; also PythonAnywhere&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Latex overlap:&lt;/strong&gt; ShareLaTeX, WriteLaTeX&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Web-based IDE's/terminals:&lt;/strong&gt; target writing webapps (not research or math education): c9.io, nitrous.io, codio.com, terminal.com&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Homework:&lt;/strong&gt; WebAssign and WebWork&lt;/li&gt;&lt;/ul&gt;Right now, &lt;strong&gt;SageMathCloud gives away for free far more&lt;/strong&gt; than any other similar site, due to very substantial temporary financial support from Google, the NSF and others.&lt;br /&gt;&lt;h2 id=&quot;whats-the-total-addressable-market&quot;&gt;What’s the total addressable market?&lt;/h2&gt;Though our primary focus is the &lt;em&gt;college mathematics classroom&lt;/em&gt;, there is a larger market:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Students:&lt;/strong&gt; all undergrad/high school students in the world taking a course involving programming or mathematics&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Teachers:&lt;/strong&gt; all teachers of such courses&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Researchers:&lt;/strong&gt; anybody working in areas that involve programming or data analysis&lt;/li&gt;&lt;/ul&gt;Moreover, the web-based platform for computing that we're building lends itself to many other collaborative applications.&lt;br /&gt;&lt;h2 id=&quot;what-stage-is-your-technology-at&quot;&gt;What stage is your technology at?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;The site is up and running and has &lt;strong&gt;28,413 monthly active users&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;There are still many bugs&lt;/li&gt;&lt;li&gt;I have a &lt;em&gt;precise todo list&lt;/em&gt; that would take me at least &lt;em&gt;2 months&lt;/em&gt; fulltime to finish.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;is-your-solution-technically-feasible-at-this-point&quot;&gt;Is your solution technically feasible at this point?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Yes. It is only a matter of time until the software is very polished.&lt;/li&gt;&lt;li&gt;Morever, we have compute resources to support significantly more users.&lt;/li&gt;&lt;li&gt;But without money (from paying customers or investment), if growth continues at the current rate then we will have to clamp down on free quotas for users.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;what-technical-milestones-remain&quot;&gt;What technical milestones remain?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Infrastructure for creating automatically-graded homework problems.&lt;/li&gt;&lt;li&gt;Fill in lots of details and polish.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;do-you-have-external-credibility-with-technicalbusiness-experts-and-customers&quot;&gt;Do you have external credibility with technical/business experts and customers?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Business experts:&lt;/strong&gt; I don't even know any business experts.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Technical experts:&lt;/strong&gt; I founded the Sage math software, which is 10 years old and relatively well known by mathematicians.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Customers:&lt;/strong&gt; We have no customers; we haven't offered anything for sale.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;market-research&quot;&gt;Market research?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;I know about math software and its users as a result of founding the Sage open source math software project, NSF-funded projects I've been involved in, etc.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;is-the-intellectual-property-around-your-technology-protected&quot;&gt;Is the intellectual property around your technology protected?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;The IP is software.&lt;/li&gt;&lt;li&gt;The website software is mostly new Javascript code we wrote that is copyright Univ. of Washington and mostly not open source; it depends on various open source libraries and components.&lt;/li&gt;&lt;li&gt;The Sage math software is entirely open source.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;who-are-the-team-members-to-move-this-technology-forward&quot;&gt;Who are the team members to move this technology forward?&lt;/h2&gt;I am the only person working on this project fulltime right now.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Everything:&lt;/strong&gt; William Stein -- UW professor&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Browser client code:&lt;/strong&gt; Jon Lee, Andy Huchala, Nicholas Ruhland -- UW undergrads&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Web design, analytics:&lt;/strong&gt; Harald Schilly -- Austrian grad student&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Hardware:&lt;/strong&gt; Keith Clawson&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;why-are-you-the-ideal-team&quot;&gt;Why are you the ideal team?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;We are not the ideal team.&lt;/li&gt;&lt;li&gt;If I had money maybe I could build the ideal team, leveraging my experience and connections from the Sage project...&lt;/li&gt;&lt;/ul&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2015-09-14T22:30:05+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Public Sharing in SageMathCloud, Finally</title>
		<link href="http://sagemath.blogspot.com/2014/10/public-sharing-in-sagemathcloud-finally.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-5655260630534776590</id>
		<updated>2014-10-16T13:29:42+00:00</updated>
		<content type="html">&lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud (SMC)&lt;/a&gt; is a free (&lt;a href=&quot;http://www.nsf.gov/&quot;&gt;NSF&lt;/a&gt;, &lt;a href=&quot;http://google.com/&quot;&gt;Google&lt;/a&gt; and &lt;a href=&quot;http://www.washington.edu/&quot;&gt;UW&lt;/a&gt; supported) website that lets you collaboratively work with Sage worksheets, IPython notebooks, LaTeX documents and much, much more. All work is snapshotted every few minutes, and copied out to several data centers, so if something goes wrong with a project running on one machine (right before your lecture begins or homework assignment is due), it will pop up on another machine. We designed the backend architecture from the ground up to be very horizontally scalable and have no single points of failure.&lt;br /&gt;&lt;br /&gt;This post is about an important new feature: &lt;em&gt;&lt;b&gt;You can now mark a folder or file so that all other users can view it, and very easily copy it to their own project.&lt;/b&gt;&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-oV_0xhD4af0/VEAnl6SRVQI/AAAAAAABQ2U/NkKVdh0NbNE/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.15.58%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-oV_0xhD4af0/VEAnl6SRVQI/AAAAAAABQ2U/NkKVdh0NbNE/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.15.58%2BPM.png&quot; height=&quot;308&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;This solves problems:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; You create a &quot;template&quot; project, e.g., with pre-installed software, worksheets, IPython notebooks, etc., and want other users to easily be able to clone it as a new project. &lt;strong&gt;Solution:&lt;/strong&gt; Mark the home directory of the project public, and share the link widely.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-FDT_Z1UD9H0/VEAn9tH3OhI/AAAAAAABQ2c/RQGklZMBiJA/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.17.35%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-FDT_Z1UD9H0/VEAn9tH3OhI/AAAAAAABQ2c/RQGklZMBiJA/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.17.35%2BPM.png&quot; height=&quot;201&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; You create a syllabus for a course, an assignment, a worksheet full of 3d images, etc., that you want to share with a group of students. &lt;strong&gt;Solution:&lt;/strong&gt; Make the syllabus or worksheet public, and share the link with your students via an email and on the course website. (Note: You can also use a course document to share files with all students privately.) &lt;a href=&quot;https://cloud.sagemath.com/projects/4a5f0542-5873-4eed-a85c-a18c706e8bcd/files/some%203d%20plots.sagews&quot; target=&quot;_blank&quot;&gt;For example...&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-dMZS2DgsnzY/VEAouDdZu6I/AAAAAAABQ2k/6iPT0OWIomk/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.20.38%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-dMZS2DgsnzY/VEAouDdZu6I/AAAAAAABQ2k/6iPT0OWIomk/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.20.38%2BPM.png&quot; height=&quot;320&quot; width=&quot;286&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-hQIq6QKlzLo/VEApB-yQV8I/AAAAAAABQ2s/o-jx4vjIlj0/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.22.15%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-hQIq6QKlzLo/VEApB-yQV8I/AAAAAAABQ2s/o-jx4vjIlj0/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.22.15%2BPM.png&quot; height=&quot;74&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; You run into a problem using &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC&lt;/a&gt; and want help. &lt;strong&gt;Solution:&lt;/strong&gt; Make the worksheet or code that isn't working public, and post &lt;a href=&quot;https://cloud.sagemath.com/projects/4a5f0542-5873-4eed-a85c-a18c706e8bcd/files/confused.sagews&quot; target=&quot;_blank&quot;&gt;a link&lt;/a&gt; in a forum asking for help.&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-CdngoQAPCi8/VEApPsnc_8I/AAAAAAABQ20/r6wHP-IMqQ8/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.23.13%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-CdngoQAPCi8/VEApPsnc_8I/AAAAAAABQ20/r6wHP-IMqQ8/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.23.13%2BPM.png&quot; height=&quot;216&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; You write a blog post explaining how to solve a problem and write related code in an &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC&lt;/a&gt; worksheet, which you want your readers to see. &lt;strong&gt;Solution:&lt;/strong&gt; Make that code public and post a link in your blog post.&lt;/li&gt;&lt;/ul&gt;Here's &lt;a href=&quot;http://youtu.be/B4GiyjIXL4Q&quot;&gt;a screencast&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Each &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC&lt;/a&gt; project has its own local &quot;project server&quot;, which takes some time to start up, and serves files, coordinates Sage, terminal, and IPython sessions, etc. Public sharing completely avoids having anything to do with the project server -- &lt;strong&gt;it works fine even if the project server is not running&lt;/strong&gt; -- it's always fast and there is no startup time if the project server isn't running. Moreover, public sharing reads the live files from your project, so you can update the files in a public shared directory, add new files, etc., and users will see these changes (when they refresh, since it's not automatic).&lt;br /&gt;As an example, here is the &lt;a href=&quot;https://cloud.sagemath.com/projects/4a5f0542-5873-4eed-a85c-a18c706e8bcd/files/cloud-examples/&quot;&gt;cloud-examples github repo as a share&lt;/a&gt;. If you click on it (and have a SageMathCloud account), you'll see this:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&lt;/pre&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-nFbB6EldXxw/VEAph5pthGI/AAAAAAABQ28/cEBiDtyHSf8/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.24.21%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-nFbB6EldXxw/VEAph5pthGI/AAAAAAABQ28/cEBiDtyHSf8/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B1.24.21%2BPM.png&quot; height=&quot;280&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;pre&gt;&lt;br /&gt;&lt;/pre&gt;&lt;h2 id=&quot;what-next&quot;&gt;What Next?&lt;/h2&gt;There is an enormous amount of natural additional functionality to build on top of public sharing.&lt;br /&gt;&lt;br /&gt;For example, not all document types can be previewed in read-only mode right now; in particular, IPython notebooks, task lists, LaTeX documents, images, and PDF files must be copied from the public share to another project before people can view them. It is better to release a first usable version of public sharing before systematically going through and implementing the additional features needed to support all of the above. You &lt;em&gt;can&lt;/em&gt; make complicated Sage worksheets with embedded images and 3d graphics, and those can be previewed before copying them to a project.&lt;br /&gt;Right now, the only way to visit a public share is to paste the URL into a browser tab and load it. Soon the projects page will be re-organized so you can search for publicly shared paths, see all public shares that you have previously visited, who shared them, how many +1's they've received, comments, etc.&lt;br /&gt;&lt;br /&gt;Also, I plan to eventually make it so public shares will be visible to people who have not logged in, and when viewing a publicly shared file or directory, there will be an option to start it running in a limited &lt;em&gt;project&lt;/em&gt;, which will vanish from existence after a period of inactivity (say).&lt;br /&gt;&lt;br /&gt;There are also dozens of details that are not yet implemented. For example, it would be nice to be able to directly download files (and directories!) to your computer from a public share. And it's also natural to share a folder or file with a specific list of people, rather than sharing it publicly. If somebody is viewing a public file and you change it, they should likely see the update automatically. Right now when viewing a share, you don't even know who shared it, and if you open a worksheet it can automatically execute Javascript, which is potentially unsafe. &amp;nbsp;Once public content is easily found, if somebody posts &quot;evil&quot; content publicly, there needs to be an easy way for users to report it.&lt;br /&gt;&lt;h2 id=&quot;sharing-will-permeate-everything&quot;&gt;Sharing will permeate everything&lt;/h2&gt;Sharing has been thought about a great deal during the last few years in the context of sites such as Github, Facebook, Google+ and Twitter. With &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC&lt;/a&gt;, we've developed a foundation for interactive collaborative computing in a browser, and will introduce sharing on top of that in a way that is motivated by your problems. For example, as with Github or Google+, when somebody makes a copy of your publicly shared folder, this copy should be listed (under &quot;copies&quot;) and it could start out public by default. There is much to do.&lt;br /&gt;&lt;br /&gt;One reason it took so long to release the first version of public sharing is that I kept imagining that sharing would happen at the level of complete projects, just like sharing in Github. However, when thinking through your problems, it makes way more sense in &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC&lt;/a&gt; to share individual directories and files. Technically, sharing at this level works works well for &lt;em&gt;read-only&lt;/em&gt; access, not for read-write access, since projects are mapped to Linux accounts. Another reason I have been very hesitant to support sharing is that I've had enormous trouble over the years with spammers posting content that gets me in trouble (with my University -- it is illegal for UW to host advertisements). However, by not letting search engines index content, the motivation for spammers to post nasty content is greatly reduced.&lt;br /&gt;&lt;br /&gt;Imagine publicly sharing recipes for automatically gradable homework problems, which use the full power of everything installed in &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SMC&lt;/a&gt;, get forked, improved, used, etc.</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2015-09-14T22:30:05+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">SageMathCloud Course Management</title>
		<link href="http://sagemath.blogspot.com/2014/10/sagemathcloud-course-management.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-4658363764746166473</id>
		<updated>2014-10-01T12:05:16+00:00</updated>
		<content type="html">&lt;div class=&quot;modal-body&quot;&gt;&lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt; now has some very rudimentary course management functionality. &amp;nbsp;Though still very basic, it makes it much, much easier to make files available to students, collect homework, etc., entirely using &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt; (without having to use email or any other submissions systems or github to share files). &amp;nbsp; To get started, create a new course by clicking on +New, then typing the name of your course and click &quot;Course&quot;:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-zJYWHLYWRP8/VCxOUQCrbrI/AAAAAAABQQ4/KT4IWWwUQKg/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.55.15%2BAM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-zJYWHLYWRP8/VCxOUQCrbrI/AAAAAAABQQ4/KT4IWWwUQKg/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.55.15%2BAM.png&quot; height=&quot;198&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Course documents allow you to manage a &lt;i&gt;list of students&lt;/i&gt;, &lt;i&gt;create projects&lt;/i&gt; for each                     of them, &lt;i&gt;share homework&lt;/i&gt; and folders with them, &lt;i&gt;collect                     homework&lt;/i&gt;, and &lt;i&gt;grade and return&lt;/i&gt; it to students.                       &lt;br /&gt;&lt;h4&gt;Add Students&lt;/h4&gt;To add a student to your course, click on the &lt;a class=&quot;btn btn-primary btn-default&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-users&quot;&gt; &lt;/i&gt;  Students&lt;/a&gt; tab,                         then type a student's name or email address in the &quot;Add student&quot; box to the right and press                         enter or click the button.   Searching for an email address is best, since you can be certain that the person you're adding is                         really a student in your course (instead of an unknown SageMathCloud user with the same name); moreover, if your student                         doesn't already have an account, they will receive an invitation via email.                         &lt;span class=&quot;lighten&quot;&gt;(NOTE: There is currently no way to add dozens of students at once.)&lt;/span&gt;                    &lt;br /&gt;&lt;span class=&quot;lighten&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-5jlvxCeEwAk/VCxO5T9_U1I/AAAAAAABQRA/YjyF5gcEogs/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.57.53%2BAM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-5jlvxCeEwAk/VCxO5T9_U1I/AAAAAAABQRA/YjyF5gcEogs/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.57.53%2BAM.png&quot; height=&quot;171&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span class=&quot;lighten&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lighten&quot;&gt;&lt;br /&gt;&lt;/span&gt;Once you add a student, click on &lt;a class=&quot;btn btn-warning&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-plus-circle&quot;&gt; &lt;/i&gt;  Create Project&lt;/a&gt; next to your                         student's name to create their project.  You own the project, and they will be added as a collaborator, and invited by email if they                         do not yet have an account.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-pi4VnSnlrCA/VCxPS2-Tc4I/AAAAAAABQRQ/03FygAXUnRM/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.59.50%2BAM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-pi4VnSnlrCA/VCxPS2-Tc4I/AAAAAAABQRQ/03FygAXUnRM/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.59.50%2BAM.png&quot; height=&quot;123&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-C5hvg7AuAow/VCxPSzz8TuI/AAAAAAABQRU/LyBP3j2xA7s/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.00.10%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-C5hvg7AuAow/VCxPSzz8TuI/AAAAAAABQRU/LyBP3j2xA7s/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.00.10%2BPM.png&quot; height=&quot;129&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;Don't worry, student projects are hidden by default from your main project listing.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-ZzDNFNJIvAQ/VCxPk6o1hnI/AAAAAAABQRg/fF3r40SK6_c/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.01.23%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-ZzDNFNJIvAQ/VCxPk6o1hnI/AAAAAAABQRg/fF3r40SK6_c/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.01.23%2BPM.png&quot; height=&quot;115&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;(To delete a student, click &lt;i class=&quot;fa fa-times&quot;&gt; &lt;/i&gt; to the right of the student.                         You can toggle whether deleted students are shown in settings.)&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Add Assignments&lt;/h4&gt;To create an assignment, first click                         &lt;a href=&quot;https://www.blogger.com/null&quot;&gt;                            &lt;i class=&quot;project-control-icon fa fa-plus-circle&quot;&gt;&lt;/i&gt;                            &lt;span class=&quot;project-pages-button-label hidden-xs&quot;&gt;New&lt;/span&gt;                        &lt;/a&gt;                        in the upper left of your project to create a new folder, and create or add files to it, as usual.                         Click on the &lt;a class=&quot;btn btn-default btn-primary&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-share-square-o&quot;&gt; &lt;/i&gt; Assignments&lt;/a&gt;                        tab of the course, then search for the folder by typing some part of its name in the box on the far right.                         Click to select the folder and it will be added to your                         list of assignments.                         To make &lt;b&gt;copies&lt;/b&gt; of this folder available to all of your students whose projects you have created,                         click the &lt;a class=&quot;btn btn-warning&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-share-square-o&quot;&gt; &lt;/i&gt;  Assign&lt;/a&gt; button.                         &lt;span class=&quot;lighten&quot;&gt;NOTE: You can share arbitrary folders with any contents with your                             students -- folders don't have                             to contain &quot;assignments&quot;, and may contain anything, Sage worksheets, IPython notebooks,                             LaTeX documents, etc.&lt;/span&gt;                    &lt;br /&gt;&lt;span class=&quot;lighten&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-zv3oNd_QHhI/VCxQD8AEiSI/AAAAAAABQRo/aIPlWFZ83cw/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.03.06%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-zv3oNd_QHhI/VCxQD8AEiSI/AAAAAAABQRo/aIPlWFZ83cw/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.03.06%2BPM.png&quot; height=&quot;98&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-LT4ZJFwHv3k/VCxQEwwjM7I/AAAAAAABQRw/N9d6TlSgoak/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.03.20%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-LT4ZJFwHv3k/VCxQEwwjM7I/AAAAAAABQRw/N9d6TlSgoak/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.03.20%2BPM.png&quot; height=&quot;140&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;span class=&quot;lighten&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lighten&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;h4&gt;Collecting and Grading Assignments&lt;/h4&gt;To collect an assignment from your students,                         click &lt;a class=&quot;btn btn-warning&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-share-square-o fa-rotate-180&quot;&gt; &lt;/i&gt;  Collect&lt;/a&gt; to the right of an assignment                         to collect it from all students.                         &lt;span class=&quot;lighten&quot;&gt;                        (NOTE: There is currently no way to schedule collection to happen at a specific time -- it happens                         when you click the button.  Click it again to update the collected files.)&lt;/span&gt;                    &lt;br /&gt;Once the assignments are collected, click                         &lt;button class=&quot;btn btn-default dropdown-toggle&quot; type=&quot;button&quot;&gt;                            &lt;i class=&quot;fa fa-eye&quot;&gt; &lt;/i&gt; Grade &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;                        &lt;/button&gt;                        and select a student to jump to the folder that contains the collected version of a                         student's assignment. Edit the                         files there, indicating grades on each problem, etc.                         &lt;span class=&quot;lighten&quot;&gt;                            NOTE: There is no special support yet for recording grades, knowing which homework you have graded already, etc.                         &lt;/span&gt;                    &lt;br /&gt;When you are done grading, click &lt;a class=&quot;btn btn-warning&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-share-square-o&quot;&gt; &lt;/i&gt;  Return Graded&lt;/a&gt;                        to return the graded homework to the students.  If the homework folder is called &lt;tt&gt;homework1&lt;/tt&gt;, then the graded version                         will appear in the student's project as &lt;tt&gt;homework1-graded&lt;/tt&gt;.                     &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-QlF6BMvK4wM/VCxQXrL-QxI/AAAAAAABQR4/0PsVB19gPE0/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.04.35%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-QlF6BMvK4wM/VCxQXrL-QxI/AAAAAAABQR4/0PsVB19gPE0/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B12.04.35%2BPM.png&quot; height=&quot;108&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;Course Settings&lt;/h4&gt;Set the title and description of the course in the                         &lt;a class=&quot;btn btn-default btn-primary&quot; href=&quot;https://www.blogger.com/null&quot;&gt;&lt;i class=&quot;fa fa-wrench&quot;&gt; &lt;/i&gt; Settings&lt;/a&gt; tab.  When you                         change these, the new title and description                         propagates automatically to all student projects for this course.                     &lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-h0Zt3E4dEGs/VCxO9o_lDsI/AAAAAAABQRI/FTyzihxwku0/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.58.21%2BAM.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-h0Zt3E4dEGs/VCxO9o_lDsI/AAAAAAABQRI/FTyzihxwku0/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B11.58.21%2BAM.png&quot; height=&quot;151&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;Other&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;A&amp;nbsp;&lt;a href=&quot;http://youtu.be/C8ZALCcCCkM&quot; target=&quot;_blank&quot;&gt;Video Tutorial&lt;/a&gt;                        &lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Technical Remarks&lt;/h4&gt;The underlying file format of a .course file is a plain text file with one line in JSON format for each student,                     shared assignment, and for settings.                  &lt;/div&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2015-09-14T22:30:05+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Abelian complexity of the Oldenburger sequence</title>
		<link href="http://www.slabbe.org/blogue/2014/09/abelian-complexity-of-the-oldenburger-sequence"/>
		<id>http://www.slabbe.org/blogue/2014/09/abelian-complexity-of-the-oldenburger-sequence</id>
		<updated>2014-09-27T22:00:00+00:00</updated>
		<content type="html">&lt;div class=&quot;document&quot;&gt;
&lt;p&gt;The Oldenburger infinite sequence &lt;a class=&quot;citation-reference&quot; href=&quot;http://www.slabbe.org/blogue/2014/09/abelian-complexity-of-the-oldenburger-sequence#o39&quot; id=&quot;id1&quot;&gt;[O39]&lt;/a&gt;
\[
K = 1221121221221121122121121221121121221221\ldots
\]
also known under the name of &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Kolakoski_sequence&quot;&gt;Kolakoski&lt;/a&gt;, is equal to its &lt;em&gt;exponent
trajectory&lt;/em&gt;.  The exponent trajectory \(\Delta\) can be obtained by counting
the lengths of blocks of consecutive and equal letters:
\[
K =
1^12^21^22^11^12^21^12^21^22^11^22^21^12^11^22^11^12^21^22^11^22^11^12^21^12^21^22^11^12^21^12^11^22^11^22^21^12^21^2\ldots
\]
The sequence of exponents above gives the exponent trajectory of the
Oldenburger sequence:
\[
\Delta = 12211212212211211221211212\ldots
\]
which is equal to the original sequence \(K\).
You can define this sequence in Sage:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: K = words.KolakoskiWord()
sage: K
word: 1221121221221121122121121221121121221221...
sage: K.delta()          # delta returns the exponent trajectory
word: 1221121221221121122121121221121121221221...
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;There are a lot of open problem related to basic properties of that sequence.
For example, we do not know if that sequence is recurrent, that is, all finite
subword or factor (finite block of consecutive letters) always reappear. Also,
it is still open to prove whether the density of &lt;tt class=&quot;docutils literal&quot;&gt;1&lt;/tt&gt; in that sequence is
equal to \(1/2\).&lt;/p&gt;
&lt;p&gt;In this blog post, I do some computations on its abelian complexity
\(p_{ab}(n)\) defined as the number of distinct abelian vectors of subwords of
length \(n\) in the sequence. The abelian vector \(\vec{w}\) of a word
\(w\) counts the number of occurences of each letter:
\[
w = 12211212212
\quad
\mapsto
\quad
1^5 2^7 \text{, abelianized}
\quad
\mapsto
\quad
\vec{w} = (5, 7) \text{, the abelian vector of }
w
\]&lt;/p&gt;
&lt;p&gt;Here are the abelian vectors of subwords of length 10 and 20 in the prefix of
length 100 of the Oldenburger sequence.  The functions &lt;tt class=&quot;docutils literal&quot;&gt;abelian_vectors&lt;/tt&gt; and
&lt;tt class=&quot;docutils literal&quot;&gt;abelian_complexity&lt;/tt&gt;  are not in Sage as of now. Code is available at &lt;a class=&quot;reference external&quot; href=&quot;http://trac.sagemath.org/ticket/17058&quot;&gt;trac
#17058&lt;/a&gt; to be merged in Sage soon:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: prefix = words.KolakoskiWord()[:100]
sage: prefix.abelian_vectors(10)
{(4, 6), (5, 5), (6, 4)}
sage: prefix.abelian_vectors(20)
{(8, 12), (9, 11), (10, 10), (11, 9), (12, 8)}
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Therefore, the prefix of length 100 has 3 vectors of subwords of length 10 and 5
vectors of subwords of length 20:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: p100.abelian_complexity(10)
3
sage: p100.abelian_complexity(20)
5
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;I import the &lt;tt class=&quot;docutils literal&quot;&gt;OldenburgerSequence&lt;/tt&gt; from my optional spkg because it is faster
than the implementation in Sage:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: from slabbe import KolakoskiWord as OldenburgerSequence
sage: Olden = OldenburgerSequence()
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;I count the number of abelian vectors of subwords of length 100 in the prefix of
length \(2^{20}\) of the Oldenburger sequence:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: prefix = Olden[:2^20]
sage: %time prefix.abelian_vectors(100)
CPU times: user 3.48 s, sys: 66.9 ms, total: 3.54 s
Wall time: 3.56 s
{(47, 53), (48, 52), (49, 51), (50, 50), (51, 49), (52, 48), (53, 47)}
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Number of abelian vectors of subwords of length less than 100 in the prefix of
length \(2^{20}\) of the Oldenburger sequence:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: %time L100 = map(prefix.abelian_complexity, range(100))
CPU times: user 3min 20s, sys: 1.08 s, total: 3min 21s
Wall time: 3min 23s
sage: from collections import Counter
sage: Counter(L100)
Counter({5: 26, 6: 26, 4: 17, 7: 15, 3: 8, 8: 4, 2: 3, 1: 1})
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Let's draw that:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: labels = ('Length of factors', 'Number of abelian vectors')
sage: title = 'Abelian Complexity of the prefix of length $2^{20}$ of Oldenburger sequence'
sage: list_plot(L100, color='green', plotjoined=True, axes_labels=labels, title=title)
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.slabbe.org/Files/2014/oldenburger_abelian_100.png&quot;&gt;&lt;img alt=&quot;/Files/2014/oldenburger_abelian_100.png&quot; src=&quot;http://www.slabbe.org/Files/2014/oldenburger_abelian_100.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;It seems to grow something like \(\log(n)\). Let's now consider subwords of
length \(2^n\) for \(0\leq n\leq 12\) in the same prefix of length
\(2^{20}\):&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: %time L20 = [(2^n, prefix.abelian_complexity(2^n)) for n in range(20)]
CPU times: user 41 s, sys: 239 ms, total: 41.2 s
Wall time: 41.5 s
sage: L20
[(1, 2), (2, 3), (4, 3), (8, 3), (16, 3), (32, 5), (64, 5), (128, 9),
(256, 9), (512, 13), (1024, 17), (2048, 22), (4096, 27), (8192, 40),
(16384, 46), (32768, 67), (65536, 81), (131072, 85), (262144, 90), (524288, 104)]
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;I now look at subwords of length \(2^n\) for \(0\leq n\leq 23\) in the
longer prefix of length \(2^{24}\):&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: prefix = Olden[:2^24]
sage: %time L24 = [(2^n, prefix.abelian_complexity(2^n)) for n in range(24)]
CPU times: user 20min 47s, sys: 13.5 s, total: 21min
Wall time: 20min 13s
sage: L24
[(1, 2), (2, 3), (4, 3), (8, 3), (16, 3), (32, 5), (64, 5), (128, 9), (256,
9), (512, 13), (1024, 17), (2048, 23), (4096, 33), (8192, 46), (16384, 58),
(32768, 74), (65536, 98), (131072, 134), (262144, 165), (524288, 229),
(1048576, 302), (2097152, 371), (4194304, 304), (8388608, 329)]
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;The next graph gather all of the above computations:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage: G = Graphics()
sage: legend = 'in the prefix of length 2^{}'
sage: G += list_plot(L24, plotjoined=True, thickness=4, color='blue', legend_label=legend.format(24))
sage: G += list_plot(L20, plotjoined=True, thickness=4, color='red', legend_label=legend.format(20))
sage: G += list_plot(L100, plotjoined=True, thickness=4, color='green', legend_label=legend.format(20))
sage: labels = ('Length of factors', 'Number of abelian vectors')
sage: title = 'Abelian complexity of Oldenburger sequence'
sage: G.show(scale=('semilogx', 2), axes_labels=labels, title=title)
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.slabbe.org/Files/2014/oldenburger_abelian_2e24.png&quot;&gt;&lt;img alt=&quot;/Files/2014/oldenburger_abelian_2e24.png&quot; src=&quot;http://www.slabbe.org/Files/2014/oldenburger_abelian_2e24.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;A linear growth in the above graphics with logarithmic \(x\) abcisse would
mean a growth in \(\log(n)\).  After those experimentations, my hypothesis
is that the abelian complexity of the Oldenburger sequence grows like
\(\log(n)^2\).&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;references&quot;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;table class=&quot;docutils citation&quot; frame=&quot;void&quot; id=&quot;o39&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;http://www.slabbe.org/blogue/2014/09/abelian-complexity-of-the-oldenburger-sequence#id1&quot;&gt;[O39]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Oldenburger, Rufus (1939). &amp;quot;Exponent trajectories in symbolic dynamics&amp;quot;.
Transactions of the American Mathematical Society 46: 453–466.
&lt;a class=&quot;reference external&quot; href=&quot;http://dx.doi.org/10.2307%2F1989933&quot;&gt;doi:10.2307/1989933&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
		<author>
			<name>Sébastien Labbé</name>
			<uri>http://www.slabbe.org/blogue/</uri>
		</author>
		<source>
			<title type="html">Sébastien Labbé</title>
			<subtitle type="html">Sébastien Labbé</subtitle>
			<link rel="self" href="http://www.slabbe.org/blogue/categorie/sage/feed/atom/index.xml"/>
			<id>http://www.slabbe.org/blogue/feed/atom/</id>
			<updated>2015-09-11T13:30:06+00:00</updated>
		</source>
	</entry>

</feed>
