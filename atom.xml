<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>Planet Sage</title>
	<link rel="self" href="http://planet.sagemath.org/atom.xml"/>
	<link href="http://planet.sagemath.org"/>
	<id>http://planet.sagemath.org/atom.xml</id>
	<updated>2016-03-14T08:30:18+00:00</updated>
	<generator uri="http://www.planetplanet.org/">Planet/2.0 +http://www.planetplanet.org</generator>

	<entry>
		<title type="html">Open source is now ready to compete with Mathematica for use in the classroom</title>
		<link href="http://sagemath.blogspot.com/2016/02/open-source-is-now-ready-to-directly.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-1537617977036691813</id>
		<updated>2016-03-10T08:02:27+00:00</updated>
		<content type="html">&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;When I think about what makes SageMath different, one of the most fundamental things is that it was created by people who use it every day. &amp;nbsp;It was created by people doing research math, by people teaching math at universities, and by computer programmers and engineers using it for research. &amp;nbsp;It was created by people who really understand computational problems because we live them. &amp;nbsp;We understand the needs of math research, teaching courses, and managing an open source project that users can contribute to and customize to work for their own unique needs.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;The tools we were using, like Mathematica, are clunky, very expensive, and just don't do everything we need. &amp;nbsp;And worst of all, they are closed source software, meaning that you can't even see how they work, and can't modify them to do what you really need. &amp;nbsp;For teaching math, professors get bogged down scheduling computer labs and arranging for their students to buy and install expensive software.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;So I started SageMath as an open source project at Harvard in 2004, to solve the problem that other math software is expensive, closed source, and limited in functionality, and to create a powerful tool for the students in my classes. &amp;nbsp;It wasn't a project that was intended initially as something to be used by hundred of thousands of people. &amp;nbsp;But as I got into the project and as more professors and students started contributing to the project, I could clearly see that these weren't just problems that pissed me off, they were problems that made everyone angry.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;The scope of SageMath rapidly expanded. &amp;nbsp;Our mission evolved to create a free open source serious competitor to Mathematica and similar closed software that the mathematics community was collective spending hundreds of millions of dollars on every year. After a decade of work by over 500 contributors, we made huge progress.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;But installing SageMath was more difficult than ever. &amp;nbsp;It was at that point that I decided I needed to do something so that this groundbreaking software that people desperately needed could be shared with the world.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;So I created SageMathCloud, which is an extremely powerful web-based collaborative way for people to easily use SageMath and other open source software such as LaTeX, R, and Jupyter notebooks easily in their teaching &amp;nbsp;and research. &amp;nbsp; I created SageMathCloud based on nearly two decades of experience using math software in the classroom and online, at Harvard, UC San Diego, and University of Washington.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;SageMathCloud is commercial grade, hosted in Google's cloud, and very large classes are using it heavily right now. &amp;nbsp;It solves the installation problem by avoiding it altogether. &amp;nbsp;It is entirely open source.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Open source is now ready to directly compete with Mathematica for use&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;in the classroom. &amp;nbsp;They told us we could never make something&amp;nbsp;&lt;/span&gt;&lt;span&gt;good enough for mass adoption, but we have made something even better. &amp;nbsp;For the first time, we're making it possible for you to easily use Python and R in your teaching instead of Mathematica; these are industry standard mainstream open source programming languages with strong support from Google, Microsoft and other industry leaders. &amp;nbsp; For the first time, we're making it possible for you to collaborate in real time and manage your course online using the same cutting edge software used by elite mathematicians at the best universities in the world.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;A huge community in academia and in industry are all working together to make open source math software better at a breathtaking pace, and the traditional closed development model just can't keep up.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=11078220&quot; target=&quot;_blank&quot;&gt;Hacker News&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/math/comments/45q7j1/sagemath_open_source_is_now_ready_to_compete_with/&quot; target=&quot;_blank&quot;&gt;Reddit&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Noncommutative Algebras in Sage</title>
		<link href="http://sheaves.github.io/Noncommutative-Sage/"/>
		<id>http://sheaves.github.io/Noncommutative-Sage/</id>
		<updated>2016-03-03T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;In this post, I’ll demonstrate 3 ways to define non-commutative rings in Sage. They’re essentially different ways of expressing the non-commutative relations in the ring:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://doc.sagemath.org/html/en/reference/algebras/sage/algebras/free_algebra.html#sage.algebras.free_algebra.FreeAlgebra_generic.g_algebra&quot; target=&quot;_blank&quot;&gt;Via &lt;code class=&quot;highlighter-rouge&quot;&gt;g_algebra&lt;/code&gt;&lt;/a&gt;: define the relations directly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sagemath.org/documentation/html/en/reference/polynomial_rings/sage/rings/polynomial/plural.html&quot; target=&quot;_blank&quot;&gt;Via &lt;code class=&quot;highlighter-rouge&quot;&gt;NCPolynomialRing_plural&lt;/code&gt;&lt;/a&gt;: define a pair of structural matrices&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://doc.sagemath.org/html/en/reference/rings/sage/rings/quotient_ring.html&quot; target=&quot;_blank&quot;&gt;Via a quotient of a letterplace ring&lt;/a&gt;: define the ideal generated by the relations (only works for homogeneous relations)&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;p&gt;As far as I know, all 3 methods rely on Sage’s interface with &lt;a href=&quot;https://www.singular.uni-kl.de/index.php&quot; target=&quot;_blank&quot;&gt;Singular&lt;/a&gt; and its non-commutative extension &lt;a href=&quot;https://www.singular.uni-kl.de/Manual/4-0-2/sing_469.htm&quot; target=&quot;_blank&quot;&gt;Plural&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition to all the documentation linked above, I also relied heavily on  Greuel and Pfister’s &lt;a href=&quot;http://www.cimpa-icpam.org/archivesecoles/20130130100834/singularbuch1-210.pdf&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;A Singular Introduction to
Commutative Algebra&lt;/em&gt;&lt;/a&gt;. Despite the title, it does have a pretty substantial section (1.9) devoted to non-commutative $G$-algebras.&lt;/p&gt;

&lt;h2 id=&quot;umathfraksl2-and-its-homogenization&quot;&gt;$U(\mathfrak{sl}_2)$ and its homogenization&lt;/h2&gt;

&lt;p&gt;The running example throughout this post will be the universal enveloping algebra $U(\mathfrak{sl}_2)$ over $\mathbb{Q}$.&lt;/p&gt;

&lt;p&gt;We’ll define this to be the (non-commutative) $\mathbb{Q}$-algebra $U$ with generators $e,f,h$ subject to the relations&lt;/p&gt;



&lt;p&gt;If we set $e,f,h$ to have degree 1, these relations are not homogeneous. Their left-hand sides only have degree 2 terms, while their right-hand sides have degree 1 terms as well. This is fine with the first two methods, but won’t work for method 3 (which requires homogeneous relations).&lt;/p&gt;

&lt;p&gt;To demonstrate the third method, we’ll define the $\mathbb{Q}$-algebra $H$ with generators $e,f,h,t$ subject to the homogeneous relations&lt;/p&gt;





&lt;p&gt;We can obtain $U$ both as a quotient and a localization of $H$:&lt;/p&gt;



&lt;h2 id=&quot;g-algebras&quot;&gt;$G$-algebras&lt;/h2&gt;
&lt;p&gt;Using the  &lt;a href=&quot;http://doc.sagemath.org/html/en/reference/algebras/sage/algebras/free_algebra.html#sage.algebras.free_algebra.FreeAlgebra_generic.g_algebra&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g_algebra&lt;/code&gt;&lt;/a&gt; method of Sage’s &lt;code class=&quot;highlighter-rouge&quot;&gt;FreeAlgebra&lt;/code&gt; class, we can simply plug our noncommutative relations in, and get our non-commutative ring. This is about as easy as it gets:&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Let’s unravel what’s going on here.&lt;/p&gt;

&lt;h3 id=&quot;monomial-orderings-and-pbw-basis&quot;&gt;Monomial orderings and PBW basis&lt;/h3&gt;
&lt;p&gt;Most algorithms for commutative and non-commutative rings require an ordering on the generators. In our case, let’s use the ordering&lt;/p&gt;



&lt;p&gt;This is implicitly stated in our code: we wrote &lt;code class=&quot;highlighter-rouge&quot;&gt;F.&amp;lt;e,f,h&amp;gt;&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;F.&amp;lt;h,e,f&amp;gt;&lt;/code&gt;, for example.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;standard word&lt;/em&gt; is a monomial of the form&lt;/p&gt;



&lt;p&gt;In the polynomial ring $\mathbb{Q}[e,f,h]$, every monomial can be expressed in this form, so the set of standard words forms a $\mathbb{Q}$-basis for $\mathbb{Q}[e,f,h]$.&lt;/p&gt;

&lt;p&gt;In a non-commutative ring, whether or not the standard words form a basis depends on what relations we have. Such a basis, if it exists, is called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Poincar%C3%A9%E2%80%93Birkhoff%E2%80%93Witt_theorem&quot; target=&quot;_blank&quot;&gt;PBW basis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The free algebra $F = \mathbb{Q}\langle e,f,h\rangle$ has no relations, so does not have a PBW basis. Fortunately, our algebra $U$ does have a PBW basis.&lt;/p&gt;

&lt;p&gt;This means that we can always express a non-standard monomial (e.g. $fe$) as a sum of standard monomials (e.g. $ef - h$). The non-commutative relations that define $U$ can thus be thought of as an algorithm for turning non-standard words into sums of standard words.&lt;/p&gt;

&lt;p&gt;To do this in Sage, we define a &lt;a href=&quot;https://docs.python.org/2/tutorial/datastructures.html#dictionaries&quot; target=&quot;_blank&quot;&gt;dictionary&lt;/a&gt; whose keys are non-standard words and values are the standard words they become.&lt;/p&gt;

&lt;p&gt;In the above example, our dictionary was short enough to fit into one line, but we could also define a dictionary separately and pass it into &lt;code class=&quot;highlighter-rouge&quot;&gt;g_algebra&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;It’s very important that the keys are non-standard words and the values are sums of standard words. Mathematically, the relation $fe = ef - h$ is the same as $ef = fe + h$, but if we replace &lt;code class=&quot;highlighter-rouge&quot;&gt;f*e : e*f - h&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;e*f : f*e + h&lt;/code&gt; in the code, we’ll get an error (try it!).&lt;/p&gt;

&lt;h3 id=&quot;what-are-g-algebras&quot;&gt;What are $G$-algebras?&lt;/h3&gt;
&lt;p&gt;The reason why $U$ has a PBW basis is because it is a $G$-algebra. Briefly, $G$-algebras are algebras whose relations satisfy certain non-degeneracy conditions that make the algebra nice to work with.&lt;/p&gt;

&lt;p&gt;For a full definition of $G$-algebras, refer to &lt;a href=&quot;http://www.cimpa-icpam.org/archivesecoles/20130130100834/singularbuch1-210.pdf&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;A Singular Introduction to Commutative Algebra&lt;/em&gt;&lt;/a&gt; or the &lt;a href=&quot;https://www.singular.uni-kl.de/Manual/4-0-2/sing_534.htm#SEC573&quot; target=&quot;_blank&quot;&gt;Plural manual&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If $A$ is a $G$-algebra, then it has a PBW basis, is left and right Noetherian, and is an integral domain. More importantly (for this site at least!), it means that we can define $A$ in Singular/Plural, and hence in Sage.&lt;/p&gt;

&lt;h2 id=&quot;structural-matrices-for-a-g-algebra&quot;&gt;Structural matrices for a $G$-algebra&lt;/h2&gt;
&lt;p&gt;Another way of writing our non-commutative relations is&lt;/p&gt;



&lt;p&gt;where $ * $ denotes element-wise multiplication (so there isn’t any linear algebra going on here; we’re just using matrices to organize the information). Let $N,C,S,D$ be the matrices above, in that order, so that $N = C*S + D$.&lt;/p&gt;

&lt;p&gt;If we let $x_1 = e, x_2 = f, x_3 = h$ (so that $x_i \leq x_j$ if $i \leq j$) then for $i &amp;lt; j$&lt;/p&gt;



&lt;p&gt;In other words, $N$ contains the non-standard words that we’re trying to express in terms of the standard words in $S$.&lt;/p&gt;

&lt;p&gt;The matrices $C$ and $D$ are called the &lt;em&gt;structural matrices&lt;/em&gt; of the $G$-algebra, and their entries are such that our relations may be written&lt;/p&gt;



&lt;p&gt;with zeros everywhere else ($i \geq j$). If $C = D = 0$, the resulting algebra will be commutative.&lt;/p&gt;

&lt;p&gt;We can use the structural matrices $C$ and $D$ to define our algebra via Sage’s  &lt;a href=&quot;http://www.sagemath.org/documentation/html/en/reference/polynomial_rings/sage/rings/polynomial/plural.html&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NCPolynomialRing_plural&lt;/code&gt;&lt;/a&gt; function (note that Python uses zero-indexing for matrices):&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; is a commutative polynomial ring. In fact, up till the point where we call &lt;code class=&quot;highlighter-rouge&quot;&gt;NCPolynomialRing_plural&lt;/code&gt;, even the variables &lt;code class=&quot;highlighter-rouge&quot;&gt;e,f,h&lt;/code&gt; are treated as commutative variables.&lt;/p&gt;

&lt;p&gt;This method of defining $U$ is considerably longer and more prone to mistakes than using &lt;code class=&quot;highlighter-rouge&quot;&gt;g_algebra&lt;/code&gt;. As stated in the &lt;a href=&quot;http://www.sagemath.org/documentation/html/en/reference/polynomial_rings/sage/rings/polynomial/plural.html&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt;, this is not intended for use! I’m including it here because this is essentially how one would go about defining a $G$-algebra in Singular. In fact, the Sage method &lt;code class=&quot;highlighter-rouge&quot;&gt;g_algebra&lt;/code&gt; calls &lt;code class=&quot;highlighter-rouge&quot;&gt;NCPolynomialRing_plural&lt;/code&gt;, which in turn calls Singular.&lt;/p&gt;

&lt;h2 id=&quot;quotients-of-letterplace-rings&quot;&gt;Quotients of letterplace rings&lt;/h2&gt;
&lt;p&gt;Our final method for defining non-commutative rings makes use of &lt;a href=&quot;http://doc.sagemath.org/html/en/reference/algebras/sage/algebras/letterplace/free_algebra_letterplace.html&quot; target=&quot;_blank&quot;&gt;Sage’s implementation of Singular’s letterplace rings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As mentioned at the start of this post, this method requires the relations to be homogeneous, so we’ll work with $H$ instead of $U$.&lt;/p&gt;

&lt;p&gt;Let $\mathbb{Q}\langle e,f,h,t \rangle$ be the free algebra on 4 variables. Consider the two-sided ideal $I$ generated by the relations for $H$:&lt;/p&gt;



&lt;p&gt;Then&lt;/p&gt;



&lt;p&gt;This can be expressed Sage-ly:&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;The expression &lt;code class=&quot;highlighter-rouge&quot;&gt;F*I*F&lt;/code&gt; is the two-sided ideal generated by elements in the list &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Although $U$ cannot be defined using this method, $H$ can be defined using all three methods. As a (fun?) exercise, try defining $H$ using the other two methods.&lt;/p&gt;

&lt;h2 id=&quot;difficulties&quot;&gt;Difficulties&lt;/h2&gt;
&lt;p&gt;These methods can be used to define many non-commutative algebras such as the Weyl algebra and various enveloping algebras of Lie algebras. One can also define these algebras over fields other than $\mathbb{Q}$, such as $\mathbb{C}$ or $\mathbb{F}_p$.&lt;/p&gt;

&lt;p&gt;However, we cannot define algebras over $\mathbb{Q}(q)$, the fraction field of $\mathbb{Q}[q]$:&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;This is a problem if we want to define rings with relations such as&lt;/p&gt;



&lt;p&gt;Such relations occur frequently when studying quantum groups, for example.&lt;/p&gt;

&lt;p&gt;This is suprising, because one can easily define $\mathbb{Q}(q)$ and non-commutative $\mathbb{Q}(q)$-algebras in Singular/Plural, which is what Sage is using. It seems that the problem is in Sage’s wrapper for Singular/Plural, because Sage can’t even pass the ring $\mathbb{Q}(q)$ to Singular.&lt;/p&gt;

&lt;p&gt;There’s a &lt;a href=&quot;http://trac.sagemath.org/ticket/14886&quot; target=&quot;_blank&quot;&gt;trac ticket&lt;/a&gt; for this problem, but until it gets resolved, we’ll just have to define such rings directly in Singular/Plural. Thanks to the amazing capabilities of the &lt;a href=&quot;https://sagecell.sagemath.org/&quot; target=&quot;_blank&quot;&gt;Sage Cell Server&lt;/a&gt;, we’ll do this in the next post!&lt;/p&gt;</content>
		<author>
			<name>Liang Ze</name>
			<uri>http://sheaves.github.io/</uri>
		</author>
		<source>
			<title type="html">Sheaves</title>
			<subtitle type="html">Making math concrete with Sage</subtitle>
			<link rel="self" href="http://sheaves.github.io/feed.xml"/>
			<id>http://sheaves.github.io/feed.xml</id>
			<updated>2016-03-03T23:30:27+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">&quot;If you were new faculty, would you start something like SageMathCloud sooner?&quot;</title>
		<link href="http://sagemath.blogspot.com/2016/02/if-you-were-new-faculty-member-again.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-17375596918912545</id>
		<updated>2016-02-25T15:14:04+00:00</updated>
		<content type="html">I was recently asked by a young academic: &quot;If you were a new faculty member again, would you start something like SageMathCloud sooner or simply leave for industry?&quot;  The academic goes on to say &quot;I am increasingly frustrated by continual evidence that it is more valuable to publish a litany of computational papers with no source code than to do the thankless task of developing a niche open source library; deep mathematical software is not appreciated by either mathematicians or the public.&quot;&lt;br /&gt;&lt;br /&gt;I wanted to answer that &quot;things have gotten better&quot; since back in 2000 when I started as an academic who does computation.  Unfortunately, I think they have gotten worse.  I do not understand why.   In fact, this evening I just received the most recent in a &lt;a href=&quot;http://wstein.org/grants/&quot; target=&quot;_blank&quot;&gt;long string of rejections by the NSF&lt;/a&gt;.  &lt;br /&gt;&lt;br /&gt;Regarding a company versus taking a job in industry, for me personally there is no point in starting a company unless you have a goal that can only be accomplished via a company, since building a business from scratch is extremely hard and has little to do with math or research.  I do have such a goal: &quot;create a viable open source alternative to Mathematica, etc...&quot;.   I was very clearly told by Michael Monagan (co-founder of Maplesoft) in 2006 that this goal could not be accomplished in academia, and I spent the last 10 years trying to prove him wrong.  &lt;br /&gt;&lt;br /&gt;On the other hand, leaving for a job in industry means that your focus will switch from &quot;pure&quot; research to solving concrete problems that make products better for customers.  That said, many of the mathematicians who work on open source math software do so because they care so much about making the experience of using math software much better for the math community.  What often drives Sage developers is exactly the sort of passionate care for &quot;consumer focus&quot; and products that also makes one successful in industry.  I'm sure you know exactly what I mean, since it probably partly motivates your work.  It is sad that the math community turns its back on such people.   If the community were to systematically embrace them, instead of losing all these $300K+/year engineers to mathematics entirely -- which is exactly what we do constantly -- the experience of doing mathematics could be massively improved into the future.  But that is not what the community has chosen to do.  We are shooting ourselves in the foot.  &lt;br /&gt;&lt;br /&gt;Now that I have seen how academia works from the inside over 15 years I'm starting to understand a little why these things change very slowly, if ever.  In the mathematics department I'm at, there are a small handful of research areas in pure math, and due to how hiring works (voting system, culture, etc.) we have spent the last 10 years hiring in those areas little by little (to replace people who die/retire/leave).   I imagine most mathematics departments are very similar.   &quot;Open source software&quot; is not one of those traditional areas.   Nobody will win a Fields Medal in it.  &lt;br /&gt;&lt;br /&gt;Overall, the mathematical community does not value open source mathematical software in proportion to its value, and doesn't understand its importance to mathematical research and education.  I would like to say that things have got a lot better over the last decade, but I don't think they have. My personal experience is that much of the &quot;next generation&quot; of mathematicians who would have changed how the math community approaches open source software are now in industry, or soon will be, and hence they have no impact on academic mathematical culture.   Every one of my Ph.D. students are now at Google/Facebook/etc.  &lt;br /&gt;&lt;br /&gt;We as a community overall would be better off if, when considering how we build departments, we put &quot;mathematical software writers&quot; on an equal footing with &quot;algebraic geometers&quot;.   We should systematically consider quality open source software contributions on a potentially equal footing with publications in journals.  &lt;br /&gt;&lt;br /&gt;To answer the original question, &lt;b&gt;YES&lt;/b&gt;, knowing what I know now, I really wish I had started something like SageMathCloud sooner. In fact, here's the &lt;a href=&quot;https://groups.google.com/forum/#!forum/sage-dotcom&quot; target=&quot;_blank&quot;&gt;previously private discussion&lt;/a&gt; from eight years ago when I almost did.   &lt;br /&gt;&lt;br /&gt;--&lt;br /&gt;&lt;br /&gt;- There is a&amp;nbsp;&lt;a href=&quot;https://docs.google.com/document/d/1UxEE5GjSeA07xJy_SUDy-rDia8tzFPGS6kMIkMPHh8E/edit&quot; target=&quot;_blank&quot;&gt;community generated followup ...&lt;/a&gt;&lt;br /&gt;&lt;div&gt;- Relevant blog post:&amp;nbsp;&lt;a href=&quot;http://martin.softf1.com/g/yellow_soap_opera_blog/about-software-development-in-companies-communities-and-the-academia&quot; target=&quot;_blank&quot;&gt;About Software Development in Companies, Communities and the Academia&lt;/a&gt;&lt;/div&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Elliptic curves: Magma versus Sage</title>
		<link href="http://sagemath.blogspot.com/2016/02/elliptic-curves-magma-versus-sage.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-4357444546330326452</id>
		<updated>2016-02-24T12:07:30+00:00</updated>
		<content type="html">&lt;h3&gt;Elliptic Curves&lt;/h3&gt;Elliptic curves are certain types of nonsingular plane cubic curves, e.g., y^2 = x^3&amp;nbsp;+ ax&amp;nbsp;+b, which are central to both number theory and cryptography (e.g., they are used to compute the hash in bitcoin).&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-qW1pKO63Xfs/Vs4NUYQVtbI/AAAAAAABXIE/Nw6-KGy31-0/s1600/Screen%2BShot%2B2016-02-24%2Bat%2B12.06.23%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;227&quot; src=&quot;https://4.bp.blogspot.com/-qW1pKO63Xfs/Vs4NUYQVtbI/AAAAAAABXIE/Nw6-KGy31-0/s400/Screen%2BShot%2B2016-02-24%2Bat%2B12.06.23%2BPM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;Magma and Sage&lt;/h3&gt;If you want to do a wide range of explicit computations with elliptic curves, for research purposes, you will very likely use&amp;nbsp;&lt;a href=&quot;http://sagemath.org/&quot; target=&quot;_blank&quot;&gt;SageMath&amp;nbsp;&lt;/a&gt;or&amp;nbsp;&lt;a href=&quot;http://magma.maths.usyd.edu.au/magma/&quot; target=&quot;_blank&quot;&gt;Magma&lt;/a&gt;. If you're&amp;nbsp;&lt;strong&gt;really&lt;/strong&gt;&amp;nbsp;serious, you'll use both.&lt;br /&gt;&lt;br /&gt;Both Sage and Magma are far ahead of all other software (e.g., Mathematica, Maple and Matlab) for elliptic curves.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://magma.maths.usyd.edu.au/magma/handbook/part/16&quot;&gt;Magma reference manual about elliptic curves.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://doc.sagemath.org/html/en/reference/plane_curves/index.html#elliptic-curves&quot;&gt;Sage reference manual about elliptic curves.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://pari.math.u-bordeaux.fr/dochtml/html.stable/Functions_related_to_elliptic_curves.html&quot;&gt;Pari reference manual about elliptic curves.&lt;/a&gt; -- pari is part of Sage and has some unique powerful functionality, e.g., &lt;code&gt;ellheegner&lt;/code&gt;...&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;history&quot;&gt;A Little History&lt;/h3&gt;When I started contributing to Magma in 1999, I remember that Magma was way, way behind Pari. I remember having lunch with John Cannon (founder of Magma), and telling him I would no longer have to use Pari if only Magma would have dramatically faster code for computing point counts on elliptic curves.&lt;br /&gt;&lt;br /&gt;A few years later, John wisely hired Mark Watkins to work fulltime on Magma, and Mark has been working there for over a decade. Mark is definitely one of the top people in the world at implementing (and using) computational number theory algorithms, and he's ensured that Magma can do a lot. Some of that &quot;do a lot&quot; means catching up with (and surpassing!) what was in Pari and Sage for a long time (e.g., point counting, &lt;span class=&quot;math&quot;&gt;&lt;em&gt;p&lt;/em&gt;&lt;/span&gt;-adic &lt;span class=&quot;math&quot;&gt;&lt;em&gt;L&lt;/em&gt;&lt;/span&gt;-functions, etc.)&lt;br /&gt;&lt;br /&gt;However, in addition, many people have visited Sydney and added extremely deep functionality for doing higher descents to Magma, which is &lt;strong&gt;not available in any open source software&lt;/strong&gt;. Search for Magma in &lt;a href=&quot;http://arxiv.org/abs/1602.01894&quot;&gt;this paper&lt;/a&gt; to see how, even today, there seems to be no open source way to compute the rank of the curve &lt;span class=&quot;math&quot;&gt;&lt;em&gt;y&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; = &lt;em&gt;x&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt; + 169304&lt;em&gt;x&lt;/em&gt; + 25788938&lt;/span&gt;. &amp;nbsp;(The rank is 0.)&lt;br /&gt;&lt;h3 id=&quot;situation-today&quot;&gt;Two Codebases&lt;/h3&gt;There are several elliptic curves algorithms available &lt;strong&gt;only in Magma&lt;/strong&gt; (e.g., higher descents) ... and some available &lt;strong&gt;only in Sage&lt;/strong&gt; (&lt;span class=&quot;math&quot;&gt;&lt;em&gt;L&lt;/em&gt;&lt;/span&gt;-function rank bounds, some overconvergent modular symbols, zeros of &lt;span class=&quot;math&quot;&gt;&lt;em&gt;L&lt;/em&gt;&lt;/span&gt;-functions, images of Galois representations). I could be wrong about functionality not being in Magma, since almost anything can get implemented in a year...&lt;br /&gt;&lt;br /&gt;The code bases are almost completely separate, which is a very good thing. Any time something gets implemented in one, it gets (or should get) tested via a big run on elliptic curves up to some bound in the other. This sometimes results in bugs being found. I remember &lt;a href=&quot;http://trac.sagemath.org/ticket/3674&quot; target=&quot;_blank&quot;&gt;refereeing the &quot;integral points&quot; code in Sage&lt;/a&gt; by running it against all curves up to some bound and comparing to what Magma output, and getting many discrepancies, which showed that there were bugs in both Sage and Magma.&lt;br /&gt;Thus we would be way better off if Sage could do everything Magma does (and vice versa).&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Iterated Prisoners dilemma tournament in class (2016 edition)</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2016/02/22/Iterated-prisoners-dilemma-tournament-in-class-2016/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2016/02/22/Iterated-prisoners-dilemma-tournament-in-class-2016/</id>
		<updated>2016-02-22T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Last week we introduced repeated games by playing an iterated prisoners dilemma
tournament in class. This post, &lt;a href=&quot;http://vknight.org/unpeudemath/pedagogy/2015/02/26/this-class-teaches-me-to-not-trust-my-classmates/&quot;&gt;mirrors this similar one from last
year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The basic idea is for students to split in to 4 teams and play a repeated
iteration of the following game:&lt;/p&gt;



&lt;p&gt;The teams play 5 rounds (which is slightly different to last year).&lt;/p&gt;

&lt;p&gt;This year (as very often happens) two coalitions formed at the end of the
tournament as there was a box of chocolates on offer.&lt;/p&gt;

&lt;p&gt;You can see the results of each duel and overall in the following photo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/ipd-2016.jpg&quot; alt=&quot;Results of the
tournament&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because of the coalitions we had to use a tie breaker (which you can see in the
tiny bottom right corner of the board): a game of Rock Paper Scissors Spock
which A won on behalf of “BatDuck”.&lt;/p&gt;

&lt;p&gt;Some teams told me afterwards that there were planning on playing TitForTat but
as they didn’t declare this, given the small number of rounds it didn’t have
time to become evident (I suspect).&lt;/p&gt;

&lt;p&gt;Overall, team “Kev” played rather poorly, seemingly trying to Defect to often
and winning their duels but getting low schools. In contrast to this team
“Sheilla” cooperated to help build up their reputation. Sadly their coalition
(with team “Kev”) lost the tie breaker :)&lt;/p&gt;

&lt;p&gt;This iterated prisoners dilemma tournament in class is closely related to some
of my ongoing work which is the &lt;a href=&quot;http://axelrod.readthedocs.org/en/latest/&quot;&gt;Axelrod project python
library&lt;/a&gt;.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">unsupported operand parent for *, Matrix over number field, vector over symbolic ring</title>
		<link href="http://www.slabbe.org/blogue/2016/02/unsupported-operand-parent-for-matrix-over-number-field-vector-over-symbolic-ring"/>
		<id>http://www.slabbe.org/blogue/2016/02/unsupported-operand-parent-for-matrix-over-number-field-vector-over-symbolic-ring</id>
		<updated>2016-02-18T10:17:00+00:00</updated>
		<content type="html">&lt;div class=&quot;document&quot;&gt;
&lt;p&gt;Yesterday I received this email (in french):&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;Salut,
avec Thomas on a une question bête:

K.&amp;lt;x&amp;gt;=NumberField(x*x-x-1)

J'aimerais multiplier une matrice avec des coefficients en x par un vecteur
contenant des variables a et b.  Il dit &amp;quot;unsupported operand parent for *,
Matrix over number field, vector over symbolic ring&amp;quot;

Est ce grave ?
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Here is my answer. Indeed, in Sage, symbolic variables can't multiply with
elements in an Number Field in x:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumberField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;ne&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsupported&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Symbolic Ring'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'Number Field in x with defining polynomial x^2 - x - 1'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;But, we can define a polynomial ring with variables in a,b and coefficients in
the NumberField. Then, we are able to multiply &lt;tt class=&quot;docutils literal&quot;&gt;a&lt;/tt&gt; with &lt;tt class=&quot;docutils literal&quot;&gt;x&lt;/tt&gt;:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumberField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defining&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polynomial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Multivariate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Polynomial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ring&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;over&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;defining&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polynomial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;With two square brackets, we obtain powers series:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Multivariate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Power&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ring&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;over&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;defining&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polynomial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;It works with matrices:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Full&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSpace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dense&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrices&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;over&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Multivariate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Power&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ring&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;over&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defining&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polynomial&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;/div&gt;</content>
		<author>
			<name>Sébastien Labbé</name>
			<uri>http://www.slabbe.org/blogue/</uri>
		</author>
		<source>
			<title type="html">Sébastien Labbé</title>
			<subtitle type="html">Sébastien Labbé</subtitle>
			<link rel="self" href="http://www.slabbe.org/blogue/categorie/sage/feed/atom/index.xml"/>
			<id>http://www.slabbe.org/blogue/feed/atom/</id>
			<updated>2016-03-10T15:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">The Weyl Algebra and $\mathfrak{sl}_2$</title>
		<link href="http://sheaves.github.io/Weyl-Algebra/"/>
		<id>http://sheaves.github.io/Weyl-Algebra/</id>
		<updated>2016-02-17T00:00:00+00:00</updated>
		<content type="html">&lt;!--more--&gt;

&lt;p&gt;I’ve been away from this blog for quite a while - almost a year, in fact! My excuses are my wedding and the prelims (a.k.a. quals), as well as all the preparation that had to go into them (although, to be honest, those things only occupied me till September last year!).&lt;/p&gt;

&lt;p&gt;Looking back at my previous posts, I’ve realized that in attempting to teach &lt;em&gt;both&lt;/em&gt; math and code, I probably ended up doing neither. This is really not the best place to learn representation theory (for example) - there are better books and blogs out there. Also, most of the code that I wrote to illustrate those posts feels contrived, and neither highlights Sage’s strengths nor reflects how I normally use Sage for my assignments and projects.&lt;/p&gt;

&lt;p&gt;I’ve thus decided to write shorter posts with code that I actually use (on &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt;), along with some explanations of the code. Lately, I’ve been writing code for non-commutative algebra and combinatorics, so today I’ll start with a simple example of a non-commutative algebra.&lt;/p&gt;

&lt;h2 id=&quot;the-weyl-algebra&quot;&gt;The Weyl Algebra&lt;/h2&gt;
&lt;p&gt;The $1$-dim. Weyl algebra is the (non-commutative) algebra generated by $x, \partial_x$ subject to the relations&lt;/p&gt;



&lt;p&gt;If we treat $x$ as “multiplication by $x$” and $\partial_x$ as  “differentiation w.r.t. $x$”, this relation is really just an application of the chain rule:&lt;/p&gt;



&lt;p&gt;We can generalize to higher dimensions: the $n$-dim. Weyl algebra is the algebra generated by  $x_1,\dots,x_n,\partial_{x_1},\dots,\partial_{x_n}$ quotiented by the relations that arise from treating them as the obvious operators on $\mathbb{F}[x_1,\dots,x_n]$.&lt;/p&gt;

&lt;h3 id=&quot;weyl-algebras-in-sage&quot;&gt;Weyl algebras in Sage&lt;/h3&gt;
&lt;p&gt;It’s easy to &lt;a href=&quot;http://doc.sagemath.org/html/en/reference/algebras/sage/algebras/weyl_algebra.html&quot; target=&quot;_blank&quot;&gt;define the Weyl algebra in Sage&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Calling &lt;code class=&quot;highlighter-rouge&quot;&gt;inject_variables&lt;/code&gt; allows us to use the operators &lt;code class=&quot;highlighter-rouge&quot;&gt;x,y,z,dx,dy,dz&lt;/code&gt; in subsequent code (where &lt;code class=&quot;highlighter-rouge&quot;&gt;dx&lt;/code&gt; denotes $\partial_x$, etc).&lt;/p&gt;

&lt;p&gt;One can do rather complicated computations:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;By default, Sage chooses to represent monomials with &lt;code class=&quot;highlighter-rouge&quot;&gt;x,y,z&lt;/code&gt; in front of &lt;code class=&quot;highlighter-rouge&quot;&gt;dx,dy,dz&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;linked&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Keep in mind that &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; does not refer to the polynomial $x \in \mathbb{F}[x]$, so one should not expect &lt;code class=&quot;highlighter-rouge&quot;&gt;dx*x&lt;/code&gt; to be &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(For some reason &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; does not give the right output. Try &lt;code class=&quot;highlighter-rouge&quot;&gt;show(x)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;show(x*dx)&lt;/code&gt;, for example.)&lt;/p&gt;

&lt;h2 id=&quot;representations-of-mathfraksl2&quot;&gt;Representations of $\mathfrak{sl}_2$&lt;/h2&gt;
&lt;p&gt;It turns out that the $1$-dim. Weyl algebra gives a representation of $\mathfrak{sl}_2(\mathbb{F})$.&lt;/p&gt;

&lt;p&gt;The Lie algebra $\mathfrak{sl}_2(\mathbb{F})$ is generated by $E,F,H$ subject to the relations&lt;/p&gt;



&lt;p&gt;Define the following elements of the $1$-dim. Weyl algebra:&lt;/p&gt;



&lt;p&gt;We can use Sage to quickly verify that these elements indeed satisfy the relations for $\mathfrak{sl}_2$ (using the commutator as the Lie bracket i.e. $[A,B] = AB - BA$):&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;Working over $\mathbb{C}$, this action of $\mathfrak{sl}_2(\mathbb{C})$ makes $\mathbb{C}[x]$ a Verma module of highest weight $0$.&lt;/p&gt;

&lt;p&gt;In fact, we can make $\mathbb{C}[x]$ a Verma module of highest weight $c$ for any $c \in \mathbb{C}$ by using:&lt;/p&gt;



&lt;p&gt;We verify this again in Sage:&lt;/p&gt;

&lt;div class=&quot;sage&quot;&gt;
  
&lt;/div&gt;

&lt;p&gt;In subsequent posts, I’ll talk more about defining other non-commutative algebras in Sage and Singular.&lt;/p&gt;</content>
		<author>
			<name>Liang Ze</name>
			<uri>http://sheaves.github.io/</uri>
		</author>
		<source>
			<title type="html">Sheaves</title>
			<subtitle type="html">Making math concrete with Sage</subtitle>
			<link rel="self" href="http://sheaves.github.io/feed.xml"/>
			<id>http://sheaves.github.io/feed.xml</id>
			<updated>2016-03-03T23:30:27+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Rock paper scissors lizard spock tournament (2016 edition)</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2016/02/15/rock-paper-scissors-lizard-spock-2016/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2016/02/15/rock-paper-scissors-lizard-spock-2016/</id>
		<updated>2016-02-15T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This post is a brief repetition of &lt;a href=&quot;http://vknight.org/unpeudemath/pedagogy/2015/02/13/rock-paper-scissors-lizard-spock/&quot;&gt;this post from last
year&lt;/a&gt;
detailing results from the 16 person knock out &lt;a href=&quot;http://bigbangtheory.wikia.com/wiki/Rock_Paper_Scissors_Lizard_Spock&quot;&gt;Rock Paper Scissors Lizard Spock&lt;/a&gt; tournament we played the other day.&lt;/p&gt;

&lt;p&gt;If you are not familiar with &lt;a href=&quot;http://bigbangtheory.wikia.com/wiki/Rock_Paper_Scissors_Lizard_Spock&quot;&gt;Rock Paper Scissors Lizard Spock&lt;/a&gt; this is a good video that explains it:&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
        
    
&lt;/div&gt;

&lt;p&gt;Here is how the game went (thanks to Geraint for noting everything down and Saniya for grabbing the pictures!):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/plot_rpsls_2016.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a plot of the strategies played during the 1st, 2nd and 3rd rounds:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/round1_2016.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/round2_2016.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/round3_2016.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The overall strategy profile played is here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/allstrategies_2016.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exactly like last year&lt;/strong&gt; we are not exactly at Nash equilibria.
In fact it seems that Scissors and Rock are being played a bit more often, so someone entering in to this game should respond by playing Spock (he vaporises Rock and smashes Scissors).&lt;/p&gt;

&lt;p&gt;Here are the strategies that at some point won a duel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/winningstrategies_2016.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and here are the losing strategies:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/losingstrategies_2016.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hopefully my class found this interesting and fun.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Playing against a mixed strategy in class</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2016/02/04/playing_against_a_mixed_strategy_in_class/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2016/02/04/playing_against_a_mixed_strategy_in_class/</id>
		<updated>2016-02-04T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This post &lt;a href=&quot;http://vknight.org/unpeudemath/pedagogy/2015/02/07/playing_against_a_mixed_strategy_in_class/&quot;&gt;mirrors this post from last
year&lt;/a&gt;
in which I described how my students and I played against various mixed
strategies in a modified version of matching pennies.&lt;/p&gt;

&lt;p&gt;This is the game we played:&lt;/p&gt;



&lt;p&gt;I wrote a sage interact that allows for a quick visualisation of a random sample from a mixed strategy.&lt;/p&gt;

&lt;p&gt;I handed out sheets of papers on which students would input their preferred strategies (‘H’ or ‘T’) whilst I sampled randomly from 3 different mixed strategies:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;\(\sigma_1 = (.2, .8)\)&lt;/li&gt;
  &lt;li&gt;\(\sigma_1 = (.9, .1)\)&lt;/li&gt;
  &lt;li&gt;\(\sigma_1 = (1/3, 2/3\)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Based on the class notation that implies that the computer was the row player and the students the column player.
The sampled strategies were (we played 6 rounds for each mixed strategy):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;TTHTTT&lt;/li&gt;
  &lt;li&gt;HHHTHT&lt;/li&gt;
  &lt;li&gt;TTTTTH&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;round-1&quot;&gt;Round 1&lt;/h3&gt;

&lt;p&gt;This mixed strategy (recall \(\sigma_1=(.2,.8)\)) implies that the computer will be mainly playing T (the second strategy equivalent to the second row), and so based on the bi-matrix it is in the students interest to play H.
Here is a plot of the mixed strategy played by all the students:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/2015-2016-R1strategiesvbestresponse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The mixed strategy played was \(\sigma_2=(.54,.46)\).
Note that in fact in this particular instance that actual best response is to play \(\sigma_2=(1,0)\).
This will indeed maximise the expected value of:&lt;/p&gt;



&lt;p&gt;Indeed: the above is an increasing linear function in \(x\) so the highest value is obtained when \(x=1\).&lt;/p&gt;

&lt;p&gt;The mean score for this round by everyone was: 1.695.
The theoretical mean score (when playing the best response for six consecutive games is): \(6(-.2\times 2+.8)=2.4\), so (compared to last year) this was quite low.&lt;/p&gt;

&lt;p&gt;Here is a distribution of the scores:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/2015-2016-score_histogram.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that a fair number of students lost but 1 student did get the highest
possible score (7).&lt;/p&gt;

&lt;h3 id=&quot;round-2&quot;&gt;Round 2&lt;/h3&gt;

&lt;p&gt;Here the mixed strategy is \(\sigma_1=(.9,.1)\), implying that students should play T more often than H.
Here is a plot of the mixed strategy played by all the students:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/2015-2016-R2strategiesvbestresponse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The mixed strategy played was \(\sigma_2=(0.329,0.671)\).  Similarly to before
this is not terribly close to the actual best response which is \((0,1)\) (due
to the expected utility now being a decreasing linear function in \(x\).&lt;/p&gt;

&lt;p&gt;Here is a distribution of the scores:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/2015-2016-R2-score_histogram.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that some still managed to lose this round but overall mainly winners.&lt;/p&gt;

&lt;h3 id=&quot;round-3&quot;&gt;Round 3&lt;/h3&gt;

&lt;p&gt;Here is where things get interesting.
The mixed strategy played by the computer is here \(\sigma_1=(1/3,2/3)\), it is not now obvious which strategy is worth going for!&lt;/p&gt;

&lt;p&gt;Here is the distribution played:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/2015-2016-R3strategiesvbestresponse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The mixed strategy is \(\sigma_2=(0.58,0.42) and the mean score was 1.11.
Here is what the distribution looked like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/2015-2016-R3-score_histogram.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks like we have a few more losers than winners but not by much.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://vknight.org/unpeudemath/pedagogy/2015/02/07/playing_against_a_mixed_strategy_in_class/&quot;&gt;Take a look at the post from last year to see some details about how one
could/should have expected to play in this final round&lt;/a&gt;.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Introducing Game Theory to my class</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2016/02/01/introducing-game-theory-to-my-class/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2016/02/01/introducing-game-theory-to-my-class/</id>
		<updated>2016-02-01T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Here is a blog post that mirrors &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2014/01/matching-pennies-in-class.html&quot;&gt;this
post&lt;/a&gt;
from two years ago and &lt;a href=&quot;http://vknight.org/unpeudemath/pedagogy/2015/01/26/introducing-game-theory-to-my-class/&quot;&gt;this
post&lt;/a&gt;
from last year.&lt;/p&gt;

&lt;p&gt;As always, I will be using my blog to extend the class meetings my Game Theory
class and I have.&lt;/p&gt;

&lt;p&gt;Here are the results of the strategies played during the first game of matching
pennies (see the previously mentioned posts for details):&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/matching_pennies_2015-2016.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that overall everyone seems to be playing randomly.&lt;/p&gt;

&lt;p&gt;After that we played a modified version of the game (the row player has more to
win by playing heads):&lt;/p&gt;



&lt;p&gt;We now see that both players actually play heads less. This is perhaps easier to
understand from the column player’s point of view.&lt;/p&gt;

&lt;p&gt;I will leave an explanation as to what the green and yellow lines represent for
a little longer…&lt;/p&gt;

&lt;p&gt;The main point of this is to make sure that everyone understands the normal form game convention (by breaking the symmetry) and also to make it slightly more interesting (the row player now has more to win/lose by playing Heads).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/modified_matching_pennies_2015-2016.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking forward to the next class meeting where we will be doing similar things
as we continue to understand the basics of normal form game representations.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">University of Namibia Mathematics Summer School</title>
		<link href="http://drvinceknight.github.io/unpeudemath/mathematics/2016/01/27/UNAM-Mathematics-Summer-School/"/>
		<id>http://drvinceknight.github.io/unpeudemath/mathematics/2016/01/27/UNAM-Mathematics-Summer-School/</id>
		<updated>2016-01-27T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;I am writing this post just after two extraordinary weeks in Namibia. This is a
quick personal reflection of what has been an awesome experience. As part of
Cardiff University’s &lt;a href=&quot;http://www.cardiff.ac.uk/phoenix-project&quot;&gt;Phoenix
Project&lt;/a&gt;, &lt;a href=&quot;http://www.unam.edu.na/faculty-of-science/mathematics/our-team/?staffid=5042&quot;&gt;Martin
Mugochi&lt;/a&gt;,
&lt;a href=&quot;http://www.cardiff.ac.uk/people/view/98670-wilson-robert&quot;&gt;Rob Wilson&lt;/a&gt; and I
with Cardiff PhD students &lt;a href=&quot;https://twitter.com/geraintpalmer&quot;&gt;Geraint Palmer&lt;/a&gt;
and Alex MacKay worked with the University of Namibia’s faculty of Mathematics
to deliver a two week summer school.&lt;/p&gt;

&lt;p&gt;The goal of this joint effort with the University of Namibia was to provide a
positive experience of mathematics. As Rob said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We want them to concentrate on what they can do rather than what they cannot
do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The first week involved inquiry based sessions on both mathematical topics (such
as Algebra and Geometry) as well as wider skills (such as presenting and reading
mathematics).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This side of the course mainly involved students working on through activities
and presenting them to the class which lead to discussion (and in an IBL way
ultimately confirmation/verification of the conclusions). This is the point at
which we (I’m sure Rob, Alex and Geraint would agree) must say that the
&lt;strong&gt;students were awesome&lt;/strong&gt;. Eager to learn, open to the novel pedagogic ideas, a
real pleasure to work with.&lt;/p&gt;

&lt;p&gt;Here are some photos of the first week (the only local ones as I write this are
from the group Alex and I took but things were pretty much the same in Rob and
Geraint’s group):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/UNAM_Summer_wk1_2.jpg&quot; alt=&quot;Working on activities&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/UNAM_Summer_wk1_3.jpg&quot; alt=&quot;Presenting solutions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/UNAM_Summer_wk1_1.jpg&quot; alt=&quot;Fun&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The second week had students work in groups on a variety of projects such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mathematical paradoxes,&lt;/li&gt;
  &lt;li&gt;Patterns in Pascal’s triangle,&lt;/li&gt;
  &lt;li&gt;History of mathematics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the intensity of the first week, this lead to a stark contrast in which
students came to us for support. This lead to us not being in direct contact
with all the students all the time.&lt;/p&gt;

&lt;p&gt;The culmination of the whole school was a 2 hour closing ceremony in which
students presented their posters. As we hadn’t seen all the groups we were
slightly worried that this might fall flat on it’s face but we were very wrong
and it was such a delight to see each and every group turn up to put their
awesome poster on the wall.&lt;/p&gt;

&lt;p&gt;Here are some of the posters:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/UNAM_Summer_poster_1.jpg&quot; alt=&quot;Approximations of pi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/UNAM_Summer_poster_2.jpg&quot; alt=&quot;Patterns in Pascals triangle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Without any nudge on our part students starting walking around and learning from
each other’s poster (&lt;strong&gt;I am still smiling about this now&lt;/strong&gt;). This was followed
by students giving 5 minute presentations, closing remarks from various UNAM
officials, Martin Mugochi (head of the mathematics department) and ourselves.&lt;/p&gt;

&lt;p&gt;One of my most pleasant memories (of which there are too many to mention) is
what happened just after that though, we (students and us) came together to
&lt;strong&gt;thank each other&lt;/strong&gt; for our efforts and get photos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/UNAM_Summer_close_3.jpg&quot; alt=&quot;The inaugural UNAM mathematics summer school&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/UNAM_Summer_close_1.jpg&quot; alt=&quot;A small group photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/UNAM_Summer_close_2.jpg&quot; alt=&quot;Student selfie with me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/UNAM_Summer_close_5.jpg&quot; alt=&quot;Student selfie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was such a great experience, it was fantastic to work and become good
friends with Martin, get to know the students (seeing the benefits of active
pedagogic methodologies) and spend two great weeks with Geraint, Alex and Rob:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/UNAM_Summer_close_4.jpg&quot; alt=&quot;Geraint, Alex, Rob and I&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is just one of many &lt;a href=&quot;http://www.cardiff.ac.uk/phoenix-project&quot;&gt;Phoenix project&lt;/a&gt; projects and it’s great to be
involved.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now I need to put this laptop down, get a good night’s sleep and spend tomorrow
working on final details for &lt;a href=&quot;http://na.pycon.org/&quot;&gt;PyCon Namibia&lt;/a&gt;.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Thinking of using SageMathCloud in a college course?</title>
		<link href="http://sagemath.blogspot.com/2016/01/thinking-of-using-sagemathcloud-in.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-1296147941689942703</id>
		<updated>2016-01-15T09:14:07+00:00</updated>
		<content type="html">&lt;h2&gt;SageMathCloud course subscriptions&lt;/h2&gt;&lt;span&gt;&quot;We are &amp;nbsp;college instructors of the calculus sequence and ODE’s.&amp;nbsp; If the college were to purchase one of the upgrades for us as we use Sage with our students, who gets the benefits of the upgrade? &amp;nbsp;Is is the individual students that are in an instructor’s Sage classroom or is it the &amp;nbsp;collaborators on an instructor’s project?&quot;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;If you were to purchase just the $7/month plan and apply the upgrades&amp;nbsp;&lt;/span&gt;&lt;span&gt;to *one* single project, then all collaborators on that one project&amp;nbsp;&lt;/span&gt;&lt;span&gt;would benefit from those upgrades while using that project.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;If you were to purchase a course plan for say $399/semester, then y&lt;/span&gt;&lt;span&gt;ou could apply the upgrades (network access and members only hosting)&amp;nbsp;&lt;/span&gt;&lt;span&gt;to 70 projects that you might create for a course.&amp;nbsp; &amp;nbsp;When you create a&amp;nbsp;&lt;/span&gt;&lt;span&gt;course by clicking +New, then &quot;Manage a Course&quot;, then add students,&amp;nbsp;&lt;/span&gt;&lt;span&gt;each student has their own project created automatically.&amp;nbsp; All&amp;nbsp;&lt;/span&gt;&lt;span&gt;instructors (anybody who is a collaborator on the project where you&amp;nbsp;&lt;/span&gt;&lt;span&gt;clicked &quot;Manage a course&quot;) is also added to the student's project.&amp;nbsp;&lt;/span&gt;&lt;span&gt;In course settings you can easily apply the upgrades you purchase to&amp;nbsp;&lt;/span&gt;&lt;span&gt;all projects in the course. &amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Also I'm currently working on a new feature where instructors may&amp;nbsp;&lt;/span&gt;&lt;span&gt;choose to require all students in their course to pay for the upgrade&amp;nbsp;&lt;/span&gt;&lt;span&gt;themselves.&amp;nbsp; There's a one time $9/course fee paid by the student and&amp;nbsp;&lt;/span&gt;&lt;span&gt;that's it.&amp;nbsp; At some colleges (in some places) this is ideal, and at&amp;nbsp;&lt;/span&gt;&lt;span&gt;other places it's not an option at all.&amp;nbsp; &amp;nbsp;I anticipate releasing this very soon.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-og6MM4q8B9M/VpkoWB952vI/AAAAAAABW1w/ObaqmjhbpGM/s1600/Screen%2BShot%2B2016-01-15%2Bat%2B9.11.15%2BAM.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;372&quot; src=&quot;http://3.bp.blogspot.com/-og6MM4q8B9M/VpkoWB952vI/AAAAAAABW1w/ObaqmjhbpGM/s640/Screen%2BShot%2B2016-01-15%2Bat%2B9.11.15%2BAM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Getting started with SageMathCloud courses&lt;/h2&gt;&lt;br /&gt;&lt;span&gt;You can &lt;b&gt;&lt;i&gt;fully use&lt;/i&gt;&amp;nbsp;&lt;/b&gt;the SMC course functionality without paying anything in order to get familiar with it and test it out. &amp;nbsp;The main benefit of paying is that you get network access and all projects get moved to members only servers, which are much more robust; also, we greatly prioritize support for paying customers. &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;This blog post is an overview of using SMC courses:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.beezers.org/blog/bb/2015/09/grading-in-sagemathcloud/&quot; rel=&quot;noreferrer&quot; target=&quot;_blank&quot;&gt;http://www.beezers.org/blog/bb/2015/09/grading-in-sagemathcloud/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;This has some screenshots and the second half is about courses:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://blog.ouseful.info/2015/11/24/course-management-and-collaborative-jupyter-notebooks-via-sagemathcloud/&quot; rel=&quot;noreferrer&quot; target=&quot;_blank&quot;&gt;http://blog.ouseful.info/2015/11/24/course-management-and-collaborative-jupyter-notebooks-via-sagemathcloud/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Here are some video tutorials made by an instructor that used SMC with&amp;nbsp;&lt;/span&gt;&lt;span&gt;a large class in Iceland recently:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=dgTi11ZS3fQ&quot; rel=&quot;noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.youtube.com/watch?v=dgTi11ZS3fQ&lt;/a&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=nkSdOVE2W0A&quot; rel=&quot;noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.youtube.com/watch?v=nkSdOVE2W0A&lt;/a&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0qrhZQ4rjjg&quot; rel=&quot;noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.youtube.com/watch?v=0qrhZQ4rjjg&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Note that the above videos show the basics of courses, then talk&amp;nbsp;&lt;/span&gt;&lt;span&gt;specifically about automated grading of Jupyter notebooks.&amp;nbsp; That might&amp;nbsp;&lt;/span&gt;&lt;span&gt;not be at all what you want to do -- &lt;a href=&quot;https://github.com/sagemathinc/smc/wiki/Teaching&quot; target=&quot;_blank&quot;&gt;many math courses &lt;/a&gt;use Sage&amp;nbsp;&lt;/span&gt;&lt;span&gt;worksheets, and probably don't automate the grading yet.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Regarding using Sage itself for teaching your courses, check out the&amp;nbsp;&lt;/span&gt;&lt;span&gt;free pdf book to &quot;Sage for Undergraduates&quot; here, which the American Mathematical Society just published (there is also a very nice print version for about $23):&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.gregorybard.com/SAGE.html&quot; rel=&quot;noreferrer&quot; target=&quot;_blank&quot;&gt;http://www.gregorybard.com/SAGE.html&lt;/a&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Mathematics Graduate School: preparation for non-academic employment</title>
		<link href="http://sagemath.blogspot.com/2016/01/mathematics-graduate-school-preparation.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-3741348850330137693</id>
		<updated>2016-01-08T22:25:16+00:00</updated>
		<content type="html">This is about my personal experience as a mathematics professor whose students all have non-academic jobs that they love.  This is in preparation for a panel at the Joint Mathematics Meetings in Seattle.&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;My students and industry&lt;/span&gt;&lt;br /&gt;&lt;div&gt;My graduated Ph.D. students:&lt;/div&gt;&lt;ul&gt;&lt;li&gt;3 at Google&lt;/li&gt;&lt;li&gt;1 at Facebook&lt;/li&gt;&lt;li&gt;1 at CCR&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;My graduating student (Hao Chen):&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Applying for many postdocs&lt;/li&gt;&lt;li&gt;But just did summer internship at Microsoft Research with Kristin. (I’ve had four students do summer internships with Kristin)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;All my students:&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Have done a lot of Software development, maybe having little to do with math, e.g., “developing the Cython compiler”, “transition the entire Sage project to git”, etc.&lt;/li&gt;&lt;li&gt;Did a thesis squarely in number theory, with significant theoretical content.&lt;/li&gt;&lt;li&gt;Guilt (or guilty pleasure?) spending time on some programming tasks instead of doing what they are “supposed” to do as math grad students.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;me-academia-and-industry&quot;&gt;Me: academia and industry&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Math Ph.D. from Berkeley in 2000; many students of my advisor (Lenstra) went to work at CCR after graduating…&lt;/li&gt;&lt;li&gt;Academia: I’m a tenured math professor (since 2005) – number theory.&lt;/li&gt;&lt;li&gt;Industry: I founded a Delaware C Corp (SageMath, Inc.) one year ago to “commercialize Sage” due to VERY intense frustration trying to get grant funding for Sage development. Things have got so bad, with so many painful stupid missed opportunities over so many years, that I’ve given up on academia as a place to build Sage.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;Reality check:&lt;/span&gt;&amp;nbsp;Academia values basic research, not products. Industry builds concrete&amp;nbsp;&lt;em&gt;valuable&lt;/em&gt;&amp;nbsp;products. Not understanding this is a recipe for pain (at least it has been for me).&lt;/div&gt;&lt;h2 id=&quot;advice-for-students-from-students&quot;&gt;Advice for students from students&lt;/h2&gt;&lt;h3 id=&quot;robert-miller-google-&quot;&gt;Robert Miller (Google)&lt;/h3&gt;&lt;div&gt;My student Robert Miller’s post on Facebook yesterday: &lt;b&gt;“I LOVE MY JOB”&lt;/b&gt;. Why: “Today I gave the first talk in a seminar I organized to discuss this result: ‘Graph Isomorphism in Quasipolynomial Time’. Dozens of people showed up, it was awesome!”&lt;/div&gt;&lt;div&gt;Background: When he was my number theory student, working on elliptic curves, he gave a talk about graph theory in Sage at a Sage Days (at IPAM). His interest there was mainly in helping an undergrad (Emily Kirkman) with a Sage dev project I hired her to work on. David Harvey asked: “what’s so hard about implementing graph isomorphism”, and Robert wanted to find out, so he spent months doing a full implementation of Brendan McKay’s algorithm (the only other one). This had absolutely nothing to do with his Ph.D. thesis work on the Birch and Swinnerton-Dyer conjecture, but I was very supportive.&lt;/div&gt;&lt;h3 id=&quot;craig-citro-google-&quot;&gt;Craig Citro (Google)&lt;/h3&gt;&lt;div&gt;Craig Citro did a Ph.D. in number theory (with Hida), but also worked on Sage a&lt;em&gt;LOT&lt;/em&gt;&amp;nbsp;as a grad student and postdoc. He’s done a lot of hiring at Google. He says: “My main piece of advice to potential google applicants is ‘start writing as much code as you can, right now.’ Find out whether you’d actually&amp;nbsp;&lt;em&gt;enjoy&lt;/em&gt;working for a company like Google, where a large chunk of your job may be coding in front of a screen. I’ve had several friends from math discover (the hard way) that they don’t really enjoy full-time programming (any more than they enjoy full-time teaching?).”&lt;/div&gt;&lt;div&gt;“Start throwing things on github now. Potential interviewers are&amp;nbsp;&lt;em&gt;going&lt;/em&gt;&amp;nbsp;to check out your github profile; having some cool stuff at the top is great, but seeing a regular stream of commits is also a useful signal.”&lt;br /&gt;&lt;h3 id=&quot;robert-bradshaw-google-&quot;&gt;Robert Bradshaw (Google)&lt;/h3&gt;&lt;div&gt;“A lot of mathematicians are good at (and enjoy) programming. Many of them aren’t (and don’t). Find out. Being involved in Sage is significantly more than just having taken a suite of programming courses or hacking personal scripts on your own: code reviews, managing bugs, testing, large-scale design, working with others’ code, seeing projects through to completion, and collaborating with others, local and remote, on large, technical projects are all important. It demonstrates your passion.”&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;rado-kirov-google-&quot;&gt;Rado Kirov (Google)&lt;/h3&gt;&lt;div&gt;“&lt;span&gt;Robert Bradshaw said it before me, but I have to repeat. L&lt;/span&gt;&lt;span&gt;arge scale software development requires exposure to a lot of tooling and process beyond just writing code - version control, code reviews, bug tracking, code&amp;nbsp;&lt;/span&gt;&lt;span&gt;maintenance&lt;/span&gt;&lt;span&gt;, release process, coordinating with collaborators. Contributing to an active open-source project with a large number of&amp;nbsp;contributors like Sage, is a great way to experience all that and see if you would like to make it your profession. A lot of mathematicians write clever code for their research, but if less than 10 people see it and use it, it is not a&amp;nbsp;&lt;/span&gt;&lt;span&gt;realistic&lt;/span&gt;&lt;span&gt;&amp;nbsp;representation of what working as a software engineer feels like.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;The software industry is in large demand of developers and hiring straight from&amp;nbsp;&lt;/span&gt;&lt;span&gt;academia is very common&lt;/span&gt;&lt;span&gt;. B&lt;/span&gt;&lt;span&gt;efore I got hired by Google, the only software development experience on my resume&lt;/span&gt;&lt;span&gt;&amp;nbsp;was the&amp;nbsp;Sage graph editor. Along with solid understanding of algorithms and data structures that was enough to get in.&quot;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;robert-bradshaw-google-&quot;&gt;&lt;span&gt;David Moulton (Google)&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;“Google hires mathematicians now as quantitative analysts = data engineers. Google is very flexible for a tech company about the backgrounds of its employees. We have a long-standing reading group on category theory, and we’re about to start one on Babai’s recent quasi- polynomial-time algorithm for graph isomorphism. And we have a math discussion group with lots of interesting math on it.”&lt;/div&gt;&lt;h2 id=&quot;advice-for-departments&quot;&gt;My advice for math professors&lt;/h2&gt;&lt;div&gt;Obviously, encourage your students to get involved in open source projects like Sage, even if it appears to be a waste of time or distraction from their thesis work (this will likely feel very counterintuitive you’ll hate it).&lt;/div&gt;&lt;div&gt;At Univ of Washington, a few years ago I taught a graduate-level course on Sage development. The department then refused to run it again as a grad course, which was frankly&amp;nbsp;&lt;span&gt;very&lt;/span&gt;&amp;nbsp;frustrating to me. This is exactly the wrong thing to do if you want to increase the options of your Ph.D. students for industry jobs. Maybe quit trying to train our students to be only math professors, and instead give them a much wider range of options.&lt;/div&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">The Dilemma of giving Christmas Gifts</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/12/15/The-Prisoners-Dilemma-of-Christmas-Gifts/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/12/15/The-Prisoners-Dilemma-of-Christmas-Gifts/</id>
		<updated>2015-12-15T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This post gives a game theoretic explanation as to why we exchange gifts. On
twitter &lt;a href=&quot;https://twitter.com/alexip&quot;&gt;@alexip&lt;/a&gt; tweeted &lt;a href=&quot;https://twitter.com/alexip/status/673573450036981762&quot;&gt;“‘Let’s agree not to give
each other presents for Christmas’ is just another case of the prisoner’s
dilemma #gametheory”&lt;/a&gt;.
This post builds on that and investigates the premise fully in an evolutionary
context investigating different values of how good it feels to give and receive
a gift :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/alexip/status/673573450036981762&quot;&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/tweet_about_xmas.png&quot; alt=&quot;Photo of alex's
tweet&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To illustrate this consider the situation where Alex and Camille are approaching
Christmas:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alex: How about we don’t buy Christmas present for each other this year?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Camille: Sounds great.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Let us describe how this situation corresponds to a prisoner’s dilemma.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If Alex and Camille &lt;strong&gt;cooperate&lt;/strong&gt; and indeed keep their promise of not getting
gifts than let us assume they both get a utility of \(R\) (&lt;em&gt;reward&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;If Alex cooperates but Camille decides to &lt;strong&gt;defect&lt;/strong&gt; and nonetheless give a
gift then Alex will feel a bit bad and Camille will feel good, so Alex gets a
utility of \(S\) (&lt;em&gt;sucker&lt;/em&gt;) and Camille a utility of \(T\) (&lt;em&gt;temptation&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;Vice versa if Camille cooperates but Alex decides to give a gift.&lt;/li&gt;
  &lt;li&gt;If &lt;strong&gt;both&lt;/strong&gt; Alex and Camille go against their promise then they both get a
utility of \(P\) (&lt;em&gt;punishment&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This looks something like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/prisonersdilemma.svg&quot; alt=&quot;PD&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we assume that we feel better when we give gifts and will be keen to ‘cheat’
a promise of not giving then that corresponds to the following inequality of
utilities:&lt;/p&gt;



&lt;p&gt;In this case we see that if Camille chooses to cooperate then Alex’s &lt;strong&gt;best
response&lt;/strong&gt; is to play defect (as \(T&amp;gt;R\)):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If Camille is indeed going to not give a gift, then Alex should give a gift.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Also&lt;/strong&gt; if Camille chooses to defect then Alex’s &lt;strong&gt;best response&lt;/strong&gt; is to defect
once again (as \(P&amp;gt;S\)):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If Camille is going to ‘break the promise’ then Alex should give a gift.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;So no matter what happens: Alex should defect.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In game theory this is what is called a dominating strategy, and indeed this
situation is referred to as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Prisoner%27s_dilemma&quot;&gt;Prisoner’s
Dilemma&lt;/a&gt; and is what Alex
was referring to in his original tweet.&lt;/p&gt;

&lt;h2 id=&quot;how-does-reputation-effect-gift-giving&quot;&gt;How does reputation effect gift giving?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;So far all we are really modelling is a SINGLE exchange of gifts.&lt;/strong&gt;
If we were to exchange gifts every year we would perhaps learn to trust each
other, so that when Camille says they are not going to give a gift Alex has
reason to believe that they will indeed not do so.&lt;/p&gt;

&lt;p&gt;This is called an &lt;strong&gt;iterated Prisoner’s dilemma&lt;/strong&gt; and has been the subject of a
great amount of academic work.&lt;/p&gt;

&lt;p&gt;Let us consider two types of behaviour that Camille and Alex could choose to
exhibit, they could be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alternator: give gifts one year and not give gifts the next.&lt;/li&gt;
  &lt;li&gt;TitForTat: do whatever the other does the previous year.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us assume that Alex and Camille will be faced with this situation for 10
years. I’m going to use the Python &lt;a href=&quot;http://axelrod.readthedocs.org/en/latest/&quot;&gt;Axelrod
library&lt;/a&gt; to illustrate things:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axelrod&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axl&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;camille&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Alternator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TitForTat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;camille&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sparklines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'😀'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'🎁'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;😀🎁😀🎁😀🎁😀🎁😀🎁&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;😀😀🎁😀🎁😀🎁😀🎁😀&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that Alex and Camille never actually exchange gifts the same year (the 😀
means that the particular player cooperates, the 🎁 that they don’t and give a
gift).&lt;/p&gt;

&lt;p&gt;Most of the ongoing Iterated Prisoner’s Dilemma research is directly due to a
computer tournament run by &lt;a href=&quot;http://www-personal.umich.edu/~axe/&quot;&gt;Robert Axelrod&lt;/a&gt;
in the 1980s. In that work Axelrod invited a variety of computer strategies to
be submitted and they then played against each other. You can read more about
that here:
&lt;a href=&quot;http://axelrod.readthedocs.org/en/latest/reference/description.html&quot;&gt;axelrod.readthedocs.org/en/latest/reference/description.html&lt;/a&gt;
but the important thing is that there are a bunch of ‘behaviours’ that have been
well studied and that we will look at here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cooperator: never give gifts&lt;/li&gt;
  &lt;li&gt;Defector: always give gifts&lt;/li&gt;
  &lt;li&gt;Alternator: give gifts one year and not give gifts the next.&lt;/li&gt;
  &lt;li&gt;TitForTat: do whatever the other does the previous year.&lt;/li&gt;
  &lt;li&gt;TwoTitForTat: will start by not giving a gift but if the other player gives a
  gift will give a gift the next two years.&lt;/li&gt;
  &lt;li&gt;Grudger: start by not giving gifts but if at any time someone else goes
  against the promise: give a gift no matter what.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What we will now do is see how much utility (how people feel about their gift
giving behaviour) if we have a situation where 6 people exchange gifts for 50
years and each person acts according to one of the above behaviours.&lt;/p&gt;

&lt;p&gt;For our utility we will use the following values of \(R, P, S, T\):&lt;/p&gt;



&lt;p&gt;Here is how we can do this in python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cooperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Defector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Alternator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TitForTat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TwoTitsForTat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Grudger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;christmas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tournament&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;christmas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;525&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;562&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;417&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;622&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;646&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;646&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that the people that do the best are the last two: TwoTitForTat and
Grudger. These are people who are quick enough to react to people who won’t
keep their promise but that do give hope to people who will!&lt;/p&gt;

&lt;p&gt;## At a population level: evolution of gift giving&lt;/p&gt;

&lt;p&gt;We can consider this in an evolutionary context where we see how the behaviour
is allowed to evolve amongst a whole population of people. This particular type
of game theoretic analysis is concerned not in micro interactions but long term
macro stability of the system.&lt;/p&gt;

&lt;p&gt;Here is how we can see this using Python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ecosystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reproduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/basic_christmas_evo.svg&quot; alt=&quot;Basic Christmas
Evolution&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What we see is that over time, the population evolves to only Cooperator,
TitForTat, Grudger and TwoTitsForTat, &lt;strong&gt;but&lt;/strong&gt; of course in a population with
only those strategies everyone is keeping their promise, cooperating and &lt;strong&gt;not
giving gifts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let us see how this changes for different values of \(R, P, S, T\).&lt;/p&gt;

&lt;p&gt;To check if not giving presents is evolutionary stable we just need to see what
the last population numbers are for the Alternator and Defector. Here is a Python function to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_if_end_pop_cooperates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                                 &lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Returns a boolean and the last population vector&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;christmas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tournament&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;christmas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;evo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ecosystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;evo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reproduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;turns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;last_pop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;population_sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_pop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that for the default values of \(R, P, S, T\) we have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_if_end_pop_cooperates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.16576&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.26105&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.28659&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.28659&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As already seen we have that for these values we end up with everyone keeping to the promise.
Let us increase the value of \(T\) by a factor of 100:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_if_end_pop_cooperates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We here see, that if the utility of giving a gift when the receiver is not giving
one in return is very large, the overall population will always give a gift:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/t_factor_of_100_christmas_evo.svg&quot; alt=&quot;Increasing t by factor of 100&quot; /&gt;&lt;/p&gt;

&lt;p&gt;## Seeing the effect of how good giving gifts makes us feel&lt;/p&gt;

&lt;p&gt;The final piece of analysis I will carry out is a parameter sweep of the above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\(5\leq T \leq 100\)&lt;/li&gt;
  &lt;li&gt;\(3\leq R &amp;lt; T\)&lt;/li&gt;
  &lt;li&gt;\(1\leq P &amp;lt; R\)&lt;/li&gt;
  &lt;li&gt;\(0\leq S &amp;lt; P\)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this data sweep is in &lt;a href=&quot;http://vknight.org/unpeudemath/assets/code/christmas.csv&quot;&gt;this csv
file&lt;/a&gt;. Here is the distribution of
parameters for which everyone gives a gift (reneging on the promise):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/parameters_for_which_gifts_are_not_given.svg&quot; alt=&quot;Parameters for kept
promise&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the distribution of parameters for which everyone keeps their promise
and does not give gifts:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/parameters_for_which_gifts_are_given.svg&quot; alt=&quot;Parameters for kept
promise&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that people keep their promise if the \(T\) utility (the utility of
being tempted to break the promise) is very high compared to all other
utilities.&lt;/p&gt;

&lt;p&gt;Carrying out a simple logistic regression we see the coefficients of each of the variables as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\(P\): 3.121547&lt;/li&gt;
  &lt;li&gt;\(R\): -2.942909&lt;/li&gt;
  &lt;li&gt;\(S\): 0.007738&lt;/li&gt;
  &lt;li&gt;\(T\): -0.107386&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The parameters that have a positive effect on keeping the promise is \(R\) and
\(S\) which is the reward for the promise being kept and for not giving a gift
but receiving one.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TLDR&lt;/h2&gt;

&lt;p&gt;Agreeing to not give gifts at Christmas can be an evolutionary stable strategy,
but this is only in the specific case where the utility of ‘giving’ is less than
the utility of ‘not giving’. &lt;strong&gt;Given that in practice this promise is almost always broken
(that’s my personal experience anyway) this would suggest that people enjoy
giving gifts a lot more than receiving them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Merry christmas 🎄🎁⛄️.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/drvinceknight/unpeudemath/tree/gh-pages/assets/code/prisoners_dilemma_of_giving_gifts.ipynb&quot;&gt;Jupyter notebook to produce graphics for
this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vknight.org/unpeudemath/assets/code/generate_christmas_data.py&quot;&gt;Python script to carry out parameter
sweep&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://axelrod.readthedocs.org/en/latest/&quot;&gt;The Axelrod library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">I think this is how to crawl the history of a git repository</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/12/05/I-think-this-is-the-way-to-crawl-a-git-repository/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/12/05/I-think-this-is-the-way-to-crawl-a-git-repository/</id>
		<updated>2015-12-05T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This blog post is a direct application of &lt;a href=&quot;https://meta.wikimedia.org/wiki/Cunningham%27s_Law&quot;&gt;Cunningham’s
Law&lt;/a&gt;: which is that “the
best way to get the right answer on the Internet is not to ask a question, it’s
to post the wrong answer”. With the other core developers of the
&lt;a href=&quot;https://github.com/Axelrod-Python/Axelrod&quot;&gt;Axelrod&lt;/a&gt; library we’re writing a
paper and I wanted to see the evolution of a particular property of the library
through the 2000+ commits (mainly to include a nice graph in the paper). This
post will detail how I’ve cycled through all the commits and recorded the
particular property I’m interested in. &lt;strong&gt;EDIT: thanks to Mario for the comments:
see the edits in bold to see the what I didn’t quite get right.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/Axelrod-Python/Axelrod&quot;&gt;Axelrod&lt;/a&gt; library is a
collaborative project that allows anyone to submit strategies for the iterated
prisoner’s dilemma via pull request (read more about this here:
&lt;a href=&quot;https://github.com/Axelrod-Python/Axelrod&quot;&gt;axelrod.readthedocs.org/en/latest/&lt;/a&gt;).
When the library was first put on github it had 6 strategies, it currently has
118. This figure can be obtained by simply running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axelrod&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axelrod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;118&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The goal of this post is to obtain the plot below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/strategies_over_time.svg&quot; alt=&quot;The number of strategies over
time&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;EDIT: here is the correct plot:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/correct_strategies_over_time.svg&quot; alt=&quot;The correct number of strategies over
time&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here is how I’ve managed that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write a script that imports the library and throws the required data in to a
file.&lt;/li&gt;
  &lt;li&gt;Write another script that goes through the commits and runs the previous
script.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So first of all here’s the script that gets the number of strategies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axelrod&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axelrod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axelrod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The (very loose) error handling is because any given commit might or might not
be able to run at all (for a number of reasons). The command line arguments are
so that my second script can pass info about the commits (date and hash).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the script that walks the github repository:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repo&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# This imports the necessary class from the gitPython package&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;path_to_repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;~/src/Axelrod/&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_to_repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;all_commits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_commits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Get all the commits&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# This creates an object that I can just use basic git commands with&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'master'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Make sure I start at master&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Need to give time for files write&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Delete the data file if it already exists&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;OSError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_commits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;committed_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Go through all commits&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rubbish&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.DS_Store&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;axelrod/.DS_Store&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;axelrod/tests/.DS_Store&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;axelrod/strategies/.DS_Store&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Having to delete some files that were not in gitignore at the time of the commit&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_to_repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rubbish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;OSError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Checkout the commit&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Need to let files write&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'python2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'number_of_strategies.py'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;committed_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexsha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Call the other script and output to the `data` file&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'master'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Go back to HEAD of master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, I am not actually sure if I need the 10 seconds of sleep in there but it
seems to make things a little more reliable (this is where I’m hoping some
knowledgeable kind soul will point out something isn’t quite right).&lt;/p&gt;

&lt;p&gt;Here is an animated gif of the library as the script checks through the commits
(I used a sleep of 0.1 second here, and cut if off at the beginning):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/scraping_repo.gif&quot; alt=&quot;Walking through a repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(You can find a video version of the above at the &lt;a href=&quot;http://recordit.co/a6UbBfPA5D&quot;&gt;record.it site&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The data set from above looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;...
1424259748 6 5774fec6b3029b60c6b1bf4cb5d8bfb5323a1ad3
1424259799 6 35db17958a93e66cc09a7e7b865127b8d20acd85
1424261483 6 79c03291a1f0211925755962411d28c932150aaa
1424264425 7 f4be6bcbe9e122eb036a141f48f5acbf03b9290c
1424264540 7 6f28c9f8653e39b496c872351bce5a420e474c17
1424264950 7 456d9d25dbc44e29dde6b39455d10314824479bb
1424264958 7 0c01b14b5c3180d9e4016b09e532410cafd53992
1424265660 7 3eeec928cb7261af797044ac3bde1b26e11a7897
1424266926 7 cf506116005acd5a450894ca67eb0b670d5fd597
1424268080 8 87aa895089cdb105471280a0c374623ee7f6c9ba
1424268969 7 d0c36795fd6a69f9a1558b0b1e738d7633eb1b8e
1424270889 8 d487a97c9327235c4c334b23684583a116cc407a
1424272151 8 e9cd655661d3cef0a6df20cc509ae5ac2431f896
...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s all great and then the &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/strategies_over_time.svg&quot;&gt;plot
above&lt;/a&gt; can be drawn
straightforwardly. The thing is: I’m not convinced it’s worked as I had hoped.
Indeed:
&lt;a href=&quot;https://github.com/Axelrod-Python/Axelrod/commit/c7dc2d22ff2e300098cd9b29cd03080e01d64879&quot;&gt;c7dc2d22ff2e300098cd9b29cd03080e01d64879&lt;/a&gt;
took place on the 18th of June and added 3 strategies but it’s not in the data
set (or indeed in the plot).&lt;/p&gt;

&lt;p&gt;Also, for some reason the data set gets these lines at some point (here be
gremlins…) ?????:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;...
&amp;lt;class 'axelrod.strategies.alternator.Alternator'&amp;gt;
&amp;lt;class 'axelrod.strategies.titfortat.AntiTitForTat'&amp;gt;
&amp;lt;class 'axelrod.strategies.titfortat.Bully'&amp;gt;
&amp;lt;class 'axelrod.strategies.cooperator.Cooperator'&amp;gt;
&amp;lt;class 'axelrod.strategies.cycler.CyclerCCCCCD'&amp;gt;
&amp;lt;class 'axelrod.strategies.cycler.CyclerCCCD'&amp;gt;
&amp;lt;class 'axelrod.strategies.cycler.CyclerCCD'&amp;gt;
&amp;lt;class 'axelrod.strategies.defector.Defector'&amp;gt;
&amp;lt;class 'axelrod.strategies.gobymajority.GoByMajority'&amp;gt;
&amp;lt;class 'axelrod.strategies.titfortat.SuspiciousTitForTat'&amp;gt;
&amp;lt;class 'axelrod.strategies.titfortat.TitForTat'&amp;gt;
&amp;lt;class 'axelrod.strategies.memoryone.WinStayLoseShift'&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s more confusing is that it’s not completely wrong because that does
overall look ‘ok’ (correct number of strategies at the beginning, end and
various commits are right there). &lt;strong&gt;So does anyone know why the above doesn’t
work properly?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’m really hoping this &lt;a href=&quot;http://xkcd.com/386/&quot;&gt;xkcd comic&lt;/a&gt; kicks in and someone
tells me what’s wrong with what I’ve done:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/duty_calls.png&quot; alt=&quot;Duty Calls http://xkcd.com/386/&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;EDIT: Big thanks to Mario Wenzel below in the comments for figuring out
everythig that wasn’t quite right.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here’s the script to count the strategies (writing to file instead of piping
and also with correct error catching to deal with changes within the
library):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csv&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axelrod&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axelrod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axelrod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axelrod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ordinary_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axelrod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ordinary_strategies&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axelrod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basic_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axelrod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basic_strategies&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axelrod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cheating_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axelrod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cheating_strategies&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;csvwrtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;csvwrtr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writerow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the modified script to roll through the commits (basically the same
as before but it calls the other script with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-B&lt;/code&gt; flag (to avoid
importing compiled files) and also without the need to sleep:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repo&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axelrod&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csv&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;path_to_repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;~/src/Axelrod&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_to_repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;all_commits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_commits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;number_of_strategies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'master'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;OSError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_commits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;committed_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rubbish&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.DS_Store&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;axelrod/.DS_Store&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;axelrod/tests/.DS_Store&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;axelrod/strategies/.DS_Store&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Having to delete some files that were not in gitignore at the time of the commit&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_to_repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rubbish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;OSError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'python2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'number_of_strategies.py'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;committed_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexsha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;committed_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'master'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It looks like you should delete all &lt;code class=&quot;highlighter-rouge&quot;&gt;pyc&lt;/code&gt; files from the repository in
question and run the second script with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-B&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Thanks again Mario!&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">slabbe-0.2.spkg released</title>
		<link href="http://www.slabbe.org/blogue/2015/11/slabbe-0.2.spkg-released"/>
		<id>http://www.slabbe.org/blogue/2015/11/slabbe-0.2.spkg-released</id>
		<updated>2015-11-30T11:53:00+00:00</updated>
		<content type="html">&lt;div class=&quot;document&quot;&gt;
&lt;p&gt;These is a summary of the functionalities present in &lt;a class=&quot;reference external&quot; href=&quot;http://www.slabbe.org/Sage&quot;&gt;slabbe-0.2.spkg&lt;/a&gt; optional
Sage package. It works on version 6.8 of Sage but will work best with sage-6.10
(it is using the new code for &lt;tt class=&quot;docutils literal&quot;&gt;cartesian_product&lt;/tt&gt; merged the the betas of
sage-6.10). It contains 7 new modules:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;finite_word.py&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;language.py&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;lyapunov.py&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;matrix_cocycle.py&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;mult_cont_frac.pyx&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;ranking_scale.py&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;tikz_picture.py&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Cheat Sheets&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The best way to have a quick look at what can be computed with the optional
Sage package &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;slabbe-0.2.spkg&lt;/span&gt;&lt;/tt&gt; is to look at the &lt;a class=&quot;reference external&quot; href=&quot;http://arxiv.org/abs/1511.08399&quot;&gt;3-dimensional Continued
Fraction Algorithms Cheat Sheets&lt;/a&gt; available on the arXiv since today. It
gathers a handful of informations on different 3-dimensional Continued Fraction
Algorithms including well-known and old ones (Poincaré, Brun, Selmer, Fully
Subtractive) and new ones (Arnoux-Rauzy-Poincaré, Reverse, Cassaigne).&lt;/p&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://arxiv.org/abs/1511.08399&quot;&gt;&lt;img alt=&quot;/Files/2015/arp_cheat_sheet.png&quot; src=&quot;http://www.slabbe.org/Files/2015/arp_cheat_sheet.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;sage -i http://www.slabbe.org/Sage/slabbe-0.2.spkg    # on sage 6.8
sage -p http://www.slabbe.org/Sage/slabbe-0.2.spkg    # on sage 6.9 or beyond
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Computing the orbit of Brun algorithm on some input in \(\mathbb{R}^3_+\)
including dual coordinates:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;slabbe.mult_cont_frac&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Brun&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;algo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Brun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;algo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cone_orbit_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;13.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;87.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;15.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;13.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;72.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;15.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;132&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;13.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;57.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;15.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;132&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;13.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;42.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;15.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;7.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;132&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Computing the invariant measure:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;algo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invariant_measure_wireframe_plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iterations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndivs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savefig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.slabbe.org/Files/2015/brun_invm_wireframe_plot.png&quot;&gt;&lt;img alt=&quot;/Files/2015/brun_invm_wireframe_plot.png&quot; src=&quot;http://www.slabbe.org/Files/2015/brun_invm_wireframe_plot.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;Drawing the cylinders:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cocycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;algo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix_cocycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cocycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tikz_n_cylinders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.slabbe.org/Files/2015/brun_cylinders_3.png&quot;&gt;&lt;img alt=&quot;/Files/2015/brun_cylinders_3.png&quot; src=&quot;http://www.slabbe.org/Files/2015/brun_cylinders_3.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;Computing the Lyapunov exponents of the 3-dimensional Brun algorithm:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;slabbe.lyapunov&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lyapunov_table&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lyapunov_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;algo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_orbits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_iterations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;succesfull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orbits&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;      &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+-----------------------+---------+---------+---------+---------+&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;theta_1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;              &lt;span class=&quot;mf&quot;&gt;0.3026&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;0.3045&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;0.3051&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;0.00046&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;theta_2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1125&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1122&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1115&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;0.00020&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;theta_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;theta_1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;1.3680&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;1.3684&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;1.3689&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;0.00024&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Dealing with tikzpictures&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since I create lots of tikzpictures in my code and also because I was unhappy
at how the &lt;tt class=&quot;docutils literal&quot;&gt;view&lt;/tt&gt; command of Sage handles them (a tikzpicture is not a math
expression to put inside dollar signs), I decided to create a class for
tikzpictures. I think this module could be usefull in Sage so I will propose
its inclusion soon.&lt;/p&gt;
&lt;p&gt;I am using the standalone document class which allows some configurations like
the border:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;slabbe&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TikzPicture&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graphs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PetersenGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TikzPicture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;standalone_configs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;border=4mm&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tkz-graph'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;The &lt;tt class=&quot;docutils literal&quot;&gt;repr&lt;/tt&gt; method does not print all of the string since it is often very
long. Though it shows how many lines are not printed:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;documentclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tikz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standalone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;standaloneconfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tkz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tikzpicture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;useasboundingbox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rectangle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;definecolor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;68&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3748&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv6v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,},](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv6v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,},](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv7v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,},](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tikzpicture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;There is a method to generates a pdf and another for generating a png. Both
opens the file in a viewer by default unless &lt;tt class=&quot;docutils literal&quot;&gt;view=False&lt;/tt&gt;:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathtofile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;density&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathtofile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.slabbe.org/Files/2015/petersen_graph.png&quot;&gt;&lt;img alt=&quot;/Files/2015/petersen_graph.png&quot; src=&quot;http://www.slabbe.org/Files/2015/petersen_graph.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;Compare this with the output of &lt;tt class=&quot;docutils literal&quot;&gt;view(s, tightpage=True)&lt;/tt&gt; which does not
allow to control the border and also creates a second empty page on some
operating system (osx, only one page on ubuntu):&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tightpage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.slabbe.org/Files/2015/petersen_graph_view.png&quot;&gt;&lt;img alt=&quot;/Files/2015/petersen_graph_view.png&quot; src=&quot;http://www.slabbe.org/Files/2015/petersen_graph_view.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;One can also provide the filename where to save the file in which case the file
is not open in a viewer:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'petersen_graph.pdf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Another example with polyhedron code taken from this Sage thematic tutorial
&lt;a class=&quot;reference external&quot; href=&quot;http://doc.sagemath.org/html/en/thematic_tutorials/polytope_tikz.html&quot;&gt;Draw polytopes in LateX using TikZ&lt;/a&gt;:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Polyhedron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tikz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;674&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;731&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TikzPicture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;documentclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tikz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standalone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tikzpicture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.249656&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.577639&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.777700&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.358578&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.576936&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.733318&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4889&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.00000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.00000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.00000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.00000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.00000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.00000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tikzpicture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
\&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.slabbe.org/Files/2015/polyhedron.png&quot;&gt;&lt;img alt=&quot;/Files/2015/polyhedron.png&quot; src=&quot;http://www.slabbe.org/Files/2015/polyhedron.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</content>
		<author>
			<name>Sébastien Labbé</name>
			<uri>http://www.slabbe.org/blogue/</uri>
		</author>
		<source>
			<title type="html">Sébastien Labbé</title>
			<subtitle type="html">Sébastien Labbé</subtitle>
			<link rel="self" href="http://www.slabbe.org/blogue/categorie/sage/feed/atom/index.xml"/>
			<id>http://www.slabbe.org/blogue/feed/atom/</id>
			<updated>2016-03-10T15:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Survival of the fittest: Experimenting with a high performing strategy in other environments</title>
		<link href="http://drvinceknight.github.io/unpeudemath/gametheory/2015/11/28/Experimenting-with-a-high-performing-evolved-strategy-in-other-environments/"/>
		<id>http://drvinceknight.github.io/unpeudemath/gametheory/2015/11/28/Experimenting-with-a-high-performing-evolved-strategy-in-other-environments/</id>
		<updated>2015-11-28T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;&lt;a href=&quot;http://evolution.berkeley.edu/evolibrary/misconceptions_faq.php#b5&quot;&gt;A common misconception about evolution is that “The fittest organisms in a
population are those that are strongest, healthiest, fastest, and/or
largest.”&lt;/a&gt;
However, as that link indicates, survival of the fittest is implied at the
genetic level: and implies that evolution favours genes that are most able to
continue in the next generation for a given environment. In this post, I’m going
to take a look at a high performing strategy from the Iterated Prisoner’s
dilemma that was obtained through an evolutionary algorithm. I want to see how
well it does in other environments.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;This is all based on the &lt;a href=&quot;http://axelrod.readthedocs.org/en/latest/&quot;&gt;Python Axelrod
package&lt;/a&gt; which makes iterated
prisoner dilemma research straightforward and &lt;strong&gt;really&lt;/strong&gt; is just taking a look
at &lt;a href=&quot;http://mojones.net/evolving-strategies-for-an-iterated-prisoners-dilemma-tournament.html&quot;&gt;Martin Jones’s blog
post&lt;/a&gt;
which described the evolutionary analysis performed to get a strategy (&lt;code class=&quot;highlighter-rouge&quot;&gt;EvolvedLookerUp&lt;/code&gt;) that is
currently winning the overall tournament for the Axelrod library (with 108
strategies):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/04c9d74a5878e24e8da3c985ea393b5ee7439b3b/687474703a2f2f6178656c726f642d707974686f6e2e6769746875622e696f2f746f75726e616d656e742f6173736574732f737472617465676965735f626f78706c6f742e737667&quot; alt=&quot;Results from overall
tournament&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The strategy in question is designed to do exactly that and as you can see does
it really well (with a substantial gap between it’s median score and the runner
up: &lt;code class=&quot;highlighter-rouge&quot;&gt;DoubleCrosser&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;There are some things lacking in the analysis I’m going to present (which
strategies I’m looking at, number of tournaments etc…) but hopefully the
numerical analysis is still interesting. In essence I’m taking a look at the
following question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If a strategy is good in a big environment, how good is it in any given
environment?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From an evolutionary point of view this is kind of akin to seeing how good a
predator a shark would be in any random (potentially land based) environment…&lt;/p&gt;

&lt;p&gt;## Generating the data&lt;/p&gt;

&lt;p&gt;Thanks to the Axelrod, library it’s pretty straightforward to quickly experiment
with a strategy (or group of strategies) in a random tournament:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axelrod&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axl&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Import the axelrod library&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Return the rank of the test_strategy in a tournament with given
    strategiess&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nbr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tournament&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tournament&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tournament&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ranking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This runs a tournament and returns the rankings and wins for the input
strategies. For example, let’s see how &lt;code class=&quot;highlighter-rouge&quot;&gt;Cooperator&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Defector&lt;/code&gt; do in a
random tournament with 2 other strategies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axelrod&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axl&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# A random seed&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Our 2 random strategies&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tricky&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Defector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Prober&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then use the above function to see how &lt;code class=&quot;highlighter-rouge&quot;&gt;Cooperator&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Defector&lt;/code&gt; do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cooperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Defector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that cooperator ranks last (getting no wins), and defector just before last (getting 2 wins). This is confirmed by the actual tournament results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/small_tournament_boxplot.svg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/small_tournament_winplot.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The idea is to reproduce the above for a variety of tournament sizes, repeating
random samples for each size and looking at the wins and ranks for the
strategies we’re interested in.&lt;/p&gt;

&lt;p&gt;This script generates our data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axelrod&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axl&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csv&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;max_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Max size of tournaments considered (maximum size of the sample)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tournaments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Number of tournaments of each size to run (number of samples)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Number of repetitions of each tournament (for a given sample)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EvolvedLookerUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TitForTat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cooperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Defector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoubleCrosser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obey_axelrod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Return the rank of the test_strategy in a tournament with given
    strategiess&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nbr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tournament&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tournament&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tournament&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ranking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'combined-data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;csvwrtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_lookerup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data-lookerup.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;csvwrtr_lookerup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_lookerup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_titfortat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data-titfortat.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;csvwrtr_titfortat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_titfortat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_cooperator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data-cooperator.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;csvwrtr_cooperator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cooperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_defector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data-defector.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;csvwrtr_defector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_defector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_doublcrosser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data-doublecrosser.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;csvwrtr_doublcrosser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_doublcrosser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ind_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ind_row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tournaments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategy_labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;trnmt_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;trnmt_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ind_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;



    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;csvwrtr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writerow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;csvwrtr_lookerup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writerow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;csvwrtr_titfortat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writerow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;csvwrtr_cooperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writerow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;csvwrtr_defector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writerow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;csvwrtr_doublcrosser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writerow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_lookerup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_titfortat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_cooperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_defector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_doublcrosser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above creates tournaments up to a size of 25 other strategies, with 20 random tournaments for each size, creating six data files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://vknight.org/unpeudemath/assets/code/data-lookerup.csv&quot;&gt;Data for tournaments with a random strategy sample and &lt;code class=&quot;highlighter-rouge&quot;&gt;EvolvedLookerUp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vknight.org/unpeudemath/assets/code/data-titfortat.csv&quot;&gt;Data for tournaments with the random strategy sample and &lt;code class=&quot;highlighter-rouge&quot;&gt;TitForTat&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vknight.org/unpeudemath/assets/code/data-cooperator.csv&quot;&gt;Data for tournaments with the random strategy sample and &lt;code class=&quot;highlighter-rouge&quot;&gt;Cooperator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vknight.org/unpeudemath/assets/code/data-defector.csv&quot;&gt;Data for tournaments with the random strategy sample and &lt;code class=&quot;highlighter-rouge&quot;&gt;Defector&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vknight.org/unpeudemath/assets/code/data-doublecrosser.csv&quot;&gt;Data for tournaments with the random strategy sample and &lt;code class=&quot;highlighter-rouge&quot;&gt;DoubleCrosser&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vknight.org/unpeudemath/assets/code/combined-data&quot;&gt;Data for tournaments with the random strategy sample as well as the above strategies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;analysing-the-data&quot;&gt;Analysing the data&lt;/h2&gt;

&lt;p&gt;I then used &lt;a href=&quot;https://github.com/drvinceknight/unpeudemath/blob/gh-pages/assets/code/Experimenting_with_the_evolved_lookerup.ipynb&quot;&gt;this Jupyter notebook&lt;/a&gt; to analyse the data.&lt;/p&gt;

&lt;p&gt;Here is what we see for the &lt;code class=&quot;highlighter-rouge&quot;&gt;EvolvedLookerUp&lt;/code&gt; strategy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/rank-lookerup.svg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/wins-lookerup.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The line is fitted to the median rank and number of wins (recall for each
number of strategies, 20 different sampled tournaments are considered) We see
that (as expected) as the number of strategies increases both the median rank
and wins increases, &lt;strong&gt;but what is of interest&lt;/strong&gt; is the rate at which that increase happens.&lt;/p&gt;

&lt;p&gt;Below is the fitted lines for all the considered strategies:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/rank-regression.svg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/wins-regression.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are the fits (and corresponding plots)  for the ranks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EvolvedLookerUp&lt;/code&gt;: \(y=0.49x-0.10\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/rank-lookerup.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TitForTat&lt;/code&gt;: \(y=0.53-0.45\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/rank-titfortat.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cooperator&lt;/code&gt;: \(y=0.42x+1.40\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/rank-cooperator.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Defector&lt;/code&gt;: \(y=0.75x-0.33\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/rank-defector.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DoubleCrosser&lt;/code&gt;: \(y=0.51x-0.47\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/rank-doublecrosser.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the fits (and corresponding plots) for the wins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EvolvedLookerUp&lt;/code&gt;: \(y=0.28x+0.06\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/wins-lookerup.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TitForTat&lt;/code&gt;: \(y=0.00x+0.00\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/wins-titfortat.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cooperator&lt;/code&gt;: \(y=0.00x+0.00\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/wins-cooperator.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Defector&lt;/code&gt;: \(y=0.89x+0.14\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/wins-defector.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DoubleCrosser&lt;/code&gt;: \(y=0.85-0.10\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/wins-doublecrosser.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;It seems that the &lt;code class=&quot;highlighter-rouge&quot;&gt;EvolvedLookerUp&lt;/code&gt; strategy does continue to do well (with a
low coefficient of 0.49) in these random environments&lt;/strong&gt;. However what’s
interesting is that the simple &lt;code class=&quot;highlighter-rouge&quot;&gt;Cooperator&lt;/code&gt; strategy also seems to do well
(this might indicate that the random samples are creating ‘overly nice’
conditions).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All of the above keeps the 5 strategies considered separated from each, here
is the analysis repeated when combining the strategies with the random
sample:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/rank-combined-lookerup.svg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/wins-combined-lookerup.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Below is the fitted lines for all the considered strategies:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/combined-rank-regression.svg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/combined-win-regression.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are the fits (and corresponding plots)  for the ranks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EvolvedLookerUp&lt;/code&gt;: \(y=0.42x+2.05\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/rank-combined-lookerup.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TitForTat&lt;/code&gt;: \(y=0.44+1.95\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/rank-combined-titfortat.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cooperator&lt;/code&gt;: \(y=0.64+0.00\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/rank-combined-cooperator.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Defector&lt;/code&gt;: \(y=0.47x+1.87\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/rank-combined-defector.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DoubleCrosser&lt;/code&gt;: \(y=0.63x+1.88\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/rank-combined-doublecrosser.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the fits (and corresponding plots) for the wins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EvolvedLookerUp&lt;/code&gt;: \(y=0.28x+0.05\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/wins-combined-lookerup.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TitForTat&lt;/code&gt;: \(y=0.00x+0.00\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/wins-combined-titfortat.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cooperator&lt;/code&gt;: \(y=0.00x+0.00\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/wins-combined-cooperator.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Defector&lt;/code&gt;: \(y=0.89x+4.14\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/wins-combined-defector.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DoubleCrosser&lt;/code&gt;: \(y=0.85+2.87\) &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/wins-combined-doublecrosser.svg&quot;&gt;plot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;It looks like the &lt;code class=&quot;highlighter-rouge&quot;&gt;EvolvedLookerUp&lt;/code&gt; strategy continues to perform well in
environments that are not the ones it evolved in.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Axelrod library makes this analysis possible as you can quickly create
tournaments from a wide library of strategies. You could also specify the
analysis further by considering strategies of a particular type. For example
you could sample only from strategies that act deterministically (no random
behaviour):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategies&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'stochastic'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It would probably be worth gathering even more data to be able to make
substantial claims about the performances as well as
considering other test strategies but ultimately this gives some insight in to
the performances of the strategies in other environments.&lt;/p&gt;

&lt;h2 id=&quot;for-fun&quot;&gt;For fun&lt;/h2&gt;

&lt;p&gt;The latest release of the library
(&lt;a href=&quot;https://pypi.python.org/pypi/Axelrod&quot;&gt;v0.0.21&lt;/a&gt;) includes the ability to &lt;a href=&quot;http://axelrod.readthedocs.org/en/latest/tutorials/further_topics/creating_matches.html&quot;&gt;draw
sparklines&lt;/a&gt;
that give a visual representation of the interactions between pairs of
strategies. If you’re running python 3 you can include emoji so here goes the
sparklines for the test strategies considered:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combinations&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EvolvedLookerUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TitForTat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cooperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Defector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoubleCrosser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matchups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combinations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matchup&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matchups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matchup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matchup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sparklines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' 😀 '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' 😡 '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EvolvedLookerUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EvolvedLookerUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cooperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EvolvedLookerUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Defector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EvolvedLookerUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoubleCrosser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cooperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Defector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoubleCrosser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cooperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Defector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cooperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoubleCrosser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Defector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoubleCrosser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;😀&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;😡&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">&quot;Prime Numbers and the Riemann Hypothesis&quot;, Cambridge University Press, and SageMathCloud</title>
		<link href="http://sagemath.blogspot.com/2015/11/writing-prime-numbers-and-riemann.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-1666978360775459499</id>
		<updated>2015-11-19T11:34:46+00:00</updated>
		<content type="html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;Barry Mazur and I spent over a decade writing a popular math book &quot;Prime Numbers and the Riemann Hypothesis&quot;, which will be published by Cambridge Univeristy Press in 2016. &amp;nbsp;The book involves a large number of illustrations created using &lt;a href=&quot;http://sagemath.org/&quot;&gt;SageMath&lt;/a&gt;, and was mostly written using the LaTeX editor in &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This post is meant to provide a glimpse into the writing process and also content of the book.&lt;br /&gt;&lt;br /&gt;This is about making research math a little more accessible, about math education, and about technology.&lt;br /&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;Intended Audience:&lt;/strong&gt; Research mathematicians! Though there is no mathematics at all in this post.&lt;br /&gt;&lt;br /&gt;The book is here: &lt;a href=&quot;http://wstein.org/rh/&quot;&gt;http://wstein.org/rh/&lt;/a&gt;&lt;br /&gt;Download a copy before we have to remove it from the web!&lt;br /&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;Goal:&lt;/strong&gt; The goal of our book is simply to explain what the Riemann Hypothesis is really about. It is a book about mathematics by two mathematicians. The mathematics is front and center; we barely touch on people, history, or culture, since there are already numerous books that address the non-mathematical aspects of RH. &amp;nbsp;Our target audience is math-loving high school students, retired electrical engineers, and you.&lt;br /&gt;&lt;h2 id=&quot;clay-mathematics-institute-lectures-2005&quot;&gt;Clay Mathematics Institute Lectures: 2005&lt;/h2&gt;The book started in May 2005 when the Clay Math Institute asked Barry Mazur to give a large lecture to a popular audience at MIT and he chose to talk about RH, with me helping with preparations. His talk was entitled &quot;Are there still unsolved problems about the numbers 1, 2, 3, 4, ... ?&quot;&lt;br /&gt;&lt;br /&gt;See &lt;a href=&quot;http://www.claymath.org/library/public_lectures/mazur_riemann_hypothesis.pdf&quot;&gt;http://www.claymath.org/library/public_lectures/mazur_riemann_hypothesis.pdf&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Barry Mazur receiving a prize:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://www1.pictures.zimbio.com/gi/Barry+C+Mazur+Obama+Honors+Winners+Nat+l+Medal+1QnaS-NICosl.jpg&quot; height=&quot;213&quot; width=&quot;320&quot; /&gt;&lt;/div&gt;&lt;br /&gt;Barry's talk went well, and we decided to try to expand on it in the form of a book. We had a long summer working session in a vacation house near an Atlantic beach, in which we greatly refined our presentation. (I remember that I also finally switched from Linux to OS X on my laptop when Ubuntu made a huge mistake pushing out a standard update that hosed X11 for everybody in the world.)&lt;br /&gt;&lt;h2 id=&quot;classical-fourier-transform&quot;&gt;Classical Fourier Transform&lt;/h2&gt;Going beyond the original Clay Lecture, I kept pushing Barry to see if he could describe RH as much as possible in terms of the classical Fourier transform applied to a function that could be derived via a very simple process from the prime counting function pi(x). Of course, he could. This led to more questions than it answered, and interesting numerical observations that are more precise than analytic number theorists typically consider.&lt;br /&gt;&lt;br /&gt;Our approach to writing the book was to try to reverse engineer how Riemann might have been inspired to come up with RH in the first place, given how Fourier analysis of periodic functions was in the air. This led us to some surprisingly subtle mathematical questions, some of which we plan to investigate in research papers. They also indirectly play a role in Simon Spicer's recent UW Ph.D. thesis. (The expert analytic number theorist Andrew Granville helped us out of many confusing thickets.)&lt;br /&gt;&lt;br /&gt;In order to use Fourier series we naturally have to rely heavily on Dirac/Schwartz distributions.&lt;br /&gt;&lt;h2 id=&quot;simuw&quot;&gt;SIMUW&lt;/h2&gt;University of Washington has a great program called &lt;a href=&quot;http://www.math.washington.edu/~simuw/&quot;&gt;SIMUW: &quot;Summer Institute for Mathematics at Univ of Washington.''&lt;/a&gt; It's for high school; admission is free and based on student merit, not rich parents, thanks to an anonymous wealthy donor! &amp;nbsp;I taught a SIMUW course one summer from the RH book. &amp;nbsp;I spent one very intense week on the RH book, and another on the Birch and Swinnerton-Dyer conjecture.&lt;br /&gt;&lt;br /&gt;The first part of our book worked well for high school students. For example, we interactively worked with prime races, multiplicative parity, prime counting, etc., using Sage interacts. The students could also prove facts in number theory. They also looked at misleading data and tried to come up with conjectures. &lt;em&gt;In algebraic number theory, usually the first few examples are a pretty good indication of what is true. In analytic number theory, in contrast, looking at the first few million examples is usually deeply misleading.&lt;/em&gt;&lt;br /&gt;&lt;h2 id=&quot;reader-feedback-i-dare-you-to-find-a-typo&quot;&gt;Reader feedback: &quot;I dare you to find a typo!&quot;&lt;/h2&gt;In early 2015, we posted drafts on Google+ daring anybody to find typos. We got massive feedback. I couldn't believe the typos people found. One person would find a subtle issue with half of a bibliography reference in German, and somebody else would find a different subtle mistake in the same reference. Best of all, highly critical and careful non-mathematicians read straight through the book and found a large number of typos and minor issues that were just plain confusing to them, but could be easily clarified.&lt;br /&gt;&lt;br /&gt;Now the book is hopefully not riddled with errors. Thanks entirely to the amazingly generous feedback of these readers, when you flip to a random page of our book (go ahead and try), you are now unlikely to see a typo or, what's worse, some corrupted mathematics, e.g., a formula with an undefined symbol.&lt;br /&gt;&lt;h2 id=&quot;designing-the-cover&quot;&gt;Designing the cover&lt;/h2&gt;Barry and Gretchen Mazur, Will Hearst, and I designed a cover that combined the main elements of the book: title, Riemann, zeta:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-BlG3G0uRyME/Vk4iY4C_-hI/AAAAAAABWe4/9aWAhvetQcs/s1600/our-cover%2B%25281%2529.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;http://3.bp.blogspot.com/-BlG3G0uRyME/Vk4iY4C_-hI/AAAAAAABWe4/9aWAhvetQcs/s320/our-cover%2B%25281%2529.png&quot; width=&quot;318&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Then designers at CUP made our rough design more attractive according their tastes. As non-mathematician designers, they made it look prettier by messing with the Riemann Zeta function...&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-mpMWjFosfFE/Vk4icxOXdAI/AAAAAAABWfA/tKubeiVWZp8/s1600/bad-cover%2B%25281%2529.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;224&quot; src=&quot;http://1.bp.blogspot.com/-mpMWjFosfFE/Vk4icxOXdAI/AAAAAAABWfA/tKubeiVWZp8/s320/bad-cover%2B%25281%2529.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2 id=&quot;publishing-with-cambridge-university-press&quot;&gt;Publishing with Cambridge University Press&lt;/h2&gt;Over years, we talked with people from AMS, Springer-Verlag and Princeton Univ Press about publishing our book. I met CUP editor Kaitlin Leach at the Joint Mathematics Meetings in Baltimore, since the Cambridge University Press (CUP) booth was directly opposite the SageMath booth, which I was running. We decided, due to their enthusiasm, which lasted more than for the few minutes while talking to them (!), past good experience, and general frustration with other publishers, to publish with CUP.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-noEWAhfd_UA/Vk4ih_6bFJI/AAAAAAABWfI/TFqJyyy_stU/s1600/cup.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;67&quot; src=&quot;http://2.bp.blogspot.com/-noEWAhfd_UA/Vk4ih_6bFJI/AAAAAAABWfI/TFqJyyy_stU/s320/cup.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 id=&quot;what-is-was-like-for-us-working-with-cup&quot;&gt;What is was like for us working with CUP&lt;/h3&gt;The actual process with CUP has had its ups and downs, and the production process has been frustrating at times, being in some ways not quite professional enough and in other ways extremely professional. Traditional book publication is currently in a state of rapid change. Working with CUP has been unlike my experiences with other publishers.&lt;br /&gt;&lt;br /&gt;For example, CUP was extremely diligent putting huge effort into tracking down permissions for every one of the images in our book. And they weren't satisfy with a statement on Wikipedia that &quot;this image is public domain&quot;, if the link didn't work. They tracked down alternatives for all images for which they could get permissions (or in some cases have us partly pay for them). This is in sharp contrast to my experience with Springer-Verlag, which spent about one second on images, just making sure I signed a statement that all possible copyright infringement was my fault (not their's).&lt;br /&gt;&lt;br /&gt;The CUP copyediting and typesetting appeared to all be outsourced to India, organized by people who seemed far more comfortable with Word than LaTeX. Communication with people that were being contracted out about our book's copyediting was surprisingly difficult, a problem that I haven't experienced before with Springer and AMS. That said, everything seems to have worked out fine so far.&lt;br /&gt;&lt;br /&gt;On the other hand, our marketing contact at CUP mysteriously vanished for a long time; evidently, they had left to another job, and CUP was recruiting somebody else to take over. However, now there are new people and they seem extremely passionate!&lt;br /&gt;&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;I'm particularly excited to see if we can produce an electronic (Kindle) version of the book later in 2016, and eventually a fully interactive complete for-pay SageMathCloud version of the book, which could be a foundation for something much broader with publishers, which addresses the shortcoming of the Kindle format for interactive computational books. Things like electronic versions of books are the sort of things that AMS is frustratingly slow to get their heads around...&lt;br /&gt;&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Publishing a high quality book is a long and involved process.&lt;/li&gt;&lt;li&gt;Working with CUP has been frustrating at times; however, they have recruited a very strong team this year that addresses most issues.&lt;/li&gt;&lt;li&gt;I hope mathematicians will put more effort into making mathematics accessible to non-mathematicians.&lt;/li&gt;&lt;li&gt;Hopefully, this talk will give provide a more glimpse into the book writing process and encourage others (and also suggest things to think about when choosing a publisher and before signing a book contract!)&lt;/li&gt;&lt;/ol&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Sage Days 70 - Berkeley - November 2015</title>
		<link href="http://blog.harald.schil.ly/2015/11/sage-days-70-berkeley-november-2015.html"/>
		<id>tag:blogger.com,1999:blog-3473399517246044360.post-4871259029930426944</id>
		<updated>2015-11-19T09:16:24+00:00</updated>
		<content type="html">&lt;div dir=&quot;ltr&quot;&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;a class=&quot;g-profile&quot; href=&quot;https://plus.google.com/108676679876909469255&quot; target=&quot;_blank&quot;&gt;+Dennis Stein&lt;/a&gt;&amp;nbsp;brought his cameras and tools to Sage Days 70:&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://vimeo.com/146207495&quot;&gt;Sage Days 70 - Berkeley - November 2015&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/dstein&quot;&gt;Dennis Stein&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com/&quot;&gt;Vimeo&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;</content>
		<author>
			<name>Harald Schilly</name>
			<email>noreply@blogger.com</email>
			<uri>http://blog.harald.schil.ly/search/label/sage</uri>
		</author>
		<source>
			<title type="html">Harald Schilly</title>
			<link rel="self" href="http://blog.harald.schil.ly/feeds/posts/default/-/sage"/>
			<id>tag:blogger.com,1999:blog-3473399517246044360</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Visualising Markov Chains with NetworkX</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/11/15/Visualising-markov-chains/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/11/15/Visualising-markov-chains/</id>
		<updated>2015-11-15T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;I’ve written quite a few blog posts about Markov chains (it occupies a central
role in quite a lot of my research). In general I visualise 1 or 2 dimensional
chains using &lt;a href=&quot;http://www.texample.net/tikz/&quot;&gt;Tikz&lt;/a&gt; (the LaTeX package) sometimes
scripting the drawing of these using Python &lt;strong&gt;but&lt;/strong&gt; in this post I’ll describe
how to use the awesome &lt;a href=&quot;https://networkx.github.io/&quot;&gt;networkx&lt;/a&gt; package to
represent the chains.&lt;/p&gt;

&lt;p&gt;For all of this we’re going to need the following three imports:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;division&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Only for how I'm writing the transition matrix&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;networkx&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;nx&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# For the magic&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# For plotting&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s consider the Markov Chain I describe in &lt;a href=&quot;http://vknight.org/unpeudemath/code/2014/09/19/the-expected-waiting-time-in-a-tandem-queue-with-blocking-using-sage/&quot;&gt;this post about waiting times in
a tandem
queue&lt;/a&gt;. You can see an image of it (drawn in Tikz) below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/small_chain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As is described in that post, we’re dealing with a two dimensional chain and
without going in to the details, the states are given by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;states&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the transition matrix \(Q\) by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To build the &lt;code class=&quot;highlighter-rouge&quot;&gt;networkx&lt;/code&gt; graph we will use our states as nodes and have edges
labeled by the corresponding values of \(Q\) (ignoring edges that would
correspond to a value of 0). &lt;strong&gt;The neat thing about &lt;code class=&quot;highlighter-rouge&quot;&gt;networkx&lt;/code&gt; is that it
allows you to have any Python instance as a node&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MultiDiGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;edge_labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin_state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination_state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;destination_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:.02f}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;edge_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:.02f}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can draw the chain:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;node_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw_networkx_edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw_networkx_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font_weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw_networkx_edge_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'off'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the result here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/mc-matplotlib.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the &lt;a href=&quot;https://networkx.github.io/documentation/latest/reference/generated/networkx.drawing.nx_pylab.draw_networkx_edges.html&quot;&gt;networkx documentatin&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yes, it is ugly but drawing proper arrows with Matplotlib this way is tricky.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So instead I’m going to write this to a
&lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/mc.dot&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.dot&lt;/code&gt;&lt;/a&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'mc.dot'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we’ve done that we have a standard network file format, so we can use the
command line to convert that to whatever format we want, here I’m creating the
png file below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;neato -Tps -Goverlap&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scale mc.dot -o mc.ps; convert mc.ps mc.png&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/mc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/mc.dot&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.dot&lt;/code&gt;&lt;/a&gt; file is a standard graph
format but you can also just open up the
&lt;a href=&quot;http://vknight.org/unpeudemath/assets/images/mc.ps&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.ps&lt;/code&gt;&lt;/a&gt; file in whatever you want and
modify the image. Here it is in inkscape:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/mc_in_inkscape.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even if the above is not as immediately esthetically pleasing as a nice Tikz
diagram (but how could it be?) it’s a nice quick and easy way to visualise a
Markov chain as you’re working on it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/drvinceknight/unpeudemath/blob/gh-pages/assets/code/Visualising%20Markov%20Chains.ipynb&quot;&gt;Here is a Jupyter notebook with all the above
code&lt;/a&gt;.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-US">
		<title type="html">Google Summer of Code 2015: outcomes</title>
		<link href="http://matroidunion.org/?p=1550"/>
		<id>http://matroidunion.org/?p=1550</id>
		<updated>2015-10-21T15:55:57+00:00</updated>
		<content type="html">&lt;p&gt;&lt;em&gt;Guest post by &lt;a href=&quot;http://web.engr.illinois.edu/~chaoxu3/&quot;&gt;Chao Xu&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the summer, I have extended the SAGE code base for matroids for Google Summer of Code. This post shows a few example of it&amp;#8217;s new capabilities.&lt;/p&gt;
&lt;h1&gt;Connectivity&lt;/h1&gt;
&lt;p&gt;Let $M$ be a matroid with groundset $E$ and rank function $r$. A partition of the groundset $\{E_1,E_2\}$ is a $m$-separation if $|E_1|,|E_2|\geq m$ and $r(E_1)+r(E_2)-r(E)\leq m-1$. $M$ is called $k$-connected if there is no $m$-separation for any $m  k$. 

The Fano matroid is an example of $3$-connected matroid.


&lt;div class=&quot;sage1&quot;&gt;&lt;/div&gt;
&lt;p&gt;The Fano matroid is not $4$-connected. Using the &lt;code&gt;certificate=True&lt;/code&gt; field, we can also output a certificate that verify its not-$4$-connectness. The certificate is a $m$-separation where $m  4$. Since we know Fano matroid is $3$-connected, we know the output should be a $3$-separation.


&lt;div class=&quot;sage1&quot;&gt;&lt;/div&gt;
&lt;p&gt;We also have a method for deciding $k$-connectivity, and returning a certificate. &lt;/p&gt;
&lt;div class=&quot;sage1&quot;&gt;&lt;/div&gt;
&lt;p&gt;There are 3 algorithms for $3$-connectivity. One can pass it as a string to the &lt;code&gt;algorithm&lt;/code&gt; field of &lt;code&gt;is_3connected&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&quot;bridges&quot;&lt;/code&gt;: The $3$-connectivity algorithm Bixby and Cunningham. [BC79] &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&quot;intersection&quot;&lt;/code&gt;: the matroid intersection based algorithm&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&quot;shifting&quot;&lt;/code&gt;: the shifting algorithm. [Raj87] &lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;The default algorithm is the bridges based algorithm.&lt;/p&gt;
&lt;p&gt;The following is an example to compare the running time of each approach. &lt;/p&gt;
&lt;div class=&quot;sage1&quot;&gt;&lt;/div&gt;
&lt;p&gt;The new bridges based algorithm is much faster than the previous algorithm in SAGE.&lt;/p&gt;
&lt;p&gt;For $4$-connectivity, we tried to use the shifting approach, which has an running time of $O(n^{4.5}\sqrt{\log n})$, where $n$ is the size of the groundset. The intuitive idea is fixing some elements and tries to grow a separator. In theory, the shifting algorithm should be fast if the graph is not $4$-connected, as we can be lucky and find a separator quickly. In practice, it is still slower than the optimized matroid intersection based algorithm, which have a worst case $O(n^5)$ running time. There might be two reasons: the matroid intersection actually avoids the worst case running time in practice, and the shifting algorithm is not well optimized.&lt;/p&gt;
&lt;div class=&quot;sage1&quot;&gt;&lt;/div&gt;
&lt;h1&gt;Matroid intersection and union&lt;/h1&gt;
&lt;p&gt;There is a new implementation of matroid intersection algorithm based on Cunningham&amp;#8217;s paper [Cun86].  For people who are familiar with blocking flow algorithms for maximum flows, this is the matroid version. The running time is $O(\sqrt{p}rn)$, where $p$ is the size of the maximum common independent set, $r$ is the rank, and $n$ is the size of the groundset. Here is an example of taking matroid intersection between two randomly generated linear matroids.&lt;/p&gt;
&lt;div class=&quot;sage1&quot;&gt;&lt;/div&gt;
&lt;p&gt;Using matroid intersection, we have preliminary support for matroid union and matroid sum. Both construction takes a list of matroids.&lt;/p&gt;
&lt;p&gt;The matroid sum operation takes disjoint union of the groundsets. Hence the new ground set will have the first coordinate indicating which matroid it comes from, and second coordinate indicate the element in the matroid. &lt;/p&gt;
&lt;div class=&quot;sage1&quot;&gt;&lt;/div&gt;
&lt;p&gt;Here is an example of matroid union of two copies of uniform matroid $U(1,5)$ and $U(2,5)$. The output is isomorphic to $U(4,5)$.&lt;/p&gt;
&lt;div class=&quot;sage1&quot;&gt;&lt;/div&gt;
&lt;p&gt;One of the application of matroid union is &lt;a href=&quot;https://en.wikipedia.org/wiki/Matroid_partitioning&quot;&gt;matroid partitioning&lt;/a&gt;, which partitions the groundset of the matroid to minimum number of independent sets. Here is an example that partitions the edges of a graph to minimum number of forests. &lt;/p&gt;
&lt;div class=&quot;sage1&quot;&gt;&lt;/div&gt;
&lt;h1&gt;Acknowledgements&lt;/h1&gt;
&lt;p&gt;I would like to thank my mentors Stefan van Zwam and Michael Welsh for helping me with the project. I also like to thank Rudi Pendavingh, who have made various valuable suggestions and implemented many optimizations himself. &lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;[BC79] R.E Bixby, W.H Cunningham. &lt;em&gt;Matroids, graphs and 3-connectivity&lt;/em&gt;, J.A Bondy, U.S.R Murty (Eds.), Graph Theory and Related Topics, Academic Press, New York (1979), pp. 91-103.&lt;/p&gt;
&lt;p&gt;[Raj87] Rajan, A. (1987). &lt;em&gt;Algorithmic applications of connectivity and related topics in matroid theory&lt;/em&gt;. Northwestern university.&lt;/p&gt;
&lt;p&gt;[Cun86] William H Cunningham. 1986. &lt;em&gt;Improved bounds for matroid partition and intersection algorithms&lt;/em&gt;. SIAM J. Comput. 15, 4 (November 1986), 948-957.&lt;/p&gt;</content>
		<author>
			<name>The Matroid Union</name>
			<uri>http://matroidunion.org</uri>
		</author>
		<source>
			<title type="html">Sage – The Matroid Union</title>
			<subtitle type="html">A blog for and by the matroid community</subtitle>
			<link rel="self" href="http://matroidunion.org/?feed=rss2&amp;cat=7"/>
			<id>http://matroidunion.org/?feed=rss2&amp;cat=7</id>
			<updated>2016-03-14T08:30:16+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Getting in to reddit</title>
		<link href="http://drvinceknight.github.io/unpeudemath/other/2015/10/17/Getting-in-to-reddit/"/>
		<id>http://drvinceknight.github.io/unpeudemath/other/2015/10/17/Getting-in-to-reddit/</id>
		<updated>2015-10-17T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;&lt;a href=&quot;http://vknight.org/unpeudemath/other/2014/10/04/podcasts-i-listen-to/&quot;&gt;In a previous
post&lt;/a&gt; I wrote
about the podcasts I listen to. I really need to update that as things
have changed but this post is not the update. In this post I’ll discuss
some of my early thoughts as I get in to
&lt;a href=&quot;https://www.reddit.com/&quot;&gt;reddit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My first real encounter of reddit was when
&lt;a href=&quot;https://www.reddit.com/user/i_feel_shy&quot;&gt;u/I_feel_shy&lt;/a&gt; posted a link
&lt;a href=&quot;https://www.reddit.com/r/ClashOfClans/comments/25acxw/miscsomeone_please_explain_this_in_simple_words/&quot;&gt;to my blogpost about Clash of
clans&lt;/a&gt;.
I create an account to be able to answer some questions on there but
never really stayed put.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I think that one of the reasons for this was that I didn’t stumble on
a mobile app I liked.&lt;/strong&gt; This changed when
&lt;a href=&quot;https://twitter.com/MKBHD&quot;&gt;@mkbhd&lt;/a&gt; posted a video mentioning that his
app of choice was &lt;a href=&quot;https://play.google.com/store/apps/details?id=free.reddit.news&amp;hl=en_GB&quot;&gt;Relay for
reddit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So for about 2 months or so I’ve been using reddit regularly, and I
have to admit that it’s become one of the first things I check whenever I get a chance. I think it’s the simplicity of it all that I like.&lt;/p&gt;

&lt;p&gt;Here are the subreddits I subscribe to (please do let me know which
ones I’m missing):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Android/&quot;&gt;r/android&lt;/a&gt;: I use an android phone and this seems to suggest neat apps, and let me know what’s coming up.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/AskAcademia/&quot;&gt;r/AskAcademic&lt;/a&gt;: this has a
variety of interesting discussions about Academia, with questions from
students and faculty.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/askscience/&quot;&gt;r/askscience&lt;/a&gt;: a nice reddit
with interesting questions that pop up, a neat one recently was &lt;a href=&quot;https://www.reddit.com/r/askscience/comments/3o82rc/why_cant_i_weigh_the_earth_by_putting_a_scale/&quot;&gt;“why
can’t I weigh the earth by putting a scale upside
down”&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/dataisbeautiful/&quot;&gt;r/dataisbeautiful&lt;/a&gt;: cool
data related stuff :)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/education/&quot;&gt;r/education&lt;/a&gt;: am still
undecided as to whether or not I find this a valuable subreddit. I will
wait and see…&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/GAMETHEORY/&quot;&gt;r/GAMETHEORY&lt;/a&gt;: not a very busy
subbredit but everynow and then something interesting comes up.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/learnpython/&quot;&gt;r/learnpython&lt;/a&gt;: I’ve only
just joined this one. Hoping I might be able to help with some
questions but also see some neat resources etc…&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/math/&quot;&gt;r/math&lt;/a&gt;: one of the mathematics
subreddits.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/mathematics/&quot;&gt;r/mathematics&lt;/a&gt;: another one :)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/nottheonion/&quot;&gt;r/nottheonion&lt;/a&gt;: if you
haven’t heard of &lt;a href=&quot;http://www.theonion.com/&quot;&gt;the onion&lt;/a&gt; go take a look
and then this subreddit will make a lot of sense…&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Python/&quot;&gt;r/Python&lt;/a&gt;: I learn a lot from
scrolling through this…&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/rugbyunion/&quot;&gt;r/rugbyunion&lt;/a&gt;: I like rugby.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/sagemath/&quot;&gt;r/sagemath&lt;/a&gt;: this is the
subreddit for &lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sagemath&lt;/a&gt;, it’s not terribly
active but every now and then something cool pops up.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/science/&quot;&gt;r/science&lt;/a&gt;: a general subreddit
about science. Interesting things usually pop up here.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/sysor/&quot;&gt;r/sysor&lt;/a&gt;: this is the subreddit for
Operational Research (etc…). I’ve pied up and answered a question
here but otherwise have learnt a few neat things that have been going
on.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/vim/&quot;&gt;r/vim&lt;/a&gt;: vim is my editor of choice
and it’s nice to see things trickle through here. Today I read about
the &lt;a href=&quot;https://github.com/junegunn/goyo.vim&quot;&gt;Goyo&lt;/a&gt; plugin which I’m
actually using whilst writing this post, on there.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I’m pretty sure I’m missing out a bunch of interesting subreddits so please let me know in the comments :)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’m also still trying to figure out if reddit is a social network or
not. The main reason for this is that I’m not sure if it’s cool to post
links to my own blog posts on there or not. I’ve done this one or twice
but ams still trying to figure out the correct protocol. In the mean
time I continue to read, vote and sometimes comment. It’s a nice place
(I know reddit does not have this reputation but perhaps I’m just
staying in the right places…).&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Getting your first lectureship</title>
		<link href="http://drvinceknight.github.io/unpeudemath/academia/2015/10/10/Getting-your-first-lectureship/"/>
		<id>http://drvinceknight.github.io/unpeudemath/academia/2015/10/10/Getting-your-first-lectureship/</id>
		<updated>2015-10-10T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;On Wednesday I was invited to participate in a Webinar entitled “Getting your
first lecturship”. This was organised by &lt;a href=&quot;http://www.cardiff.ac.uk/&quot;&gt;Cardiff
University&lt;/a&gt;’s &lt;a href=&quot;http://www.cardiff.ac.uk/ugc/news&quot;&gt;graduate
college&lt;/a&gt; (UGC). The format included an
overview of recent findings from a survey conducted by the Association of
Careers Advisory Services and then a discussion including &lt;a href=&quot;https://twitter.com/SMCoulombeau&quot;&gt;Dr Sophie
Coulombeau&lt;/a&gt; and &lt;a href=&quot;http://www.bris.ac.uk/sml/people/claire-l-shaw/index.html&quot;&gt;Dr Claire
Shaw&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can see the recording below:&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
        
    
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cardiff.ac.uk/ugc/archives/8019&quot;&gt;Here is the UGC page&lt;/a&gt; which
includes a pdf with a variety of hopefully useful resources.&lt;/p&gt;

&lt;p&gt;Sophie and Claire had some excellent advice and I would really recommend
watching the video if you are at a stage of your academic career (PhD,
postdoc…) and thinking of getting a lectureship in the United Kingdom (it’s
probably useful in other countries also, but we concentrated on particularities
of the UK).&lt;/p&gt;

&lt;p&gt;Some of the particular points that stayed with me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Self care: it’s very easy to let academia do a lot of damage. This is not
something I’m particularly good at myself but stress and mental health is
something that you should always keep an eye on: at whatever stage of your
career you are.&lt;/li&gt;
  &lt;li&gt;Selling the whole narrative: at interview it’s important to find a way to think
about what a particular post is looking for and how/why you fit that particular
role.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What was also interesting was that we all seemed to agree that we were lucky. This was certainly the case with me, circumstances were just right and I was very lucky to have leadership that gave me a wealth of opportunities.&lt;/p&gt;

&lt;p&gt;On a slightly related note, as I was writing this post, I thought about &lt;a href=&quot;https://twitter.com/tdhopper&quot;&gt;Tim
Hopper’s&lt;/a&gt; great resource
&lt;a href=&quot;http://shouldigetaphd.com/&quot;&gt;shouldigetaphd.com/&lt;/a&gt;. If you are thinking about
doing a PhD at all, perhaps take a look at the awesome case stories there…&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">What is SageMath's strategy?</title>
		<link href="http://sagemath.blogspot.com/2015/09/what-is-sagemaths-strategy.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-8163352558343336284</id>
		<updated>2015-09-30T21:56:21+00:00</updated>
		<content type="html">Here is &lt;a href=&quot;http://www.sagemath.org/&quot;&gt;SageMath&lt;/a&gt;'s strategy, or at least what my strategy toward SageMath has been for the last 5 years.&lt;br /&gt;&lt;h1 id=&quot;diagnose-the-problem&quot;&gt;Diagnose the problem&lt;/h1&gt;&lt;strong&gt;Statement of problem:&lt;/strong&gt; SageMath is not growing.&lt;br /&gt;&lt;h3 id=&quot;justification&quot;&gt;Justification&lt;/h3&gt;Facts: Growth in the number of active users [1] of SageMath has stalled since about 2011 (as defined by Google analytics on sagemath.org). From 2008 to 2011, year-on-year growth was about 50%, which isn't great. However, from 2011 to now, year-on-year growth is slightly less than 0%. It was maybe -10% from 2013 to 2014. Incidentally, number of monthly active users of sagemath.org is about 68,652 right now, but the raw number isn't as import as the year-to-year rate of change.&lt;br /&gt;&lt;br /&gt;I set an overall mission statement for the Sage project at the outset, which was is to be a viable alternative to Magma, Maple, Mathematica and Matlab. Being a &quot;viable alternative&quot; is something that holds or doesn't for specific people. A useful measure of this mission then is whether or not people use Sage. This is a different metric than trying to argue from &quot;first principles&quot; by making a list of features of each system, comparing benchmarks, etc.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-WXt0yL0eZn0/Vgy7ICAimcI/AAAAAAABWGs/MmOurNhORYg/s1600/Screen%2BShot%2B2015-09-30%2Bat%2B11.00.28%2BAM.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;241&quot; src=&quot;http://1.bp.blogspot.com/-WXt0yL0eZn0/Vgy7ICAimcI/AAAAAAABWGs/MmOurNhORYg/s400/Screen%2BShot%2B2015-09-30%2Bat%2B11.00.28%2BAM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-shXxtJeO9fY/Vgy7IMVWIcI/AAAAAAABWGo/nLJu-40-9Ns/s1600/Screen%2BShot%2B2015-09-30%2Bat%2B10.59.32%2BAM.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;245&quot; src=&quot;http://4.bp.blogspot.com/-shXxtJeO9fY/Vgy7IMVWIcI/AAAAAAABWGo/nLJu-40-9Ns/s400/Screen%2BShot%2B2015-09-30%2Bat%2B10.59.32%2BAM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-WXt0yL0eZn0/Vgy7ICAimcI/AAAAAAABWGs/MmOurNhORYg/s1600/Screen%2BShot%2B2015-09-30%2Bat%2B11.00.28%2BAM.png&quot;&gt;&lt;br /&gt;&lt;/a&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-WXt0yL0eZn0/Vgy7ICAimcI/AAAAAAABWGs/MmOurNhORYg/s1600/Screen%2BShot%2B2015-09-30%2Bat%2B11.00.28%2BAM.png&quot;&gt;&lt;br /&gt;&lt;/a&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-WXt0yL0eZn0/Vgy7ICAimcI/AAAAAAABWGs/MmOurNhORYg/s1600/Screen%2BShot%2B2015-09-30%2Bat%2B11.00.28%2BAM.png&quot;&gt;&lt;br /&gt;&lt;/a&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h1 id=&quot;guiding-policies&quot;&gt;Guiding policies&lt;/h1&gt;&lt;strong&gt;Statement of policy:&lt;/strong&gt; focus on undergraduate students in STEM courses (science, tech, engineering, math)&lt;br /&gt;&lt;h3 id=&quot;justification-1&quot;&gt;Justification&lt;/h3&gt;In order for Sage to start growing again, identify groups of people that are not using Sage. Then decide, for each of these groups, who might find value in using Sage, especially if we are able to put work into making it easier for them to benefit from Sage. This is something to re-evaluate periodically. In itself, this is very generic -- it's what any software project that wishes to grow should do. The interesting part is the details.&lt;br /&gt;Some big groups of potential future users of Sage, who use Sage very little now, include&lt;br /&gt;&lt;ul&gt;&lt;li&gt;employees/engineers in various industries (from defense contractors, to finance, to health care to &quot;data science&quot;).&lt;/li&gt;&lt;li&gt;researchers in area of mathematics where Sage is currently not popular&lt;/li&gt;&lt;li&gt;undergraduate students in STEM courses (science, tech, engineering, math)&lt;/li&gt;&lt;/ul&gt;I think by far the most promising group is &quot;undergraduate students in STEM courses&quot;. In many cases they use no software at all or are unhappy with what they do use. They are extremely cost sensitive. Open source provides a unique advantage in education because it is less expensive than closed source software, and having access to source code is something that instructors consider valuable as part of the learning experience. Also, state of the art performance, which often requires enormous dedicated for-pay work, is frequently not a requirement.&lt;br /&gt;&lt;h1 id=&quot;actions&quot;&gt;Actions&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;(a) Make access to Sage as easy as possible.&lt;/li&gt;&lt;li&gt;(b) Encourage the creation of educational resources (books, tutorials, etc.) that make using Sage for particular courses as easy as possible.&lt;/li&gt;&lt;li&gt;(c) Implement missing functionality in Sage that is needed in support of undergraduate teaching.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3 id=&quot;justification-2&quot;&gt;Justification&lt;/h3&gt;Why don't more undergraduates use Sage? For the most part, students use what they are told to use by their instructors. So why don't instructors chose to use Sage? (a) Sage is not trivial to install (in fact it is incredibly hard to install), (b) There are limited resources (books, tutorials, course materials, etc.) for making using Sage really easy, (c) Sage is missing key functionality needed in support undergraduate teaching.&lt;br /&gt;&lt;br /&gt;Regarding (c), in 2008 Sage was utterly useless for most STEM courses. However, over the years things changed for the better, due to the hard work of Rob Beezer, Karl Dieter, Burcin Erocal, and many others. Also, for quite a bit of STEM work, the numerical Python ecosystem (and/or R) provides much of what is needed, and both have evolved enormously in recent years. They are all usable from Sage, and making such use &lt;em&gt;easier&lt;/em&gt; should be an extremely high priority. Related -- Bill Hart wrote &quot;I recently sat down with some serious developers and we discussed symbolics in Sage (which I know nothing about). They argued that Sage is not a viable contender in that area, and we discussed some of the possible reasons for that. &quot; The reason is that the symbolic functionality in Sage is motivated by making Sage useful for undergraduate teaching; it has nothing to do with what serious developers in symbolics would care about.&lt;br /&gt;&lt;br /&gt;Regarding (b), an NSF (called &quot;&lt;a href=&quot;http://utmost.aimath.org/&quot;&gt;UTMOST&lt;/a&gt;&quot;) helped in this direction... Also, Gregory Bard wrote &lt;a href=&quot;http://www.gregorybard.com/SAGE.html&quot;&gt;&quot;Sage for undergraduates&quot;&lt;/a&gt;, which is &lt;em&gt;exactly&lt;/em&gt; the sort of thing we should be very strongly encouraging. This is a book that is published by the AMS and is also freely available. And it squarely addresses exactly this audience. Similarly, &lt;a href=&quot;http://sagebook.gforge.inria.fr/&quot;&gt;the French book that Paul Zimmerman edited&lt;/a&gt; is fantastic for France. Let's make an order of magnitude similar resources along these lines! Let's make vastly more tutorials and reference manuals that are &quot;for undergraduates&quot;.&lt;br /&gt;&lt;br /&gt;Regarding (a), in my opinion the most viable option that fits with current trends in software is a full web application that provides access to Sage. &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud &lt;/a&gt;is what I've been doing in this direction, and it's been growing since 2013 at over 100% year on year, and much is in place so that it could scale up to more users. It still has a huge way to go regarding user friendliness, and it is still &lt;em&gt;losing money every month&lt;/em&gt;. But it is a concrete action toward which nontrivial effort has been invested, and it has the potential to solve problem (a) for a large number of potential STEM users. College students very often have extremely good bandwidth coupled with cheap weak laptops, so a web application is the natural solution for them.&lt;br /&gt;&lt;br /&gt;Though much has been done to make Sage easier to install on individual computers, it's exactly the sort of problem that money could help solve, but for which we have little money. I'm optimistic that &lt;a href=&quot;http://opendreamkit.org/&quot;&gt;OpenDreamKit&lt;/a&gt; will do something in this direction.&lt;br /&gt;&lt;br /&gt;[I've made this post motivated by the&lt;a href=&quot;https://groups.google.com/forum/#!topic/sage-devel/enoyWPdYK_g&quot;&gt; discussion in this thread.&lt;/a&gt;&amp;nbsp; Also, I used the framework from &lt;a href=&quot;http://www.amazon.com/Good-Strategy-Bad-Difference-Matters/dp/0307886239&quot;&gt;this book&lt;/a&gt;.]</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">SageMathCloud's poor user retention rate</title>
		<link href="http://sagemath.blogspot.com/2015/09/sagemathclouds-poor-user-retention-rate.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-8312554401315622132</id>
		<updated>2015-09-22T19:52:14+00:00</updated>
		<content type="html">&lt;h3&gt;Poor retention rate&lt;/h3&gt;&lt;span&gt;Many people try &lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt;, but only a small percentage stick around. &amp;nbsp;&lt;b&gt;I definitely don't know why. &lt;/b&gt;Recent SageMathCloud rates are below 4%:&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;b&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-5B6ymNMEjAs/VgIFyIi9QXI/AAAAAAABWDE/iTj_M6ejo0A/s1600/Screen%2BShot%2B2015-09-22%2Bat%2B6.51.52%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;186&quot; src=&quot;http://2.bp.blogspot.com/-5B6ymNMEjAs/VgIFyIi9QXI/AAAAAAABWDE/iTj_M6ejo0A/s400/Screen%2BShot%2B2015-09-22%2Bat%2B6.51.52%2BPM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-cTbDI1IZWUY/VgIIn3n9sTI/AAAAAAABWDY/XJ3ihbbh7sg/s1600/Screen%2BShot%2B2015-09-22%2Bat%2B7.03.57%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;161&quot; src=&quot;http://3.bp.blogspot.com/-cTbDI1IZWUY/VgIIn3n9sTI/AAAAAAABWDY/XJ3ihbbh7sg/s400/Screen%2BShot%2B2015-09-22%2Bat%2B7.03.57%2BPM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;span&gt;&lt;b&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;h2&gt;Is it performance?&lt;/h2&gt;&lt;span&gt;&lt;b&gt;Question:&amp;nbsp;&lt;/b&gt;Are the people who try SMC discouraged by&lt;/span&gt;&lt;span&gt;&amp;nbsp;performance issues?&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;I think it's unlikely many users are leaving due to hitting noticeable performance issues&lt;/span&gt;&lt;span&gt;.&amp;nbsp; I think I would know, since there's a huge bold messages all over&amp;nbsp;&lt;/span&gt;&lt;span&gt;the site that say &quot;Email&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;mailto:help@sagemath.com&quot;&gt;help@sagemath.com&lt;/a&gt;&lt;span&gt;: in case of problems, do&amp;nbsp;&lt;/span&gt;&lt;span&gt;not hesitate to immediately email us. We want to know if anything is&amp;nbsp;&lt;/span&gt;&lt;span&gt;broken!&quot;&lt;/span&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;In the past when there have been performance&amp;nbsp;&lt;/span&gt;&lt;span&gt;or availability issues -- which of course do happen sometimes due to&amp;nbsp;&lt;/span&gt;&lt;span&gt;bugs or whatever -- I quickly get a lot of emails.&amp;nbsp; I haven't got&amp;nbsp;&lt;/span&gt;&lt;span&gt;anything that mentioned performance recently.&amp;nbsp; And usage of SMC is at&amp;nbsp;&lt;/span&gt;&lt;span&gt;an all time high: in the last day there were &lt;a href=&quot;https://cloud.sagemath.com/7561f68d-3d97-4530-b97e-68af2fb4ed13/raw/stats.html&quot;&gt;676 projects created and&amp;nbsp;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://cloud.sagemath.com/7561f68d-3d97-4530-b97e-68af2fb4ed13/raw/stats.html&quot;&gt;3500 projects modified&lt;/a&gt; -- which is significantly higher than ever&amp;nbsp;&lt;/span&gt;&lt;span&gt;before since the site started.&amp;nbsp; It's also about 2.2x what we had&amp;nbsp;&lt;/span&gt;&lt;span&gt;exactly a year ago. &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Is it the user interface?&lt;/h2&gt;&lt;span&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Question: &lt;/b&gt;Is the SMC user interface highly discouraging and difficult to use?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;My current best guess is that the main reason for attrition of our users is that&amp;nbsp;&lt;/span&gt;&lt;span&gt;they do not understand how to actually&amp;nbsp;&lt;i&gt;use&lt;/i&gt;&amp;nbsp;&lt;a href=&quot;https://cloud.sagemath.com/&quot; target=&quot;_blank&quot;&gt;SageMathCloud&lt;/a&gt;&amp;nbsp;(SMC), and the interface doesn't help at all. &amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;I think a large number of users get massively confused and lost when trying&amp;nbsp;&lt;/span&gt;&lt;span&gt;to use SMC. &amp;nbsp; &amp;nbsp;It's pretty obvious this happens if you just watch what they do... &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;In&amp;nbsp;&lt;/span&gt;&lt;span&gt;order to have a foundation on which to fix that, the plan I came up with in&amp;nbsp;&lt;/span&gt;&lt;span&gt;May was to at least fix&amp;nbsp;&lt;/span&gt;&lt;span&gt;the frontend implementation so that it would be &amp;nbsp;&lt;/span&gt;&lt;span&gt;much easier to do&amp;nbsp;&lt;/span&gt;&lt;span&gt;development with -- by switching from a confusing &amp;nbsp;&lt;/span&gt;&lt;span&gt;mess of jQuery soup,&amp;nbsp;&lt;/span&gt;&lt;span&gt;e.g., 2012-style single page app development --&amp;nbsp;&lt;/span&gt;&lt;span&gt;to Facebook's new&amp;nbsp;&lt;/span&gt;&lt;span&gt;React.js approach.&amp;nbsp; This is basically half done and &lt;/span&gt;&lt;span&gt;deployed, and I'm&amp;nbsp;&lt;/span&gt;&lt;span&gt;going to work very hard for a while to finish it. &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;Once it's done,&amp;nbsp;&lt;/span&gt;&lt;span&gt;it's going to be much easier to improve the UI to &amp;nbsp;&lt;/span&gt;&lt;span&gt;make it more user&amp;nbsp;&lt;/span&gt;&lt;span&gt;friendly.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Is it the open source software?&lt;/h2&gt;&lt;span&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Question: &lt;/b&gt;Is open source mathematical software not sufficiently user friendly?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;Fixing the UI probably won't help so much with improving the underlying &lt;i&gt;&lt;b&gt;open&amp;nbsp;&lt;/b&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;&lt;i&gt;&lt;b&gt;source mathematical software &lt;/b&gt;&lt;/i&gt;to be friendly though.&amp;nbsp; &amp;nbsp; This is a massive, deep, and&amp;nbsp;&lt;/span&gt;&lt;span&gt;very difficult problem, and might be why growth of Sage stopped in 2011:&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-JqBKt-wuS5g/VgIGxB0yKfI/AAAAAAABWDM/okpvMCbWJ-Q/s1600/Screen%2BShot%2B2015-09-22%2Bat%2B6.55.56%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;161&quot; src=&quot;http://4.bp.blogspot.com/-JqBKt-wuS5g/VgIGxB0yKfI/AAAAAAABWDM/okpvMCbWJ-Q/s320/Screen%2BShot%2B2015-09-22%2Bat%2B6.55.56%2BPM.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://sagemath.org/&quot;&gt;SageMath&lt;/a&gt; (and maybe Numpy/Scipy/IPython/etc.) are not&amp;nbsp;&lt;/span&gt;&lt;span&gt;as user friendly as Mathematica/Matlab&lt;/span&gt;&lt;span&gt;. &amp;nbsp; I think they could be even more user friendly, but it's highly&amp;nbsp;&lt;/span&gt;&lt;span&gt;unlikely as long as the developers are mostly working on SageMath in their&amp;nbsp;&lt;/span&gt;&lt;span&gt;spare time as part of advanced research projects (which have little&amp;nbsp;&lt;/span&gt;&lt;span&gt;to do with user friendliness). &amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Analyzing data about mistakes, frustation, and issues people&amp;nbsp;&lt;/span&gt;&lt;span&gt;actually have with &amp;nbsp;&lt;/span&gt;&lt;span&gt;real worksheets and notebooks could also help a lot&amp;nbsp;&lt;/span&gt;&lt;span&gt;with directing our &amp;nbsp;&lt;/span&gt;&lt;span&gt;effort in improving Sage/Python/Numpy/etc to be&amp;nbsp;&lt;/span&gt;&lt;span&gt;more user friendly.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Is it support?&lt;/h2&gt;&lt;span&gt;&lt;div&gt;&lt;b&gt;Question: &lt;/b&gt;Are users frustrated by lack of interactive support?&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;Having integrated high-quality support for users inside SMC, in which we help&amp;nbsp;&lt;/span&gt;&lt;span&gt;them write code, answer questions, etc., could help with&amp;nbsp;&lt;/span&gt;&lt;span&gt;retention. &amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Why don't you use SageMathCloud?&lt;/h2&gt;&lt;span&gt;I've been&amp;nbsp;&lt;/span&gt;&lt;span&gt;watching this &amp;nbsp;&lt;/span&gt;&lt;span&gt;stuff closely for over a decade most waking moments, and&amp;nbsp;&lt;/span&gt;&lt;span&gt;everybody&amp;nbsp;&lt;/span&gt;&lt;span&gt;likes to complain to me. &amp;nbsp; &amp;nbsp;Why don't &lt;b&gt;you&lt;/b&gt; use SageMathCloud? &amp;nbsp; Tell me: &amp;nbsp;&lt;a href=&quot;mailto:wstein@sagemath.com&quot;&gt;wstein@sagemath.com&lt;/a&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">There are 13.366.431.646 solutions to the Quantumino game</title>
		<link href="http://www.slabbe.org/blogue/2015/09/there-are-13.366.431.646-solutions-to-the-quantumino-game"/>
		<id>http://www.slabbe.org/blogue/2015/09/there-are-13.366.431.646-solutions-to-the-quantumino-game</id>
		<updated>2015-09-21T14:55:00+00:00</updated>
		<content type="html">&lt;div class=&quot;document&quot;&gt;
&lt;p&gt;Some years ago, I wrote &lt;a class=&quot;reference external&quot; href=&quot;http://doc.sagemath.org/html/en/reference/games/sage/games/quantumino.html&quot;&gt;code&lt;/a&gt; in Sage to solve the Quantumino puzzle. I also
used it to make a one-minute &lt;a class=&quot;reference external&quot; href=&quot;http://vimeo.com/35348052&quot;&gt;video&lt;/a&gt; illustrating the Dancing links algorithm
which I am proud to say it is now part of the &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Dancing_Links&quot;&gt;Dancing links&lt;/a&gt; wikipedia page.&lt;/p&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://www.familygamesamerica.com/mainsite/consumers/productview.php?pro_id=274&quot;&gt;&lt;img alt=&quot;/Files/2015/Quantumino.png&quot; src=&quot;http://www.slabbe.org/Files/2015/Quantumino.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;Let me recall that the goal of the Quantumino puzzle is to fill a \(2\times
5\times 8\) box with 16 out of 17 three-dimensional pentaminos. After writing
the sage code to solve the puzzle, one question was left: how many solutions
are there? Is the &lt;a class=&quot;reference external&quot; href=&quot;http://familygamesamerica.com/mainsite/consumers/productview.php?pro_id=274&quot;&gt;official website&lt;/a&gt; realist or very prudent when they say
that &lt;em&gt;there are over 10.000 potential solutions&lt;/em&gt;? Can it be computed in hours?
days? months? years? The only thing I knew was that the following computation
(letting the 0-th pentamino aside) never finished on my machine:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sage.games.quantumino&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QuantuminoSolver&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QuantuminoSolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_of_solutions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# long time :)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Since I spent already too much time on this side-project, I decided in 2012 to
stop investing any more time on it and to really focus on finishing writing my
thesis.&lt;/p&gt;
&lt;p&gt;So before I finish writing my thesis, I knew that the computation was not going
to take a light-year, since I was able to finish the computation of the number
of solutions when the 0-th pentamino is put aside and when one pentamino is
pre-positioned somewhere in the box. That computation completed in 4 hours on
my old laptop and gave about 5 millions solutions. There are 17 choices of
pentatminos to put aside, there are 360 distinct positions of that pentamino in
the box, so I estimated the number of solution to be something like
\(17\times 360\times 5000000 = 30 \times 10^9\). Most importantly, I
estimated the computation to take \(17\times 360\times 4= 24480\) hours or
1020 days. Therefore, I knew I could not do it on my laptop.&lt;/p&gt;
&lt;p&gt;But last year, I received an email from the designer of the Quantumino puzzle:&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;-------- Message transféré --------
Sujet : quantumino
Date : Tue, 09 Dec 2014 13:22:30 +0100
De : Nicolaas Neuwahl
Pour : Sebastien Labbe

hi sébastien labbé,

i'm the designer of the quantumino puzzle.
i'm not a mathematician, i'm an architect. i like mathematics.
i'm quite impressed to see the sage work on quantumino, also i have not the
knowledge for full understanding.

i have a question for you - can you tell me HOW MANY different quantumino-
solutions exist?

ty and bye

nicolaas neuwahl
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;This summer was a good timing to launch the computation on my beautiful Intel®
Core™ i5-4590 CPU &amp;#64; 3.30GHz × 4 at Université de Liège. First, I improved the
Sage code to allow a parallel computation of number of solutions in the dancing
links code (&lt;a class=&quot;reference external&quot; href=&quot;http://trac.sagemath.org/ticket/18987&quot;&gt;#18987&lt;/a&gt;, merged in a Sage 6.9.beta6). Secondly, we may remark
that each tiling of the \(2\times 5\times 8\) box can be rotated in order
to find 3 other solutions. It is possible to gain a factor 4 by avoiding to
count 4 times the same solution up to rotations (&lt;a class=&quot;reference external&quot; href=&quot;http://trac.sagemath.org/ticket/19107&quot;&gt;#19107&lt;/a&gt;, still needs work
from myself). Thanks to Vincent Delecroix for doing the review on both ticket.
Dividing the estimated 1024 days of computation needed by a factor \(4\times
4=16\) gives an approximation of 64 days to complete the computation. Two
months, just enough to be tractable!&lt;/p&gt;
&lt;p&gt;With those two tickets (some previous version to be honest) on top of sage-6.8,
I started the computation on August 4th and the computation finished last week
on September 18th for a total of 45 days. The computation was stopped only once
on September 8th (I forgot to close firefox and thunderbird that night...).&lt;/p&gt;
&lt;p&gt;The number of solutions and computation time for each pentamino put aside
together with the first solution found is shown in the table below.  We remark
that some values are equal when the aside pentaminoes are miror images
(why!?:).&lt;/p&gt;
&lt;table border=&quot;1&quot; class=&quot;docutils&quot;&gt;
&lt;colgroup&gt;
&lt;col width=&quot;50%&quot; /&gt;
&lt;col width=&quot;50%&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt=&quot;/Files/2015/b0.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b0.png&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;/Files/2015/b1.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b1.png&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;634 900 493  solutions&lt;/td&gt;
&lt;td&gt;634 900 493  solutions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2 days, 6:22:44.883358&lt;/td&gt;
&lt;td&gt;2 days, 6:19:08.945691&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt=&quot;/Files/2015/b2.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b2.png&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;/Files/2015/b3.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b3.png&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;509 560 697  solutions&lt;/td&gt;
&lt;td&gt;509 560 697  solutions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2 days, 0:01:36.844612&lt;/td&gt;
&lt;td&gt;2 days, 0:41:59.447773&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt=&quot;/Files/2015/b4.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b4.png&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;/Files/2015/b5.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b5.png&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;628 384 422  solutions&lt;/td&gt;
&lt;td&gt;628 384 422  solutions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2 days, 7:52:31.459247&lt;/td&gt;
&lt;td&gt;2 days, 8:44:49.465672&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt=&quot;/Files/2015/b6.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b6.png&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;/Files/2015/b7.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b7.png&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1 212 362 145  solutions&lt;/td&gt;
&lt;td&gt;1 212 362 145  solutions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3 days, 17:25:00.346627&lt;/td&gt;
&lt;td&gt;3 days, 19:10:02.353063&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt=&quot;/Files/2015/b8.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b8.png&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;/Files/2015/b9.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b9.png&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;197 325 298  solutions&lt;/td&gt;
&lt;td&gt;556 534 800  solutions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;22:51:54.439932&lt;/td&gt;
&lt;td&gt;1 day, 19:05:23.908326&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt=&quot;/Files/2015/b10.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b10.png&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;/Files/2015/b11.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b11.png&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;664 820 756  solutions&lt;/td&gt;
&lt;td&gt;468 206 736  solutions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2 days, 8:48:54.767662&lt;/td&gt;
&lt;td&gt;1 day, 20:14:56.014557&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt=&quot;/Files/2015/b12.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b12.png&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;/Files/2015/b13.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b13.png&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1 385 955 043  solutions&lt;/td&gt;
&lt;td&gt;1 385 955 043  solutions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4 days, 1:40:30.270929&lt;/td&gt;
&lt;td&gt;4 days, 4:44:05.399367&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt=&quot;/Files/2015/b14.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b14.png&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;/Files/2015/b15.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b15.png&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;694 998 374  solutions&lt;/td&gt;
&lt;td&gt;694 998 374  solutions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2 days, 11:44:29.631&lt;/td&gt;
&lt;td&gt;2 days, 6:01:57.946708&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt=&quot;/Files/2015/b16.png&quot; class=&quot;first last&quot; src=&quot;http://www.slabbe.org/Files/2015/b16.png&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1 347 221 708  solutions&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3 days, 21:51:29.043459&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Therefore the total number of solutions up to rotations is 13 366 431 646 which
is indeed more than 10000:)&lt;/p&gt;


&lt;div class=&quot;pygments_manni&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;634900493&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;634900493&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;509560697&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;509560697&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;628384422&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;628384422&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1212362145&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1212362145&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;197325298&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;556534800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;664820756&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;468206736&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1385955043&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1385955043&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;694998374&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;694998374&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1347221708&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;13366431646&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;271&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1072231&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;table border=&quot;1&quot; class=&quot;docutils&quot;&gt;
&lt;caption&gt;Summary&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width=&quot;50%&quot; /&gt;
&lt;col width=&quot;50%&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td&gt;The machine (4 cores)&lt;/td&gt;
&lt;td&gt;Intel® Core™ i5-4590 CPU &amp;#64; 3.30GHz × 4 (Université de Liège)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Computation Time&lt;/td&gt;
&lt;td&gt;45 days, (Aug 4th -- Sep 18th, 2015)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Number of solutions (up to rotations)&lt;/td&gt;
&lt;td&gt;13 366 431 646&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Number of solutions / cpu / second&lt;/td&gt;
&lt;td&gt;859&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;My code will be available on github.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About the video on wikipedia.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I must say that the video is not perfect. On wikipedia, the &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/File_talk:Dancing_links_Quantumino_puzzle.ogv&quot;&gt;file talk page&lt;/a&gt;
of the video says that the &lt;em&gt;Jerky camera movement is distracting&lt;/em&gt;. That is
because &lt;a class=&quot;reference external&quot; href=&quot;http://www.slabbe.org/blogue/2012/01/faire-une-animation-en-3d-avec-sage/&quot;&gt;I managed to make the video&lt;/a&gt; out of images created by
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;.show(viewer='tachyon')&lt;/span&gt;&lt;/tt&gt; which changes the coordinate system, hardcodes a
lot of parameters, zoom properly, simplifies stuff to make sure the user don't
see just a blank image. But, for making a movie, we need access to more
parameters especially the placement of the camera (to avoid the jerky
movement). I know that Tachyon allows all of that. It is still a project that I
have to create a more versatile &lt;tt class=&quot;docutils literal&quot;&gt;Graphics3D &lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt; Tachyon&lt;/tt&gt; conversion allowing
to construct nice videos of evolving mathematical objects. That's another
story.&lt;/p&gt;
&lt;/div&gt;</content>
		<author>
			<name>Sébastien Labbé</name>
			<uri>http://www.slabbe.org/blogue/</uri>
		</author>
		<source>
			<title type="html">Sébastien Labbé</title>
			<subtitle type="html">Sébastien Labbé</subtitle>
			<link rel="self" href="http://www.slabbe.org/blogue/categorie/sage/feed/atom/index.xml"/>
			<id>http://www.slabbe.org/blogue/feed/atom/</id>
			<updated>2016-03-10T15:30:08+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">A Summer of game theory software development</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/09/17/A-Summer-of-game-theory-software-development/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/09/17/A-Summer-of-game-theory-software-development/</id>
		<updated>2015-09-17T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This Summer has seen 3 undergraduates carry out 8 week placements with me
developing further game theoretic code in Sagemath:&lt;/p&gt;

&lt;p&gt;Hannah Lorrimore (going in to her 2nd year) spent her placement working
very hard to implement classes for extensive form games. These are mainly
a graphical representation of games based on a tree like structure. Hannah
not only developed the appropriate data structures but also worked hard to
make sure the graphics looked good. You can see an example of the output
below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/tree.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;James Campbell (going in to an industrial placement year) picked up where he
left off last Summer (James built the first parts of Game Theory code for
Sagemath) and developed a test for degeneracy of games. This involves building a
corresponding linear system for the game and testing a particular condition.
James and I wrote a blog post about some of the theory here:
&lt;a href=&quot;http://vknight.org/unpeudemath/code/2015/06/25/on_testing_degeneracy_of_games/&quot;&gt;http://vknight.org/unpeudemath/code/2015/06/25/on_testing_degeneracy_of_games/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rhys Ward (going in to his first year) has been working at the interface
between extensive form games and normal form games. His main contribution
(Rhys is still working as of the writing of this) has been to build code
that converts an extensive form game to a normal form game. This requires
carefully traversing the underlying tree and keeping track of the strategy
space. Rhys has also built a catalog of normal form games and is now
starting to work on the capability to remove dominated strategies from a
normal form game.&lt;/p&gt;

&lt;p&gt;Hannah, Rhys and James have also been working in conjunction with Tobenna
Peter Igwe who is a PhD student at the University of Liverpool. Tobenna has
been implementing a variety of game theoretic code as part of the Google
Summer of Code project with me as his mentor.&lt;/p&gt;

&lt;p&gt;Hannah, James, Tobenna and I visited Oxford University to spend two days
working with Dr Dima Pasechnik and giving a talk. You can see a video of the
talk here: https://www.youtube.com/watch?v=v4kKYr5I2io&lt;/p&gt;

&lt;p&gt;All of this code will now be reviewed by the Sagemath community and will
(just as James’s code last year) be eventually available to anyone who wants
to study game theory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: this blog post is based on a similar Cardiff University newsletter item.&lt;/strong&gt;&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html"></title>
		<link href="http://sagemath.blogspot.com/2015/09/funding-open-source-mathematical.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-7130292345452113753</id>
		<updated>2015-09-10T19:38:38+00:00</updated>
		<content type="html">&lt;h1 id=&quot;funding-open-source-mathematical-software-in-the-united-states&quot;&gt;Funding Open Source Mathematical Software in the United States&lt;/h1&gt;I do &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; know how to get funding for open source mathematical software in the United States. However, I'm trying.&lt;br /&gt;&lt;h2 id=&quot;why-because-sage-is-hobbling-along&quot;&gt;Why: Because Sage is Hobbling Along&lt;/h2&gt;Despite what we might think in our Sage-developer bubble, &lt;a href=&quot;http://sagemath.org/&quot;&gt;Sage&lt;/a&gt; is hobbling along, and without an infusion of financial support very soon, I think the project is going to fail in the next few years. I have access to Google analytics data for &lt;a href=&quot;http://sagemath.org/&quot;&gt;sagemath.org&lt;/a&gt; since 2007, and there has been no growth &amp;nbsp;in active users of the website since 2011:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-zaHSSBsEAfU/VfI-Q55ar6I/AAAAAAABV-k/STtsAScT1YM/s1600/Screen%2BShot%2B2015-09-10%2Bat%2B7.28.14%2BPM.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;187&quot; src=&quot;http://1.bp.blogspot.com/-zaHSSBsEAfU/VfI-Q55ar6I/AAAAAAABV-k/STtsAScT1YM/s400/Screen%2BShot%2B2015-09-10%2Bat%2B7.28.14%2BPM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h2 id=&quot;something-that-is-missing&quot;&gt;Something that is Missing&lt;/h2&gt;The worse part of all for me, after ten years, is seeing things like &lt;a href=&quot;https://groups.google.com/forum/#!topic/sage-devel/cAFdRb-WKqM&quot;&gt;this email&lt;/a&gt; today from John Palmieri, where he talks about writing &lt;em&gt;slow&lt;/em&gt; but interesting algebraic topology code, and needing help from somebody who knows Cython to actually make his code fast.&lt;br /&gt;&lt;br /&gt;I know from my three visits to the Magma group in Sydney that such assistance is &lt;em&gt;precisely&lt;/em&gt; what having real financial support can provide. Such money makes it possible to have fulltime people who know the tools and how to optimize them well, and they work on this sort of speedup and integration -- this &quot;devil is in the details&quot; work -- for each major contribution (they are sort of like a highly skilled version of a journal copy editor and referee all in one). Doing this makes a massive difference, but also costs on the order of $1 million / year to have any real impact. 1 million is probably the Magma budget to support around 10 people and periodic visitors, and of course like 1% of the budget of Matlab/Mathematica. Magma has this support partly because Magma is closed source, and maintains tight control on who may use it.&lt;br /&gt;&lt;h2 id=&quot;searching-for-a-funding-model&quot;&gt;Searching for a Funding Model&lt;/h2&gt;Sage is open source and freely available to all, so it is of potential huge value to the community by being owned by everybody and changeable. However, those who fund Magma (either directly or indirectly) haven't funded Sage at the same level for some reason. I can't make Sage closed source and copy that very successful funding model. I've tried everything I can think of given the time and resources I have, and the only model left that seems able to support open source is having a company that does &lt;strong&gt;something else&lt;/strong&gt; well and makes money, then using some of the profit to fund open source (&lt;a href=&quot;http://www.neowin.net/news/intel-overtakes-red-hat-to-become-top-linux-kernel-contributor&quot;&gt;Intel is the biggest contributor to Linux&lt;/a&gt;).&lt;br /&gt;&lt;h2 id=&quot;sagemathcloud&quot;&gt;SageMath, Inc.&lt;/h2&gt;Since I failed to find any companies that passionately care about Sage like Intel/Google/RedHat/etc. care about Linux, I started one. I've been working on &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud&lt;/a&gt; extremely hard for over 3 years now, with the hopes that at least it could be a way to fund Sage development.</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">The Simons Foundation and Open Source Software</title>
		<link href="http://sagemath.blogspot.com/2015/09/the-simons-foundation-and-open-source.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-5753647510986290314</id>
		<updated>2015-09-05T16:47:59+00:00</updated>
		<content type="html">&lt;h2 id=&quot;jim-simons&quot;&gt;Jim Simons&lt;/h2&gt;Jim Simons is a mathematician who left academia to start a hedge fund that beat the stock market. He contributes back to the mathematical community through the &lt;a href=&quot;https://www.simonsfoundation.org/&quot;&gt;Simons Foundation&lt;/a&gt;, which provides an enormous amount of support to mathematicians and physicists, and has many outreach programs.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://sagemath.org/&quot;&gt;SageMath&lt;/a&gt; is a large software package for mathematics that I started in 2005 with the goal of &lt;strong&gt;creating a free open source viable alternative to Magma, Mathematica, Maple, and Matlab&lt;/strong&gt;. People frequently tell me I should approach the Simons Foundation for funding to support Sage. &lt;a href=&quot;https://news.ycombinator.com/item?id=10036779&quot;&gt;For example&lt;/a&gt;:&lt;br /&gt;&lt;blockquote&gt;Jim Simons, after retiring from Renaissance Technologies with a cool 15 billion, has spent the last 10 years giving grants to people in the pure sciences. He's a true academic at heart [...] Anyways, he's very fond of academics and gives MacArthur-esque grants, especially to people who want to change the way mathematics is taught. Approach his fund. &lt;strong&gt;I'm 100% sure he'll give you a grant on the spot.&lt;/strong&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;the-national-science-foundation&quot;&gt;The National Science Foundation&lt;/h2&gt;Last month the http://sagemath.org website had 45,114 monthly active users. However, as far as I know, there is no NSF funding for Sage in the United States right now, and development is mostly done on a shoestring in spare time. We have recently failed to get several NSF grants for Sage, despite there being Sage-related grants in the past from NSF. I know that funding is random, and I will keep trying. I have two proposals for Sage funding submitted to NSF right now.&lt;br /&gt;&lt;h2 id=&quot;several-million-dollars-per-year&quot;&gt;Several million dollars per year&lt;/h2&gt;I was incredibly excited in 2012 when David Eisenbud invited me to a meeting at the Simons Foundation headquarters in New York City with the following official description of their goals:&lt;br /&gt;&lt;blockquote&gt;The purpose of this round table is to investigate what sorts of support would facilitate the &lt;strong&gt;development, deployment and maintenance of open-source software used for fundamental research in mathematics&lt;/strong&gt;, statistics and theoretical physics. We hope that this group will consider what support is currently available, and whether there are projects that the Simons Foundation could undertake that would add significantly to the usefulness of computational tools for basic research.&amp;nbsp;Modes of support that duplicate or marginally improve on support that is already available through the universities or the federal government will not be of interest to the foundation. Questions of software that is primarily educational in nature may be useful as a comparison, but are not of primary interest. &amp;nbsp;The scale of foundation support will depend upon what is needed and on the potential scientific benefit, but could be substantial, perhaps up to &lt;strong&gt;several million dollars per year&lt;/strong&gt;.&lt;/blockquote&gt;&lt;blockquote&gt;Current modes of funding for research software in mathematics, statistics and physics differ very significantly. There may be correspondingly great differences in what the foundation might accomplish in these areas.&amp;nbsp;We hope that the round table members will be able to help the foundation understand the current landscape &amp;nbsp;(what are the needs, what is available, whether it is useful, how it is supported) both in general and across the different disciplines, and will help us think creatively about new possibilities.&lt;/blockquote&gt;I flew across country to this the meeting, where we spent the day discussing ways in which &quot;several million dollars per year&quot; could revolutionize &quot;the development, deployment and maintenance of open-source software used for fundamental research in mathematics...&quot;.&lt;br /&gt;&lt;br /&gt;In the afternoon Jim Simons arrived, and shook our hands. He then lectured us with some anecdotes, didn't listen to what we had to say, and didn't seem to understand open source software. I was frustrated watching how he treated the other participants, so I didn't say a word to him. I feel bad for failing to express myself.&lt;br /&gt;&lt;h2 id=&quot;the-decision&quot;&gt;The Decision&lt;/h2&gt;In the backroom during a coffee break, David Eisenbud told me that it had already been decided that they were going to just fund Magma by &lt;a href=&quot;https://news.ycombinator.com/item?id=10036779&quot;&gt;making it freely available to all academics in North America&lt;/a&gt;. WTF? I explained to David that Magma is closed source and that not only does funding Magma not help open source software like Sage, it actively hurts it. A huge motivation for people to contribute to Sage is that they do not have access to Magma (which was very expensive).&lt;br /&gt;&lt;br /&gt;I wandered out of that meeting in a daze; things had gone so differently than I had expected. How could a goal to &quot;facilitate the development, deployment and maintenance of open-source software... perhaps up to several million dollars per year&quot; result in a decision that would make things possibly much worse for open source software?&lt;br /&gt;&lt;br /&gt;That day I started thinking about creating what would become &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud&lt;/a&gt;. The engineering work needed to make Sage accessible to a wider audience wasn't going to happen without substantial funding (I had put years of my life into this problem but it's really hard, and I couldn't do it by myself). At least I could try to make it so people don't have to install Sage (which is very difficult). I also hoped a commercial entity could provide a more sustainable source of funding for open source mathematics software. Three years later, the net result of me starting SageMathCloud and spending almost every waking moment on it is that I've gone from having many grants to not, and SageMathCloud itself is losing money. But I remain cautiously optimistic and forge on...&lt;br /&gt;&lt;h2 id=&quot;we-will-not-fund-sage&quot;&gt;We will not fund Sage&lt;/h2&gt;Prompted by numerous messages recently from people, I wrote to David Eisenbud this week. He suggested I write to Yuri Schinkel, who is the current director of the Simons Foundation:&lt;br /&gt;&lt;blockquote&gt;Dear William,&lt;/blockquote&gt;&lt;blockquote&gt;Before I joined the foundation, there was a meeting conducted by David Eisenbud to discuss possible projects in this area, including Sage.&lt;/blockquote&gt;&lt;blockquote&gt;After that meeting it was decided that the foundation would support Magma.&lt;/blockquote&gt;&lt;blockquote&gt;Please keep me in the loop regarding developments at Sage, but &lt;strong&gt;I regret that we will not fund Sage&lt;/strong&gt; at this time.&lt;/blockquote&gt;&lt;blockquote&gt;Best regards, Yuri&lt;/blockquote&gt;The Simons Foundation, the NSF, or any other foundation does not owe the Sage project anything. Sage is used by a lot of people for free, who together have their research and teaching supported by hundreds of millions of dollars in NSF grants. Meanwhile the Sage project barely hobbles along. I meet people who have fantastic development or documentations projects for Sage that they can't do because they are far too busy with their fulltime teaching jobs. More funding would have a massive impact. It's only fair that the US mathematical community is at least aware of a missed opportunity.&lt;br /&gt;&lt;a href=&quot;http://opendreamkit.org/&quot; target=&quot;_blank&quot;&gt;Funding in Europe&lt;/a&gt; for open source math software is much better.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=10175563&quot; target=&quot;_blank&quot;&gt;Hacker News discussion&lt;/a&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Picking a good Vainglory jungler with game theory and sagemath</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/09/05/picking-a-good-vainglory-jungler-with-game-theory-and-sagemath/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/09/05/picking-a-good-vainglory-jungler-with-game-theory-and-sagemath/</id>
		<updated>2015-09-05T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;I’ve recently been playing a really cool video game:
&lt;a href=&quot;http://www.vainglorygame.com&quot;&gt;Vainglory&lt;/a&gt;. This is described as a MOBA which I
must admit I had never heard off until this year when my students mentioned it
to me, but basically it’s an online multi player game in which players form two
teams of 6 heroes and fight each other. The choice of the heroes is very
important as the composition of a team can make or break a match. This seems to
have a bit of a cult following (so no doubt just like for my &lt;a href=&quot;http://drvinceknight.blogspot.fr/2014/05/wizards-giants-linear-programming-and.html&quot;&gt;post about clash
of
clans&lt;/a&gt;
I might annoy people again) and there is a &lt;a href=&quot;http://www.vaingloryfire.com/&quot;&gt;great
wiki&lt;/a&gt; that gives guides for the play of each
player. In this post I’ll describe using Python to scrape that wiki to get data
that feeds in to a game theoretic model which I then analyse using
&lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sagemath&lt;/a&gt; to give some insight about the choice of
hero.&lt;/p&gt;

&lt;p&gt;Here’s the map where this all takes place:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://22aeqb1ndrnn3j0r8k2b47j2.wpengine.netdna-cdn.com/wp-content/uploads/2014/11/Map.jpg&quot; alt=&quot;Map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So first of all, my understanding is that there are generally three types of
playing strategy in the game:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lane: a hero that occupies and tries to take over the main route between the
two bases.&lt;/li&gt;
  &lt;li&gt;Jungle: a hero that goes ‘off road’ and kills monsters, gets gold etc…&lt;/li&gt;
  &lt;li&gt;Roam: a hero who roams in between the two and whose main job is to support the
other two players.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My personal strategy is to pick a roamer/protector:
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/ardan&quot;&gt;Ardan&lt;/a&gt; (pic below),&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.gamezebo.com/wp-content/uploads/2015/02/ardan.jpg&quot; alt=&quot;Ardan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I generally help out the jungler in my team and try my best to not be a
liability by dying.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.vaingloryfire.com&quot;&gt;wiki&lt;/a&gt; has a bunch of information for
players.  If you google something like ‘vainglory best strategy’ it comes up.
If you look up each hero you get &lt;strong&gt;a collection of guides ranked by votes&lt;/strong&gt;
each with all sorts of information which includes the where each and every
other hero sits on a threat level (from 1 to 10). Here is the threat meter for
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/ardan&quot;&gt;Ardan&lt;/a&gt; from the top guide:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/ardan_threat_meter.png&quot; alt=&quot;Threat for Ardan
(2015-09-05)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So from that guide it looks like if your opponent is going to be isolated with
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/ardan&quot;&gt;Ardan&lt;/a&gt; then you should pick &lt;strong&gt;HERO&lt;/strong&gt;. &lt;strong&gt;In some guides the threat meter does
not list all the heros&lt;/strong&gt;. This is particularly important as it’s these threat
meters that I’ve used as a source of data for &lt;strong&gt;how good a given hero is
against other heros&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is where the keener player/reader will note that the threat meter only
describes the threat to a single player and not any information about how this
fits within a team dynamic. &lt;strong&gt;This is an important admission on my part: as
indicated by the title of this post aims to use data and game theory to give an
indication as to how to choose heros for isolated combat against other single
heros.&lt;/strong&gt; So one application of this is choosing a jungler/laner when you expect
to go up against another team that is playing a single jungler/laner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scraping the data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First things first: I used Python with the
&lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/bs4/doc/&quot;&gt;BeautifulSoup&lt;/a&gt; and
&lt;a href=&quot;http://www.python-requests.org/en/latest/&quot;&gt;requests&lt;/a&gt; library. For example here
is how I got the lists of all the heroes (and the url to their own respective
page on the wiki):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://www.vaingloryfire.com/vainglory/wiki/heroes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'html.parser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/vainglory/wiki/heroes'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'href'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heroes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'skye'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Removing skye as she is brand new&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u'adagio'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/adagio'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'ardan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/ardan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'catherine'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/catherine'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'celeste'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/celeste'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'fortress'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/fortress'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'glaive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/glaive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'joule'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/joule'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'koshka'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/koshka'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'krul'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/krul'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'petal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/petal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'ringo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/ringo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'rona'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/rona'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'saw'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/saw'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'skaarf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/skaarf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'taka'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/taka'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;u'vox'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'/vainglory/wiki/heroes/vox'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note there that I’m removing a brand new hero:
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/skye&quot;&gt;Skye&lt;/a&gt; as she was
released pretty much at the same time as I was writing this post.)&lt;/p&gt;

&lt;p&gt;You can see the &lt;a href=&quot;https://github.com/drvinceknight/vainglory-analysis/blob/master/scrape_heroes.ipynb&quot;&gt;Jupyter
notebook&lt;/a&gt;
which shows the code. The main technicality is that I only scraped guides from
the front page for each hero. As I’ll describe later, I ran my analysis taking
the average threats for a variety of cases: only taking the first guide, only
taking the first 2 guides, the first 3 guides etc…&lt;/p&gt;

&lt;p&gt;Here for example is the threats data for &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/adagio&quot;&gt;Adagio&lt;/a&gt; if you only look at &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/guide/unbeatable-adagio-130&quot;&gt;this
first guide&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cross referencing that with the order given by the list of heroes above we see
that &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/skaarf&quot;&gt;Skaarf&lt;/a&gt; ranks a 7 on the threat meter to &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/adagio&quot;&gt;Adagio&lt;/a&gt;, and &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/ringo&quot;&gt;Ringo&lt;/a&gt; and
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/joule&quot;&gt;Joule&lt;/a&gt; a 4. &lt;strong&gt;All the 0s are what I’ve decided to do when a threat meter
does not include a given hero: indicating that that hero is not a threat to
that hero.&lt;/strong&gt; I don’t really like this as a solution but it’s probably the least
worst way to deal with it (if anyone has a better way of handling this please
let me know in the comments).&lt;/p&gt;

&lt;p&gt;Here is the threats data for &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/krul&quot;&gt;Krul&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that in this case the only heroes that pose no threat to &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/krul&quot;&gt;Krul&lt;/a&gt; are
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/fortress&quot;&gt;Fortress&lt;/a&gt; and &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/rona&quot;&gt;Rona&lt;/a&gt;. Thus if your opponent is playing those heroes
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/krul&quot;&gt;Krul&lt;/a&gt; is a best response.&lt;/p&gt;

&lt;p&gt;As will be described in the next section, we need to build up a matrix of these
rows which basically shows how well a given hero does against others. Here is
the matrix of this when considering the row players and taking the opposite of
the threats &lt;strong&gt;when using just the top guide&lt;/strong&gt;:&lt;/p&gt;



&lt;p&gt;If you consider a column (that corresponds to a hero) of that matrix, the row
player aims to find the row that gives the highest score, which because we’ve
taken the opposite of the threat score corresponds to minimising the threat
posed by the column hero. This is in essence a &lt;strong&gt;risk averse&lt;/strong&gt; approach, at the
very end I’ll comment on what happens to the results when players aim to
maximise the threat they pose.&lt;/p&gt;

&lt;p&gt;Now that I’ve described the data (you can find all the data written to specific
csv files
&lt;a href=&quot;https://github.com/drvinceknight/vainglory-analysis/tree/master/data&quot;&gt;here&lt;/a&gt;)
I’ll go on to talk about the game theory used to try and see what the
equilibrium choice of strategies should/could be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Game theoretic analysis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All of this has been done using &lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sagemath&lt;/a&gt;, a great open source mathematics
package that offers an alternative to Maple, Mathematica etc…&lt;/p&gt;

&lt;p&gt;If you’re not familiar with game theory, this video might help (it shows the
basics of game theory and how Sagemath can be used to find Nash equilibria):&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
        
    
&lt;/div&gt;

&lt;p&gt;Before talking about equilibria let’s just look at best response dynamics.&lt;/p&gt;

&lt;p&gt;Using Sage we can first of all build up the &lt;a href=&quot;http://doc.sagemath.org/html/en/reference/game_theory/sage/game_theory/normal_form_game.html&quot;&gt;normal form
game&lt;/a&gt;
for a given number of guides:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_player_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col_player_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Import the bi matrices and create the game object&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;bi_matrices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fle&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_player_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col_player_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;csvrdr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;bi_matrices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvrdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalFormGame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bi_matrices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A-01.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B-01.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this and the &lt;code class=&quot;highlighter-rouge&quot;&gt;best_response&lt;/code&gt; method on Sagemath &lt;code class=&quot;highlighter-rouge&quot;&gt;NormalFormGames&lt;/code&gt; we can
build up all the best responses (according to a given number of guides) go each
player. The cool thing is that Sagemath has some awesome graph theory written
in there so we can transform that in to a nice picture (again: all the code for
this can be found
&lt;a href=&quot;https://github.com/drvinceknight/vainglory-analysis/blob/master/analyse_game.ipynb&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/risk-averse-plot-br-01.svg&quot; alt=&quot;best response graph for 1st guide&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That plot confirms what we have seen earlier, we see that
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/krul&quot;&gt;Krul&lt;/a&gt; is a best
response to
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/fortress&quot;&gt;Fortress&lt;/a&gt; or
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/rona&quot;&gt;Rona&lt;/a&gt;. Sadly, because
there are so many zeros when just using the first guide, there are a bunch of
heros that are not considered a threat to any of the players so they have
multiple best responses and our graph is messy.&lt;/p&gt;

&lt;p&gt;Here is the best response graph when taking the mean threats over all front
page guides:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/risk-averse-plot-br-all.svg&quot; alt=&quot;best response graph for all guides&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that Game Theory assumes &lt;strong&gt;that everyone know that everyone know that
everyone knows… all this&lt;/strong&gt;. So for example if two players both player Adagio
we are at an equilibrium. However if one player plays
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/saw&quot;&gt;Saw&lt;/a&gt; then the graph
indicates that the opponent should play
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/koshka&quot;&gt;Koshka&lt;/a&gt;, which means
that the first player should then deviate and play
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/fortress&quot;&gt;Fortress&lt;/a&gt; which is
then also an equilibrium (bot players are playing best responses to each other).&lt;/p&gt;

&lt;p&gt;From here on I will continue the analysis using the average utility from all
the guides (I’ll come back to this at the end).&lt;/p&gt;

&lt;p&gt;So we can use Sagemath to compute all the equilibria for us. A Nash equilibria
need not be a pure strategy and so will at times be a probability vector
indicating how players should randomly pick a hero. Here for example is the 4th
equilibrium computed by Sagemath:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtain_nash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lrs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3947&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3194&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8795&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;615&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5927&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3947&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3194&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8795&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;615&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5927&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This particular equilibria has both players playing a mix of: &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/fortress&quot;&gt;Fortress&lt;/a&gt;,
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/glaive&quot;&gt;Glaive&lt;/a&gt;, &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/petal&quot;&gt;Petal&lt;/a&gt; and &lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/koshka&quot;&gt;Koshka&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the mean probability distribution for both players, while the
particular values should be ignored what is of interest is the heroes that are
not played at all. &lt;strong&gt;In essence these heroes, accross all the equilibria are
not deemed playable&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/risk-averse-plot-ne-all.svg&quot; alt=&quot;ne graph for all
guides&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that this confirms how the previous graph was colored showing the heroes
that should be played in blue.&lt;/p&gt;

&lt;p&gt;Note that the number of guides and the reliability of all this has a huge
effect of the conclusions made. Here are two gifs that show the effect of the
number of guides used:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/br.gif&quot; alt=&quot;best response dynamics animation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/ne.gif&quot; alt=&quot;ne graph animation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and here is a plot of the number of equilibria for each guide:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/risk-averse_number_of_equilibria.svg&quot; alt=&quot;number of equilibria&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Up until now all the results are for when players aim to minimise the threat
posed to them. In the next section I’ll invert that (python wise it’s a minor
swapping around of some inputs) and consider the situation where you want to
pick a hero that is aims to be the most threatening.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Seeking to be a threat&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all here is the best response graph:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/threatening-plot-br-all.svg&quot; alt=&quot;best response graph for all
guides&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the average of the NE:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/threatening-plot-ne-all.svg&quot; alt=&quot;best response graph for all
guides&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Those 3 players have certainly been able to rip through me on more than one
occasion…&lt;/p&gt;

&lt;p&gt;Finally here are the Nash equilibria for when a threatening player (plotted in
black) is playing against a threat averse player (plotted in grey):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/asymmetric-plot-ne-all.svg&quot; alt=&quot;best response graph for all
guides&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main thing that needs to be highlighted before concluding is that this
analysis has two weaknesses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The data: what comes out of mathematical models is only as good as what goes
in. Scraping the wiki data is a cool thing to do (from a Python point of view)
but I’m blindly grabbing guides that might have poor information/opinions in
them. This is worth remembering. If someone where to come up with their own
threat/performance measures then this work could just be used on that.
Ultimately the data available here is better than no data.&lt;/li&gt;
  &lt;li&gt;I am not taking in to account team dynamics. I’m just looking at perceived
threats from one hero to another. There are mathematical approaches that could
be used to find the best combination of teams and I might get to that in other
post one day. Nonetheless this has been a fun application of game theory and
still has value I believe.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So to conclude, basing things on the data available to me, I’d suggest that
(when both players are acting in a risk averse way) the choice of heros for an
isolated job like jungling and/or laneing is in fact reduced to a set from:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/adagio&quot;&gt;Adagio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/catherine&quot;&gt;Catherine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/koshka&quot;&gt;Koshka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/petal&quot;&gt;Petal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/glaive&quot;&gt;Glaive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/fortress&quot;&gt;Fortress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If &lt;strong&gt;you and your opponent aim to be threatening&lt;/strong&gt;, the choice is from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/glaive&quot;&gt;Glaive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/krul&quot;&gt;Krul&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/taka&quot;&gt;Taka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally if &lt;strong&gt;you aim to be threatening, playing against a player aiming to be
risk averse&lt;/strong&gt; the choice is from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/glaive&quot;&gt;Glaive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/krul&quot;&gt;Krul&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/catherine&quot;&gt;Catherine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/taka&quot;&gt;Taka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/koshka&quot;&gt;Koshka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and vice versa:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/adagio&quot;&gt;Adagio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/catherine&quot;&gt;Catherine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/petal&quot;&gt;Petal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/glaive&quot;&gt;Glaive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/fortress&quot;&gt;Fortress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Interestingly for this last type of game there were in general just 1 equilibrium.)&lt;/p&gt;

&lt;p&gt;Based on all of this, I would suggest (looking across all of that summary) that
(disclaimer: based on the wiki threat data) the &lt;strong&gt;best&lt;/strong&gt;
&lt;a href=&quot;http://www.vainglorygame.com&quot;&gt;Vainglory&lt;/a&gt; hero is
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/glaive&quot;&gt;Glaive&lt;/a&gt;. Again
though, this does not take in to account any of the very important team
dynamics. I plan to keep on being a protector with
&lt;a href=&quot;http://www.vaingloryfire.com/vainglory/wiki/heroes/ardan&quot;&gt;Ardan&lt;/a&gt; and just doing
my best to stay alive…&lt;/p&gt;

&lt;p&gt;Another point is that this shows that vainglory is perhaps not immediately
balanced. A perfectly balanced game (like &lt;a href=&quot;https://en.wikipedia.org/wiki/Rock-paper-scissors&quot;&gt;Rock Paper
Scissor&lt;/a&gt; for example) has a
Nash Equilibria that evenly plays all strategies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game_theory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal_form_games&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtain_nash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please do take a look at all the code/data at &lt;a href=&quot;https://github.com/drvinceknight/vainglory-analysis&quot;&gt;this
repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This was a fun application of mathematical modelling, I also learnt how to
scrape with BeautifulSoup but I mainly look forward to using this in my game
theory class this year. I might even suggest we spend 25 minutes of one class
having a game on the big screen assuming there are 5 players of
&lt;a href=&quot;http://www.vainglorygame.com&quot;&gt;Vainglory&lt;/a&gt; in my class.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">React, Flux, RethinkDB and SageMathCloud -- Summer 2015 update</title>
		<link href="http://sagemath.blogspot.com/2015/08/react-flux-rethinkdb-and-sagemathcloud.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-677612542326618554</id>
		<updated>2015-09-01T07:57:27+00:00</updated>
		<content type="html">I've been using databases and doing web development for over 20 years, and I've never really &lt;strong&gt;loved&lt;/strong&gt; any database before and definitely didn't love any web development frameworks either. That all changed for me this summer...&lt;br /&gt;&lt;h3 id=&quot;sagemathcloud&quot;&gt;SageMathCloud&lt;/h3&gt;&lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud&lt;/a&gt; is a web application in which you collaboratively use Python, LaTeX, Markdown, Sage worksheets (sophisticated mathematics), task lists, R, Jupyter Notebooks, manage courses, write C programs, make chatrooms, and more. It is hosted on Google Compute Engine, but is also &lt;a href=&quot;https://github.com/sagemathinc/smc&quot;&gt;entirely open source&lt;/a&gt; and there is a pre-made Virtual Machine that you can download. A &lt;strong&gt;project&lt;/strong&gt; in SMC is a Linux account, with resources constrained using cgroups and quotas. Many SMC users can &lt;strong&gt;collaborate&lt;/strong&gt; on the same project, and have equal privileges in that project. Interaction with all file types (including Jupyter notebooks, task lists and course managements) is synchronized in realtime, like Google docs. There is also a &lt;strong&gt;global notifications feed&lt;/strong&gt; that shows all editing activity on all files in all projects on which the user collaborates, which is a sort of highly technical version of Facebook's feed.&lt;br /&gt;&lt;h3 id=&quot;rewrite-motivation&quot;&gt;Rewrite motivation&lt;/h3&gt;I originally wrote the &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;SageMathCloud&lt;/a&gt; frontend using progressive-refinement jQuery (no third-party framework beyond that) and the Cassandra database. These were reasonable choices when I started. There are much better approaches now, which are critical to dramatically improving the user experience with SMC, and also growing the developer base. So far SMC has had no nontrivial outside contributions, probably due to the difficulty of understanding the code. In fact, I think nobody besides me has ever even &lt;strong&gt;installed&lt;/strong&gt; SMC, despite &lt;a href=&quot;https://github.com/sagemathinc/smc/blob/master/INSTALL.md&quot;&gt;these install notes&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;We (me, Jon Lee, Nicholas Ruhland) are currently completely rewriting the entire frontend of SMC using React.js, Flux, and RethinkDB. We started this rewrite in June 2015, with Jon being supported by Google Summer of Code (2015), Nich being supported some by NSF grants from Randy Leveque and Rekha Thomas, and with me being unemployed.&lt;br /&gt;&lt;h3 id=&quot;terrible-funding-situation&quot;&gt;Terrible funding situation&lt;/h3&gt;I'm living on credit cards -- I have no NSF grant support anymore, and SageMathCloud is still losing a lot of money every month, and I'm unhappy about this situation. It was either completely quit working on SMC and instead teach or consult a lot, or lose tens of thousands of dollars. I am doing the latter right now. I was very caught off guard, since this is my first summer ever to not have NSF support since I got my Ph.D. in 2000, and I didn't expect to have my grant proposals all denied (which happened in June). There is some modest Angel investment in SageMath, Inc., but I can't bring myself to burn through that money on salary, since it would run out quickly, and I don't want to have to shut down the site due to not being able to pay the hosting bill. I've failed to get any significant free hosting, due to already getting free hosting in the past, and SageMath, Inc. not being in any incubators. For example, we tried very hard to get hosting from Google, but they flatly refused for these two reasons (they gave $60K in hosting to UW/Sage project in 2012). I'm clearly having trouble transitioning from an academic to an industry funding model. But if there are enough paying customers by January 2016, things will turn around.&lt;br /&gt;&lt;br /&gt;Jon, Nich, and I have been working on this rewrite for three months, and hope to finish it by the end of September, when Jon and Nich will become busy with classes again. However, it seems unlikely we'll be able to finish at the current rate. Fortunately, I don't start teaching fulltime again until January, and we put a lot of work into doing a release in mid-August that fully uses RethinkDB and partly uses React.js, so that we can finish the second stage of the rewrite iteratively, without any major technical surprises.&lt;br /&gt;&lt;h3 id=&quot;rethinkdb&quot;&gt;RethinkDB&lt;/h3&gt;Cassandra is an excellent database for many applications, but it is not the right database for SMC and I'm making no further use of Cassandra. SMC is a realtime application that does a lot more reading than writing to the database, and SMC greatly benefits from realtime push updates from the database. I've tried quite hard in the past to build an appropriate architecture for SMC on top of Cassandra, but it is the wrong tool for the job. RethinkDB scales up linearly (with sharding and replication), and has high availability and automatic failover as of version 2.1.2. See &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/4678&quot;&gt;https://github.com/rethinkdb/rethinkdb/issues/4678&lt;/a&gt; for my painful path to ensuring RethinkDB actually works for me (the RethinkDB developers are incredibly helpful!).&lt;br /&gt;&lt;h3 id=&quot;react.js&quot;&gt;React.js&lt;/h3&gt;I learned about React.js first from some &quot;random podcast&quot;, then got more interested in it when Chris Swenson gave a demo at a Sage Days workshop in San Diego in May 2015. React (+Flux) is a web development framework that actually has solid &lt;em&gt;ideas&lt;/em&gt; behind it, backed by an implementation that has been optimized and tested by a highly nontrivial real world application: namely the Facebook website. Even if I were to have the idea of React, implementing in a way that is actually usable would be difficult. The key idea of React.js is that -- surprisingly -- it is possible to write efficient &lt;em&gt;client-side&lt;/em&gt; code that describes how to render the application purely as a function of its state.&lt;br /&gt;&lt;br /&gt;React is &lt;strong&gt;different&lt;/strong&gt; than jQuery. With jQuery, you write lots of code explaining how to transform the user interface of your application from one complicated state (that you might never have anticipated happening) to another complicated state. When using React.js you don't write code about how your application's visible state changes -- instead you write code to answer the question: &quot;given this state, what should the application look like&quot;. For me, it's a game changer. This is like what one does when writing video games; the innovation is that some people at Facebook figured out how to practically program this way in a client side web browser application, then tuned their implementation based on huge amounts of real world data (Facebook has users). Oh, and they open sourced the result and ran several conferences explaining React.&lt;br /&gt;&lt;br /&gt;React.js reminds me of when Andrew Wiles proved Fermat's Last Theorem in the mid 1990s. Wiles (and Ken Ribet) had genuine new ideas, which dramatically reshaped the landscape of number theory. The best number theorists quickly realized this and adopted to the new world, pushing the envelope of Wiles work far beyond what I expected could happen. Other people pretended like Wiles didn't exist and continued studying Fibonnaci numbers. I browsed the web development section of Barnes and Noble last night and there were dozens of books on jQuery and &lt;em&gt;zero&lt;/em&gt; on React.js. I feel for anybody who tries to learn client-side web development by reading books at Barnes and Noble.&lt;br /&gt;&lt;h3 id=&quot;ipythonjupyter-and-phosphorjs&quot;&gt;IPython/Jupyter and PhosphorJS&lt;/h3&gt;I recently met with Fernando Perez, who founded IPython/Jupyter. He seemed to tell me that currently 9 people are working fulltime on rewriting the Jupyter web notebook using the &lt;a href=&quot;https://github.com/phosphorjs/phosphor&quot;&gt;PhosphorJS&lt;/a&gt; framework. I tried to understand PhosphorJS based on the github page, but couldn't, except to deduce that it is mostly the work of one person from Bloomberg/Continuum Analytics. Fernando told me that they chose PhosphorJS since it very fast, and that their main motivation is to (1) make Jupyter better use their huge high-resolution monitors on their new institute at Berkeley, and (2) make it easier for developers like me to integrate/extend Jupyter into their applications. I don't understand (2), because PhosphorJS is perhaps the least popular web framework I've ever heard of (is it a web framework -- I can't tell?). I pushed Fernando to explain why they made that design choice, but didn't really understand the answer, except that they had spent a lot of time investigating alternatives (like React first). I'm intimidated by their resources and concerned that I'm making the wrong choice; however, I just can't understand why they have made what seems to me to be the wrong choice. I hope to understand more at the joint &lt;a href=&quot;http://wiki.sagemath.org/days70&quot;&gt;Sage/Jupyter Days 70&lt;/a&gt; that we are organizing together in Berkeley, CA in November. (Edit: see &lt;a href=&quot;https://github.com/ipython/ipython/issues/8239&quot;&gt;https://github.com/ipython/ipython/issues/8239&lt;/a&gt; for a discussion of why IPython/Jupyter uses PhosphorJS.)  &lt;br /&gt;&lt;h3 id=&quot;tables-and-rethinkdb&quot;&gt;Tables and RethinkDB&lt;/h3&gt;Our rewrite of SMC is built on Tables, Flux and React. &lt;strong&gt;Tables&lt;/strong&gt; are client-side technology I wrote inspired by Facebook's GraphQL/Relay technology (and Meteor, Firebase, etc.); they synchronize data between clients and the backend database in realtime. Tables are defined by a &lt;a href=&quot;https://github.com/sagemathinc/smc/blob/master/salvus/schema.coffee&quot;&gt;JSON schema file&lt;/a&gt;, which specifies the fields in the table, and explains what get and set queries are allowed. A table is a subset of a much larger table in the database, with the subset defined by conditions that are relative to the user making the query. For example, the projects table has one entry for each project that the user is a collaborator on.&lt;br /&gt;&lt;br /&gt;Tables are automatically synchronized between the user and the database whenever the database changes, using &lt;a href=&quot;http://rethinkdb.com/docs/changefeeds/javascript/&quot;&gt;RethinkDB changefeeds&lt;/a&gt;. &lt;a href=&quot;http://rethinkdb.com/&quot;&gt;RethinkDB's&lt;/a&gt; innovation is to build realtime updates -- triggered when the result of a query to the database changes -- directly into the database at the lowest level. Of course it is possible to build something that looks the same from the outside using either a message queue (say using RabbitMQ or ZeroMQ), or by watching the replication stream from the database and triggering actions based on that (like Meteor does using MongoDB). RethinkDB's approach seems better to me, putting the abstraction at the right level. That said, based on mailing list traffic, searches, etc., it seems that very, very few people get RethinkDB yet. Also, despite years of development, RethinkDB only became &quot;production ready&quot; a few months ago, and only got automatic failover a few weeks ago. That said, after ironing out some kinks, I'm now using it with heavy traffic in production and it works very well.&lt;br /&gt;&lt;h2 id=&quot;flux&quot;&gt;Flux&lt;/h2&gt;Once data is automatically synchronized between the database and web browsers in realtime, we can build everything else on top of this. Facebook also introduced an architecture pattern that they call &lt;strong&gt;Flux&lt;/strong&gt;, which works well with React. It's very different than MVC-style two-way binding frameworks, where objects are directly linked to UI elements, with an object changing causing the UI element to change and vice versa. In SMC each major part of the system has two objects associated to it: Actions and Stores. We think of them in terms of the classical CQRS pattern -- &lt;strong&gt;c&lt;/strong&gt;ommand &lt;strong&gt;q&lt;/strong&gt;uery &lt;strong&gt;r&lt;/strong&gt;esponsibility &lt;strong&gt;s&lt;/strong&gt;egregation. Actions are commands -- they are Javascript &quot;functions&quot; that get stuff done, but they do not return values; instead, they impact the state of the store. The store has functions that allow one to query for the state of the store, but they do not change the state of the store. The store functions must only be functions of the internal state of the store and nothing else. They might cache their results and format their output to be very convenient for rendering. But that's it.&lt;br /&gt;&lt;br /&gt;Actions usually cause the corresponding store (or stores) to change. When a store changes, it emit a change event, which causes any React components that depend on the store to be updated, which in many cases means they are re-rendered. There are optimizations one can introduce to reduce the amount of re-rendering, which if one isn't careful leads to subtle bugs; pretty much the only subtle React UI bugs one hits are caused by such optimizations. When the UI re-renders, the user sees their view of the world change. The user then clicks buttons, types, etc., which triggers actions, which in turn update stores (and tables, hence propogating changes to the ultimate source of truth, which is the RethinkDB database). As stores update, the UI again updates, etc.&lt;br /&gt;&lt;h3 id=&quot;status&quot;&gt;Status&lt;/h3&gt;So far, we have completely (re-)written the project listing, file manager, help/status page, new file page, project log, file finder, project settings, course management system, account settings, billing, project upgrade system, and file use notifications using React, Flux, and Tables, and the result works well. Bugs are much easier to fix, and it is easy (possible?) to understand the state of the system, since it is defined by the state of the database and the corresponding client-side stores. We've completely rethought everything about the UI in doing the rewrite of the above components, and it has taken several months. Also, as mentioned above, I completely rewrote most of the backend to use RethinkDB instead of Cassandra. There were also the weeks of misery for me after we made the switch over. Even after weeks of thinking/testing/wondering &quot;what could go wrong?&quot;, we found out all kinds of surprising little things within hours of pushing everything into production, which took more than a week of sleep deprived days to sort out.&lt;br /&gt;&lt;br /&gt;What's left? We have to rewrite the file editor tabs system, the project tabs system, and all the applications (except course management): editing text files using Codemirror, task lists (which are suprisingly complicated!), color xterm terminals, Jupyter notebooks (which will still use an iframe for the notebook itself), Sage worksheets (with complicated html output embedded in codemirror), compressed file de-archiver, the LaTeX editor, the wiki and markdown editors, and file chat. We hope to find a clean way to abstract away the various SMC applications as plugins, so that other people can easily write their own applications/plugins that will run inside of SMC. There will be a rich collection of example plugins to build on, namely the ones listed above, which are all driven by critical-to-us real world applications.  &lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=10147401&quot;&gt;Discussion about this blog post on Hacker News.&lt;/a&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Natural language processing of new jokes from 2015</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/08/28/natural-language-processing-of-new-jokes-from-2015/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/08/28/natural-language-processing-of-new-jokes-from-2015/</id>
		<updated>2015-08-28T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This is a brief update to a previous post: &lt;a href=&quot;http://vknight.org/unpeudemath/code/2015/06/14/natural-language-and-predicting-funny/&quot;&gt;“Python, natural language processing
and predicting
funny”&lt;/a&gt;.
In that post I carried out some basic natural language processing with Python to
predict whether or not a joke is funny. In this post I just update that with
some more data from this year’s &lt;a href=&quot;http://www.bbc.co.uk/news/uk-scotland-edinburgh-east-fife-34039927&quot;&gt;Edinburgh Fringe
festival&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href=&quot;https://github.com/drvinceknight/EdinburghFringeJokes/blob/master/nlp-of-jokes-2015.ipynb&quot;&gt;the ipython
notebook&lt;/a&gt; which shows graphics and outputs of all the jokes.
Interestingly this year’s winning joke is not deemed funny by the basic model :)
but overall was 60% right this year (which is pretty good compared to last
year).&lt;/p&gt;

&lt;p&gt;Here is a summary plot of the classifiers for different thresholds of ‘funny’:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-all.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The corresponding plot this year (with the new data):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-all-2015.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take a look at the notebook file and by all means grab &lt;a href=&quot;https://github.com/drvinceknight/EdinburghFringeJokes/blob/master/jokes.csv&quot;&gt;the csv
file&lt;/a&gt; to
play (but do let me know how you get on :)).&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-US">
		<title type="html">Google Summer of Code 2015: Conclusion</title>
		<link href="http://benjamin-hackl.at/2015/08/22/google-summer-of-code-2015-conclusion/"/>
		<id>http://benjamin-hackl.at/?p=404</id>
		<updated>2015-08-22T11:34:56+00:00</updated>
		<content type="html">&lt;p&gt;The &lt;a href=&quot;https://developers.google.com/open-source/gsoc/&quot;&gt;&amp;#8220;Google Summer of Code 2015&amp;#8221;&lt;/a&gt; program has ended yesterday, on the 21. of August at 19.00 UTC. This blog entry shall provide a short wrap-up of &lt;a href=&quot;http://www.google-melange.com/gsoc/project/details/google/gsoc2015/behackl/5649050225344512&quot;&gt;our GSoC project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The aim of our project was to implement a &lt;em&gt;basic framework&lt;/em&gt; that enables us to do computations with asymptotic expressions in SageMath &amp;#8212; and I am very happy to say that we very much succeeded to do so. An overview of all our developments can be found at meta ticket &lt;a href=&quot;http://trac.sagemath.org/17601&quot;&gt;#17601&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Although we did not really follow the timeline suggested in my original proposal (mainly because the implementation of the &lt;a href=&quot;http://trac.sagemath.org/17716&quot;&gt;&lt;em&gt;Asymptotic Ring&lt;/em&gt;&lt;/a&gt; took way longer than originally anticipated) we managed to implement the majority of ideas from my proposal &amp;#8212; with the most important part being that our current prototype is &lt;strong&gt;stable&lt;/strong&gt;. In particular, this means that we do not expect to make major design changes at this point. Every detail of our design is well-discussed and can be explained.&lt;/p&gt;
&lt;p&gt;Of course, our &lt;a href=&quot;http://trac.sagemath.org/17601&quot;&gt;&lt;em&gt;&amp;#8220;Asymptotic Expressions&amp;#8221; &lt;/em&gt;project&lt;/a&gt; is far from finished, and we will continue to extend the functionality of our framework. For example, although working with exponential and logarithmic terms is currently possible, it is not very convenient because the $\log$, $\exp$, and power functions are not fully implemented. Furthermore, it would be interesting to investigate the performance-gain obtained by cythonizing the central parts of this framework (e.g. parts of the &lt;em&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/17693&quot;&gt;MutablePoset&lt;/a&gt;&lt;/em&gt;&amp;#8230;) &amp;#8212; and so on&amp;#8230;&lt;/p&gt;
&lt;p&gt;To conclude, I want to thank &lt;a href=&quot;http://danielkrenn.at&quot;&gt;Daniel Krenn&lt;/a&gt; for his hard work and helpful advice als my mentor, as well as the SageMath community for giving me the opportunity to work on this project within the Google Summer of Code program! &lt;img src=&quot;http://benjamin-hackl.at/asdf-wp/wp-includes/images/smilies/simple-smile.png&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;</content>
		<author>
			<name>Benjamin Hackl</name>
			<uri>http://benjamin-hackl.at/tag/gsoc15/</uri>
		</author>
		<source>
			<title type="html">GSoC15 – Benjamin Hackl</title>
			<link rel="self" href="http://benjamin-hackl.at/tag/gsoc15/feed/"/>
			<id>http://benjamin-hackl.at/tag/gsoc15/feed/</id>
			<updated>2016-03-04T16:30:22+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-US">
		<title type="html">Asymptotic Expressions: Current Developments</title>
		<link href="http://benjamin-hackl.at/2015/08/17/asymptotic-expressions-current-developments/"/>
		<id>http://benjamin-hackl.at/?p=391</id>
		<updated>2015-08-17T07:15:20+00:00</updated>
		<content type="html">&lt;p&gt;Since my last blog entry on the status of our implementation of &lt;a href=&quot;http://trac.sagemath.org/17601&quot;&gt;Asymptotic Expressions in SageMath&lt;/a&gt; quite a lot of improvements have happened. Essentially, all the pieces required in order to have a basic working implementation of multivariate asymptotics are there. The remaining tasks within my Google Summer of Code project are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Polish the documentation of our &lt;em&gt;minimal prototype&lt;/em&gt;, which consists of &lt;a href=&quot;http://trac.sagemath.org/17716&quot;&gt;#17716&lt;/a&gt; and the respective dependencies. Afterwards, we will set this to &lt;em&gt;needs_review&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Open a ticket for the &lt;em&gt;multivariate asymptotic ring &lt;/em&gt;and put together everything that we have written so far there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this blog post I want to give some more examples of what can be done with our implementation right now and what we would like to be able to handle in the future.&lt;/p&gt;
&lt;h3&gt;Status Quo&lt;/h3&gt;
&lt;p&gt;After I wrote my last blog entry, we introduced a central idea/interface to our project: &lt;em&gt;short notations&lt;/em&gt;. By using the &lt;em&gt;short notation factory&lt;/em&gt; for growth groups (introduced in &lt;a href=&quot;http://trac.sagemath.org/ticket/18930&quot;&gt;#18930&lt;/a&gt;) it becomes very simple to construct the desired growth group. Essentially, &lt;em&gt;monomial growth groups&lt;/em&gt; (cf. &lt;a href=&quot;http://trac.sagemath.org/17600&quot;&gt;#17600&lt;/a&gt;), i.e. groups that contain elements of the form &lt;pre class=&quot;crayon-plain-tag&quot;&gt;variable^power&lt;/pre&gt; (for a fixed variable and powers from some base ring, e.g. the Integer Ring or even the Rational Field) are represented by &lt;pre class=&quot;crayon-plain-tag&quot;&gt;variable^base&lt;/pre&gt; , where the base ring is also specified via its shortened name. The &lt;em&gt;short notation factory&lt;/em&gt; then enables us to do the following:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: from sage.groups.asymptotic_growth_group import GrowthGroup
sage: G = GrowthGroup('x^ZZ'); G
Growth Group x^ZZ
sage: G.an_element()
x
sage: G = GrowthGroup('x^QQ'); G
Growth Group x^QQ
sage: G.an_element()
x^(1/2)&lt;/pre&gt;&lt;p&gt;Naturally, this interface carries over to the generation of asymptotic rings: instead of the (slightly dubious) &lt;pre class=&quot;crayon-plain-tag&quot;&gt;&quot;monomial&quot;&lt;/pre&gt; keyword advertised in my last blog entry, we can now actually construct the growth group by specifying the respective growth group via its short representation:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: R.&amp;lt;x&amp;gt; = AsymptoticRing('x^ZZ', QQ); R
Asymptotic Ring &amp;lt;x^ZZ&amp;gt; over Rational Field
sage: (x^2 + O(x))^50
x^100 + O(x^99)&lt;/pre&gt;&lt;p&gt;Recently, we also implemented another type of growth group: &lt;em&gt;exponential growth groups&lt;/em&gt; (see &lt;a href=&quot;http://trac.sagemath.org/ticket/19028&quot;&gt;#19028&lt;/a&gt;). These groups represent elements of the form &lt;pre class=&quot;crayon-plain-tag&quot;&gt;base^variable&lt;/pre&gt; where the base is from some multiplicative group. For example, we could do the following:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: G = GrowthGroup('QQ^x'); G
Growth Group QQ^x
sage: G.an_element()
(1/2)^x
sage: G(2^x) * G(3^x)
6^x
sage: G(5^x) * G((1/7)^x)
(5/7)^x&lt;/pre&gt;&lt;p&gt;Note: unfortunately, we did not implement a function that allows taking some element from some growth group (e.g. &lt;pre class=&quot;crayon-plain-tag&quot;&gt;x&lt;/pre&gt; from a monomial growth group) as the variable in an exponential growth group &lt;strong&gt;yet&lt;/strong&gt;. Implementing some way to &amp;#8220;change&amp;#8221; between growth groups by taking the log or the exponential function is one of our next steps.&lt;/p&gt;
&lt;p&gt;We also made this &lt;em&gt;short notation&lt;/em&gt; a central interface for working with &lt;em&gt;cartesian products&lt;/em&gt;. This is implemented in &lt;a href=&quot;http://trac.sagemath.org/ticket/18587&quot;&gt;#18587&lt;/a&gt;. For example, this allows to construct growth groups containing elements like $2^x \sqrt[5]{x^2} \log(x)^2$:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: G = GrowthGroup('QQ^x * x^QQ * log(x)^ZZ'); G
Growth Group QQ^x * x^QQ * log(x)^ZZ
sage: G.an_element()
(1/2)^x * x^(1/2) * log(x)
sage: G(2^x * x^(2/5) * log(x)^2)
2^x * x^(2/5) * log(x)^2&lt;/pre&gt;&lt;p&gt;Simple parsing from the symbolic ring (and from strings) is implemented. Like I have written above, operations like &lt;pre class=&quot;crayon-plain-tag&quot;&gt;2^G(x)&lt;/pre&gt; or &lt;pre class=&quot;crayon-plain-tag&quot;&gt;log(G(x))&lt;/pre&gt; are one of the next steps on our roadmap.&lt;/p&gt;
&lt;h3&gt;Further Steps&lt;/h3&gt;
&lt;p&gt;Of course, having an easy way to generate growth groups (and thus also asymptotic rings) is nice &amp;#8212; however, it would be even better if the process of finding the correct parent would be even more automated. Unfortunately, this requires some non-trivial effort regarding the pushout construction &amp;#8212; which will certainly not happen within the GSoC project.&lt;/p&gt;
&lt;p&gt;As soon as we have an efficient way to &amp;#8220;switch&amp;#8221; between factors of a growth group (e.g. by taking the logarithm or the exponential function), this has to be carried over up to the asymptotic ring. Operations like&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: 2^(x^2 + O(x))
2^(x^2) * 2^(O(x))&lt;/pre&gt;&lt;p&gt;where the output could also be &lt;pre class=&quot;crayon-plain-tag&quot;&gt;2^(x^2) * O(x^g)&lt;/pre&gt; , where $g$ is determined by &lt;pre class=&quot;crayon-plain-tag&quot;&gt;series_precision()&lt;/pre&gt; .&lt;/p&gt;
&lt;p&gt;Division of asymptotic expressions can be realized with just about the same idea, for example:&lt;/p&gt;
&lt;p&gt;\[ \frac{1}{x^2 + O(x)} = \frac{1}{x^2} \frac{1}{1 + O(1/x)} = x^{-2} + O(x^{-3}), \]&lt;/p&gt;
&lt;p&gt;and so on. If an infinite series occurs, it will have to be cut using an $O$-Term, most likely somehow depending on &lt;pre class=&quot;crayon-plain-tag&quot;&gt;series_precision()&lt;/pre&gt; as well.&lt;/p&gt;
&lt;p&gt;Ultimately, we would also like to incorporate, for example, Stirling&amp;#8217;s approximation of the factorial such that we could do something like&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: n.factorial()
sqrt(2*pi) * e^(n*log(n)) * (1/e)^n * n^(1/2) + ...&lt;/pre&gt;&lt;p&gt;which then can be used to obtain asymptotic expansions of binomial coefficients like $\binom{2n}{n}$:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: (2*n).factorial() / (n.factorial()^2)
1/sqrt(pi) * 4^n * n^(-1/2) + ...&lt;/pre&gt;&lt;p&gt;As you can see, there is still a lot of work within our &amp;#8220;Asymptotic Expressions&amp;#8221; project &amp;#8212; nevertheless, with the minimal working prototype and the ability to create cartesian products of growth groups, the fundament for all of this is already implemented! &lt;img src=&quot;https://s.w.org/images/core/emoji/72x72/1f609.png&quot; alt=&quot;😉&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;</content>
		<author>
			<name>Benjamin Hackl</name>
			<uri>http://benjamin-hackl.at/tag/gsoc15/</uri>
		</author>
		<source>
			<title type="html">GSoC15 – Benjamin Hackl</title>
			<link rel="self" href="http://benjamin-hackl.at/tag/gsoc15/feed/"/>
			<id>http://benjamin-hackl.at/tag/gsoc15/feed/</id>
			<updated>2016-03-04T16:30:22+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Conclusion of the Main Part of the Project</title>
		<link href="http://borassisagemath.blogspot.com/2015/08/conclusion-of-main-part-of-project.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-3180150143433384427</id>
		<updated>2015-08-16T06:59:35+00:00</updated>
		<content type="html">&lt;span&gt;Hi!&lt;/span&gt;&lt;br /&gt;&lt;span&gt;In this post, I will summarize the results obtained with the inclusion in Sage of Boost and igraph libraries. This was the main part of my Google Summer of Code project, and it was completed yesterday, when ticket 19003 was closed.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;We have increased the number of graph algorithms available in Sage from 66 to 98 (according to the list used in the initial comparison of the graph libraries [1]). Furthermore, we decreased the running-time of several Sage algorithms: in some cases, we have been able to improve the asymptotic running-time, obtaining up to 10000x improvements in our tests. Finally, during the inclusion of external algorithms, we have refactored and cleaned some of Sage source code, like the shortest path routines: we have standardized the input and the output of 15 routines related to shortest paths, and we have removed duplicate code as much as possible.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;More specifically, the first part of the project was the inclusion of Boost graph library: since the library is only available in C++, we had to develop an interface. This interface lets us convert easily a Sage graph into a Boost graph, and run algorithms on the converted graph. Then, we have written routines to re-translate the output into a Sage-readable format: this way, the complicated Boost library is &quot;hidden&quot;, and users can interact with it as they do with Sage. In particular, we have interfaced the following algorithms:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Edge connectivity (trac.sagemath.org/ticket/18564);&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Clustering coefficient &lt;/span&gt;&lt;span&gt;(trac.sagemath.org/ticket/18811);&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Cuthill-McKee and King vertex orderings &lt;/span&gt;&lt;span&gt;(trac.sagemath.org/ticket/18876);&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Minimum spanning tree&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(trac.sagemath.org/ticket/18910);&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Dijkstra, Bellman-Ford, Johnson shortest paths&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(trac.sagemath.org/ticket/18931);&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;All these algorithms were either not available in Sage, or quite slow, compared to the Boost routines. As far as we know, Boost does not offer other algorithms that improve Sage algorithms: however, if such algorithms are developed in the future, it will be very easy to include them, using the new interface.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;In the second part of the project, we included igraph: since this library already offers a Python interface, we decided to include it as an optional package (before it becomes a standard package, at least an year should pass [2]). To install the package, it is enough to type the following instruction from the Sage root folder:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;sage -i igraph&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # To install the igraph C core&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;sage -i python_igraph # To install the Python interface&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Then, we can easily interact with igraph: for a list of available routines, it is enough to type &quot;&lt;span&gt;igraph.&lt;/span&gt;&quot; and click tab twice. To convert a Sage graph &lt;span&gt;g_sage&lt;/span&gt; into an igraph graph it is enough to type &lt;span&gt;g_igraph = g_sage.igraph_graph()&lt;/span&gt;, while a Sage graph can be instantiated from an igraph graph through &lt;span&gt;g_sage=Graph(g_igraph)&lt;/span&gt; or &lt;span&gt;g_sage=DiGraph(g_igraph)&lt;/span&gt;. This way, all igraph algorithms are now available in Sage.&lt;br /&gt;&lt;br /&gt;Furthermore, we have included the igraph maximum flow algoritm inside the Sage corresponding function, obtaining significant improvements (for more information and benchmarks, we refer to ticket 19003 [3]).&lt;br /&gt;&lt;br /&gt;In conclusion, I think the project reached its main goal, the original plan was followed very closely, and we have been able to overcome all problems.&lt;br /&gt;&lt;br /&gt;Before closing this post, I would like to thank many people that helped me with great advices, and who provided great solutions to all the problems I faced. First of all, my mentor David Coudert: he always answered very fast to all my queries, and he gave me great suggestions to improve the quality of the code I wrote. Then, a very big help came from Nathann Cohen, who often cooperated with David in reviewing my code and proposing new solutions. Moreover, I have to thank Martin Cross, who gave me good suggestions with Boost graph library, and Volker Braun, who closed all my ticket. Finally, I have to thank the whole Sage community for giving me this great opportunity!&lt;br /&gt;&lt;br /&gt;[1] https://docs.google.com/spreadsheets/d/1Iu1hkQtRn9J-sgfZbQTu2RoXzyjoMEWP5-cm3nAwnWE/edit?usp=sharing&lt;br /&gt;[2] http://doc.sagemath.org/html/en/developer/coding_in_other.html&lt;br /&gt;[3] http://trac.sagemath.org/ticket/19003</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2016-03-14T08:30:18+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Why I am a paying member of cloud.sagemath</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/08/09/why-I-am-a-paying-user-of-cloud.sagemath/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/08/09/why-I-am-a-paying-user-of-cloud.sagemath/</id>
		<updated>2015-08-09T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;If you are not familiar with &lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sagemath&lt;/a&gt; it is a free
open source mathematics package that does simple things like expand algebraic
expressions as well as far more complex things (optimisation, graph theory,
combinatorics, game theory etc…). &lt;a href=&quot;https://cloud.sagemath.com&quot;&gt;Cloud.sagemath&lt;/a&gt;
is a truly amazing tool not just for Sage bu for scientific computation in
general and it’s &lt;strong&gt;free&lt;/strong&gt;. Completely 100% free. In this post I’ll explain why I
pay for it.&lt;/p&gt;

&lt;p&gt;A while ago, a colleague and I were having a chat about the fact that our site
Maple license hadn’t been renewed fast enough (or something similar to that). My
colleague was fairly annoyed by this saying something like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘We are kind of like professional athletes, if I played soccer at a
professional club I would have the best facilities available to me. There
would not be a question of me having the best boots.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I don’t think we ever finished this conversation (or at least I don’t really
remember what I said) but this is something that’s stayed with me for quite a
while.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First of all:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think there are probably a very large proportion of professional soccer
players who do not play at the very top level and so do not enjoy having access
to the very best facilities (I certainly wouldn’t consider myself the Ronaldo of
mathematics…).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secondly:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mathematicians are (in some ways) &lt;strong&gt;way cooler&lt;/strong&gt; than soccer players. We are
somewhat like magicians, in the past we have not needed much more than a pencil
and some paper to work our craft. Whilst a chemist/physicist/medical research
needs a lab and/or other things we can pretty much work just with a whiteboard.&lt;/p&gt;

&lt;p&gt;We are basically magicians. We can make something from nothing.&lt;/p&gt;

&lt;p&gt;Since moving to open source software for all my research and teaching this is
certainly how I’ve felt. Before discovering open source tools I needed to make
sure I had the correct licence or otherwise before I could work but this is no
longer the case. I just need a very basic computer (I bought a thinkpad for £60
the other day!) and I am just as powerful as I could want to be.&lt;/p&gt;

&lt;p&gt;This is even more &lt;strong&gt;true&lt;/strong&gt; with &lt;a href=&quot;https://cloud.sagemath.com&quot;&gt;cloud.sagemath&lt;/a&gt;.
Anyone can use a variety of scientific computing tools for no cost whatsoever
(not even a cost associated with the time spent installing software): it just
works. I have used this to work on sage source code with students, carry out
research and also to deliver presentations: it’s awesome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, why do I pay $7 month to use it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Firstly because it gives me the ability to move some projects to servers that
are supposedly more robust. I have no doubt that they are more robust but in all
honesty I can’t say I’ve seen problems with the ‘less’ robust servers (150 of my
students used them last year and will be doing so again in the Autumn).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The main reason I pay to use cloud.sagemath is because I can afford to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This was put in very clear terms to me during the organisation of &lt;a href=&quot;http://2015.djangocon.eu/&quot;&gt;DjangoCon
Europe&lt;/a&gt;. The principle at Python conferences is that
everyone pays to attend. This in turn ensures that funds are available for
people who cannot afford to pay to attend.&lt;/p&gt;

&lt;p&gt;I am in a lucky enough financial position that for about the price of two fancy
cups of coffee a month I can help support an absolutely amazing project that
helps everyone and anyone have the same powers a magician does. This helps
(although my contribution is obviously a very small part of it) ensure that
students and anyone else who cannot afford to help support the project, can use
Sage.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Simulating continuous Markov chains</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/08/01/simulating_continuous_markov_chains/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/08/01/simulating_continuous_markov_chains/</id>
		<updated>2015-08-01T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;In a blog post I wrote in 2013, &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2013/10/pigeon-holes-markov-chains-and-sagemath.html&quot;&gt;I showed how to simulate a discrete Markov
chain&lt;/a&gt;.
In this post we’ll (written with a bit of help from &lt;a href=&quot;https://twitter.com/geraintpalmer&quot;&gt;Geraint
Palmer&lt;/a&gt;) show how to do the same with a continuous chain which can be
used to speedily obtain steady state distributions for models of queueing
processes for example.&lt;/p&gt;

&lt;p&gt;A continuous Markov chain is defined by a transition &lt;strong&gt;rate&lt;/strong&gt; matrix which shows
the rates at which transitions from 1 state to an other occur. Here is an
example of a continuous Markov chain:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/continuous_markov_chain.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This has transition rate matrix \(Q\) given by:&lt;/p&gt;



&lt;p&gt;The diagonals have negative entries, which can be interpreted as a rate of &lt;em&gt;no
change&lt;/em&gt;. To obtain the steady state probabilities \(\pi\) for this chain we
can solve the following matrix equation:&lt;/p&gt;



&lt;p&gt;if we include the fact that the sum of \(\pi\) must be 1 (so that it is indeed
a probability vector) we can obtain the probabilities in
&lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sagemath&lt;/a&gt; using the following:&lt;/p&gt;

&lt;p&gt;You can run this here (just click on ‘Evaluate’):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;This returns:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thus, if we were to randomly observe this chain:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;25% of the time it would be in state 1;&lt;/li&gt;
  &lt;li&gt;50% of the time it would be in state 2;&lt;/li&gt;
  &lt;li&gt;25% of the time it would be in state 3.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the markov chain in question means that if we’re in the first state the
rate at which a change happens to go to the second state is 2 and the rate at
which a change happens that goes to the third state is 1.&lt;/p&gt;

&lt;p&gt;This is analagous to waiting at a bus stop at the first city. Buses to the
second city arrive randomly 2 per hour, and buses to the third city arrive
randomly 1 per hour. Everyone waiting for a bus catches the first one that
arrives.  So at steady state the population will be spread amongst the three
cities according to \(\pi\).&lt;/p&gt;

&lt;p&gt;Consider yourself at this bus stop. As all this is Markovian we do not care what
time you arrived at the bus stop (memoryless property). You expect the bus to
the second city to arrive 1/2 hours from now, with randomness, and the bus to
the third city to arrive 1 hour from now, with randomness.&lt;/p&gt;

&lt;p&gt;To simulate this we can sample two random numbers from the
exponential distribution and find out which bus arrives
first and ‘catch that bus’:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expovariate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expovariate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above returned (for this particular instance):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5003491524841699&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.6107995795458322&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So here it’s going to take .5 hours for a bus to the second city to arrive, whereas it
would take .61 hours for a bus to the third. So we would catch the bust to the second city after spending 0.5 hours at the first city.&lt;/p&gt;

&lt;p&gt;We can use this to write a function that will take a transition rate matrix,
simulate the transitions and keep track of the time spent in each state:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample_from_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oo&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expovariate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;simulate_cmc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warm_up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# In case a matrix is input&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Index the state space&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time_spent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Set up a dictionary to keep track of time&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Keep track of the clock&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# First state&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Sample the transitions&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sojourn_times&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample_from_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sojourn_times&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# An infinite sojourn to the same state&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sojourn_times&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample_from_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]]&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Identify the next state&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sojourn_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sojourn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sojourn_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sojourn&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warm_up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Keep track if past warm up time&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;time_spent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sojourn&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_state&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Transition&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_spent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_spent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Calculate probabilities&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here are the probabilities from the same Markov chain as above:&lt;/p&gt;

&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;which gave (on one particular run):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.25447326473556037&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.49567517998307603&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.24985155528136352&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This approach was used by &lt;a href=&quot;https://twitter.com/geraintpalmer&quot;&gt;Geraint
Palmer&lt;/a&gt; who is doing a PhD with &lt;a href=&quot;http://www.profpaulharper.com/&quot;&gt;Paul
Harper&lt;/a&gt; and I. He used this to verify that
calculations were being carried out correctly when he was trying to fit a
model. &lt;a href=&quot;https://plus.google.com/+JamesCampbell95/posts&quot;&gt;James Campbell&lt;/a&gt; and I
are going to try to use this to get an approximation for bigger chains that
cannot be solved analytically in a reasonable amount of time. In essence the
simulation of the Markov chain makes sure we spend time calculating
probabilities in states that are common.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Including igraph Library</title>
		<link href="http://borassisagemath.blogspot.com/2015/07/including-igraph-library.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-2060557766871480571</id>
		<updated>2015-07-27T09:07:42+00:00</updated>
		<content type="html">Hello!&lt;br /&gt;In this new blog post, I would like to discuss the inclusion of igraph library inside Sage.&lt;br /&gt;Up to now, I have interfaced Sagemath with Boost graph library, in order to run Boost algorithms inside Sage. Now, I want to do the same with igraph, the other major C++ graph library, which stands out because it contains 62 routines, 29 of which are not available in Sage. Moreover, igraph library is very efficient, as shown in [1] and in the previous post on library comparison.&lt;br /&gt;&lt;br /&gt;This inclusion of igraph in Sage is quite complicated, because we have to include a new external library [2] (while in the Boost case we already had the sources). We started this procedure through ticket &lt;a href=&quot;http://trac.sagemath.org/ticket/18929&quot;&gt;18929&lt;/a&gt;: unfortunately, after this ticket is closed, igraph will only be an optional package, and we will have to wait one year before it becomes standard. The disadvantage of optional packages is that they must be installed before being able to use them; however, the installation is quite easy: it is enough to run Sage with option &lt;span&gt;-i python_igraph&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;After the installation, the usage of igraph library is very simple, because igraph already provides a Python interface, that can be used in Sage. To transform the Sagemath network &lt;span&gt;g_sage&lt;/span&gt; into an igraph network &lt;span&gt;g_igraph&lt;/span&gt;, it is enough to type &lt;span&gt;g_igraph=g_sage.igraph_graph()&lt;/span&gt;, while to create a Sagemath network from an igraph network it is enough to type &lt;span&gt;g_sage = Graph(g_igraph)&lt;/span&gt; or &lt;span&gt;&lt;span&gt;&lt;/span&gt;g_sage=DiGraph(g_igraph)&lt;span&gt;&lt;/span&gt;&lt;/span&gt;. After this conversion, we can use all routines offered by igraph!&lt;br /&gt;For instance, if we want to create a graph through the preferential attachment model, we can do it with the Sagemath routine, or with the igraph routine:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: G = graphs.RandomBarabasiAlbert(100, 2)&lt;br /&gt;sage: G.num_verts()&lt;br /&gt;100&lt;br /&gt;sage: G = Graph(igraph.Graph.Barabasi(100, int(2)))&lt;br /&gt;sage: G.num_verts()&lt;br /&gt;100&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The result is the same (apart from randomness), but the time is very different:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: import igraph&lt;br /&gt;sage: %timeit G = Graph(igraph.Graph.Barabasi(10000000, int(2)))&lt;br /&gt;1 loops, best of 3: 46.2 s per loop&lt;/span&gt;&lt;br /&gt;&lt;span&gt;sage: G = graphs.RandomBarabasiAlbert(10000000, 2)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;Stopped after 3 hours.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Otherwise, we may use igraph to generate graphs with Forest-Fire algorithm, which is not available in Sagemath:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: G = Graph(igraph.Graph.Forest_Fire(10, 0.1))&lt;br /&gt;sage: G.edges()&lt;br /&gt;[(0, 1, None), (0, 2, None), (1, 7, None), (2, 3, None), (2, 4, None), (3, 5, None), (3, 8, None), (4, 6, None), (8, 9, None)]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;We may also do the converse: transform a Sage network into an igraph network and apply an igraph algorithm. For instance, we can use label propagation to find communities (a task which is not implemented in Sage):&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: G = graphs.CompleteGraph(5)+graphs.CompleteGraph(5)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;sage: G.add_edge(0,5)&lt;br /&gt;sage: com = G.igraph_graph().community_label_propagation()&lt;br /&gt;sage: len(com)&lt;br /&gt;2&lt;br /&gt;sage: com[0]&lt;br /&gt;[0, 1, 2, 3, 4]&lt;br /&gt;sage: com[1]&lt;br /&gt;[5, 6, 7, 8, 9]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The algorithm found the two initial cliques as communities.&lt;br /&gt;&lt;br /&gt;I hope that these examples are enough to show the excellent possibilities offered by igraph library, and that these features will soon be available in Sagemath!&lt;br /&gt;&lt;br /&gt;[1] &lt;a href=&quot;https://sites.google.com/a/imtlucca.it/borassi/unpublished-works/google-summer-of-code/library-comparison&quot;&gt;https://sites.google.com/a/imtlucca.it/borassi/unpublished-works/google-summer-of-code/library-comparison&lt;/a&gt;&lt;br /&gt;[2] &lt;a href=&quot;http://doc.sagemath.org/html/en/developer/packaging.html&quot;&gt;http://doc.sagemath.org/html/en/developer/packaging.html&lt;/a&gt;</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2016-03-14T08:30:18+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">A talk on computational game theory in Sagemath</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/07/27/A-talk-on-computational-game-theory-in-Sagemath/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/07/27/A-talk-on-computational-game-theory-in-Sagemath/</id>
		<updated>2015-07-27T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Today, Cardiff University, School of Mathematics students: James Campbell, Hannah
Lorrimore as well as Google Summer of Code student Tobenna P. Igwe (PhD student
at the University of Liverpool) as well as I presented the current game
theoretic capabilities of &lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sagemath&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This talk happened as part of a two day visit to see &lt;a href=&quot;http://www.cs.ox.ac.uk/people/dmitrii.pasechnik/&quot;&gt;Dima
Pasechnik&lt;/a&gt; to work on the
stuff we’ve been doing and the visit was kindly supported by
&lt;a href=&quot;http://www.codima.ac.uk/&quot;&gt;CoDiMa&lt;/a&gt; (an
EPSRC funded project to support the development of GAP and Sagemath)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the video of the talk:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
    
        
    
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.sagemath.com/projects/2a31f88b-4244-4bd1-8e3a-3169ff24daac/files/Talk-2015-07-27/talk.sagews&quot;&gt;Here is a link to the sage worksheet we used for the talk.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some photos I took during the talk:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-0apjrcG0qEw/VbZsAWAPXtI/AAAAAAABlSo/ZYWuBQSwnL8/w747-h560-no/IMG_20150727_151428.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/Mdhv4ZH7H6Yww9H8P6hTJ5C8PTuTI55ysCjQUe-PTZ0=w747-h560-no&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-p6qHJDfk-xc/VbZsAab_4yI/AAAAAAABlSo/aj65EG02mvo/w747-h560-no/IMG_20150727_152941.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and here are some I took of us working on code afterwards:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-qBweJME_HBg/VbZsARW7D_I/AAAAAAABlTI/8GHa-SPNSxg/w747-h560-no/IMG_20150727_155756.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-kZLhblBepTE/VbZsAYQk_CI/AAAAAAABlTA/2USGMza-jj8/w747-h560-no/IMG_20150727_175244.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the abstract of the talk:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Game Theory is the study of rational interaction and is getting increasingly important in CS. Ability to quickly compute a solution concept for a nontrivial (non-)cooperative game helps a lot in practical and theoretic work, as well as in teaching.
This talk will describe
and demonstrate the game theoretic capabilities of Sagemath
(http://www.sagemath.org/), a Python library, described as having the following mission:
‘Creating a viable free opensource alternative to Magma, Maple, Mathematica and
Matlab’.&lt;/p&gt;

&lt;p&gt;The talk will describe algorithms and classes that are implemented for the
computation of Nash equilibria in bimatrix games. These include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A support enumeration algorithm;&lt;/li&gt;
  &lt;li&gt;A reverse search algorithm through the lrs library;&lt;/li&gt;
  &lt;li&gt;The Lemke-Howson algorithm using the Gambit library (https://github.com/gambitproject/gambit).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to this, demonstrations of further capabilities that are actively being
developed will also be given:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tests for degeneracy in games;&lt;/li&gt;
  &lt;li&gt;A class for extensive form games which include the use of the graph
theoretic capabilities of Sage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following two developments which are being carried out as part of a
Google Summer of Code project will also be demonstrated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An implementation of the Lemke-Howson algorithm;&lt;/li&gt;
  &lt;li&gt;Extensions to N player games;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Demonstrations will use the (free) online tool cloud.sagemath which allows anyone with
connectivity to use Sage (and solve game theoretic problems!). Cloud.sagemath
also serves as a great teaching and research tool with access to not only Sage but Jupyter
(Ipython) notebooks, R, LaTeX and a variety of other software tools.&lt;/p&gt;

&lt;p&gt;The talk will concentrate on strategic non-cooperative games but matching games
and characteristic function games will also be briefly discussed.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Using the two thirds of the average game in class</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/07/23/Using-the-two-thirds-of-the-average-game-in-class/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/07/23/Using-the-two-thirds-of-the-average-game-in-class/</id>
		<updated>2015-07-23T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This past week I have been delighted to have a short pedagogic paper accepted
for publication in &lt;a href=&quot;https://journals.gre.ac.uk/index.php/msor&quot;&gt;MSOR
Connections&lt;/a&gt;. The paper is entitled:
“Playing Games: A Case Study in Active Learning Applied to Game Theory”. The
journal is open access and you can see a &lt;a href=&quot;https://github.com/drvinceknight/Playing-games-a-case-study-in-active-learning/blob/master/paper/paper.pdf&quot;&gt;pre print
here&lt;/a&gt;.
As well as describing some literature on active learning I also present some
data I’ve been collecting (with the help of others) as to how people play two
subsequent plays of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Guess_2/3_of_the_average&quot;&gt;two thirds of the average
game&lt;/a&gt; (and talk about
another game also).&lt;/p&gt;

&lt;p&gt;In this post I’ll briefly put up the results here as well as mention a
Python library I’m working on.&lt;/p&gt;

&lt;p&gt;If you’re not familiar with it, the two thirds of the average game asks players
to guess a number between 0 and 100. The closest number to 2/3rds of the average
number guessed is declared the winner.&lt;/p&gt;

&lt;p&gt;I use this all the time in class and during outreach events. I start by asking
participants to play without more explanation than the basic rules of the game.
Following this, as a group we go over some simple best response dynamics that
indicate that the equilibrium play for the game is for everyone to guess 0.
&lt;strong&gt;After this explanation, everyone plays again.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Below you can see how this game has gone as a collection of all the data I’ve
put together:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/histogram_of_guesses.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will note that some participants actually increase their second guess but in
general we see a possible indication (based on two data points, so obviously
this is not meant to be a conclusive statement) of convergence towards the
theoretic equilibria.&lt;/p&gt;

&lt;p&gt;Here is a plot showing the relationship between the first and second guess (when
removing the guesses that increase, although as you can see in the paper this
does not make much difference):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/jointplot_of_guesses_removing_increasing_guesses.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The significant linear relationship between the guesses is given by:&lt;/p&gt;



&lt;p&gt;So a good indication of what someone will guess in the second round is that it
would be a third of their first round guess.&lt;/p&gt;

&lt;p&gt;Here is some Sage code that produces the cobweb diagram assuming the following
sequence represents each guess (using &lt;a href=&quot;http://wiki.sagemath.org/interact/dynsys&quot;&gt;code by Marshall
Hampton&lt;/a&gt;):&lt;/p&gt;



&lt;div class=&quot;compute&quot;&gt;&lt;/div&gt;

&lt;p&gt;that plot shows the iterations of the hypothetical guesses if we were to play more rounds :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The other thing&lt;/strong&gt; I wanted to point at in this blog post is this
&lt;a href=&quot;https://github.com/drvinceknight/TwoThirds&quot;&gt;twothirds&lt;/a&gt; library which will
potentially allow anyone to analyse these games quickly. I’m still working on
it but if it’s of interest please do jump in :) I have put up a &lt;a href=&quot;https://github.com/drvinceknight/TwoThirds/blob/master/demo.ipynb&quot;&gt;Jupyter
notebook demoing what it can do so far (which is almost everything but with
some rough
edges)&lt;/a&gt;. If
you want to try it out, download that notebook and run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install twothirds&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hope that once the library is set up anyone who uses it could simply send
over data of game plays via PR which would help update the above plots and
conclusions :)&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-US">
		<title type="html">Computing with Asymptotic Expressions</title>
		<link href="http://benjamin-hackl.at/2015/07/16/computing-with-asymptotic-expressions/"/>
		<id>http://benjamin-hackl.at/?p=358</id>
		<updated>2015-07-16T15:42:43+00:00</updated>
		<content type="html">&lt;p&gt;It has been quite some time since my last update on the progress of &lt;a href=&quot;http://benjamin-hackl.at/2015/05/29/asymptotic-expressions-motivation/&quot;&gt;my Google Summer of Code project&lt;/a&gt;, which has two reasons. On the one hand, I have been busy because of the end of the semester, as well as because of the finalization of &lt;a href=&quot;http://benjamin-hackl.at/2015/07/03/master-thesis-submitted/&quot;&gt;my Master&amp;#8217;s thesis&lt;/a&gt; &amp;#8212; and on the other hand, it is not very interesting to write a post on discussing and implementing rather technical details. Nevertheless, &lt;a href=&quot;http://danielkrenn.at&quot;&gt;Daniel Krenn&lt;/a&gt; and myself have been quite busy in order to bring asymptotic expressions to SageMath. Fortunately, these efforts are starting to become quite fruitful.&lt;/p&gt;
&lt;p&gt;In this post I want to discuss our current implementation roadmap (i.e. not only for the remaining Summer of Code, but also for the time afterwards), and give some examples for what we are currently able to do.&lt;/p&gt;
&lt;h3&gt;Strutcture and Roadmap&lt;/h3&gt;
&lt;p&gt;An overview of the entire roadmap can be found at &lt;a href=&quot;http://trac.sagemath.org/17601&quot;&gt;here (trac #17601)&lt;/a&gt;. Recall that the &lt;a href=&quot;http://benjamin-hackl.at/2015/05/29/asymptotic-expressions-motivation/&quot;&gt;overall goal&lt;/a&gt; of this project is to bring asymptotic expressions like $2^n + n^2 \log n + O(n)$ to Sage. Our implementation (which aims to be as general and expandable as possible) tackles this problem with a &lt;em&gt;three-layer approach&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://trac.sagemath.org/17600&quot;&gt;GrowthGroups and GrowthElements (trac #17600)&lt;/a&gt;.&lt;/em&gt; These elements and parents manage the growth (and just the growth!) of a summand in an asymptotic expression like above. The simplest cases are &lt;em&gt;monomial&lt;/em&gt; and &lt;em&gt;logarithmic&lt;/em&gt; growth groups. For example, their elements are given by $n^r$ and $\log(n)^r$ where the exponent $r$ is from some ordered ring like $\mathbb{Z}$ or $\mathbb{Q}$. Both cases (monomial and logarithmic growth groups) can be handled in the current implementation &amp;#8212; however, growth elements like $n^2 \log n$ are intended to live in the cartesian product of a monomial and a logarithmic growth group (in the same variable). Parts of this infrastructure are already prepared (see &lt;a href=&quot;http://trac.sagemath.org/18587&quot;&gt;trac #18587&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://trac.sagemath.org/17715&quot;&gt;AsymptoticTerms and TermMonoids (trac #17715)&lt;/a&gt;. &lt;/em&gt;While GrowthElements only represent the growth, AsymptoticTerms have more information: basically, they represent a summand in an asymptotic expression. There are different classes for each type of asymptotic term (e.g. &lt;em&gt;ExactTerm &lt;/em&gt;and &lt;em&gt;OTerm &amp;#8212; &lt;/em&gt;with more to come). Additionally to a growth element, some types of asymptotic terms (like exact terms) also possess a coefficient.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://trac.sagemath.org/17716&quot;&gt;AsymptoticExpression and AsymptoticRing (trac #17716)&lt;/a&gt;. &lt;/em&gt;This is what we are currently working on, and we do have a running prototype! &lt;img src=&quot;http://benjamin-hackl.at/asdf-wp/wp-includes/images/smilies/simple-smile.png&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt; The version that can be found on trac is only missing some doctests and a bit of documentation. Asymptotic expressions are the central objects within this project, and essentially they are sums of several asymptotic terms. In the background, we use a special data structure (&amp;#8220;&lt;em&gt;mutable posets&lt;/em&gt;&amp;#8220;, &lt;a href=&quot;http://trac.sagemath.org/17693&quot;&gt;trac #17693&lt;/a&gt;) in order to model the (partial) order induced by the various growth elements belonging to an asymptotic expression. This allows to perform critical operations like &lt;em&gt;absorption&lt;/em&gt; (when an \(O\)-term absorbs &amp;#8220;weaker&amp;#8221; terms) efficiently and in a simple way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The resulting &lt;em&gt;minimal prototype&lt;/em&gt; can, in some sense, be compared to Sage&amp;#8217;s &lt;em&gt;PowerSeriesRing&lt;/em&gt;: however, we also allow non-integer exponents, and extending this prototype to work with multivariate expressions should not be too hard now, as the necessary infrastructure is there.&lt;/p&gt;
&lt;p&gt;Following the finalization of the &lt;em&gt;minimal prototype&lt;/em&gt;, there are several improvements to be made. Here are some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Besides addition and multiplication, we also want to &lt;em&gt;divide&lt;/em&gt; asymptotic expressions, and higher-order operations like exponentiation and taking the logarithm would be interesting as well.&lt;/li&gt;
&lt;li&gt;Also, conversion from, for example, the symbolic ring is important when it comes to usability of our tools. We will implement and enhance this conversion gradually.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;p&gt;An asymptotic ring (over a monomial growth group with coefficients and exponents from the rational field) can be created with&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: R.&amp;lt;x&amp;gt; = AsymptoticRing('monomial', QQ); R
Asymptotic Ring over Monomial Growth Group in x over Rational Field with coefficients from Rational Field&lt;/pre&gt;&lt;p&gt;Note that we marked the code as &lt;em&gt;experimental&lt;/em&gt;, meaning that you will see some warnings regarding the stability of the code. Now, as we have an asymptotic ring, we can do some calculations. For example, take $ (2\sqrt{x} + O(1))^{15}$:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: (2*x^(1/2) + O(x^0))^15
O(x^7) + 32768*x^(15/2)&lt;/pre&gt;&lt;p&gt;We can also have a look at the underlying structure:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: expr = (x^(3/7) + 2*x^(1/5)) * (x + O(x^0)); expr
O(x^(3/7)) + 2*x^(6/5) + 1*x^(10/7)
sage: expr.poset
poset(O(x^(3/7)), 2*x^(6/5), 1*x^(10/7))
sage: print expr.poset.full_repr()
poset(O(x^(3/7)), 2*x^(6/5), 1*x^(10/7))
+-- null
|   +-- no predecessors
|   +-- successors:   O(x^(3/7))
+-- O(x^(3/7))
|   +-- predecessors:   null
|   +-- successors:   2*x^(6/5)
+-- 2*x^(6/5)
|   +-- predecessors:   O(x^(3/7))
|   +-- successors:   1*x^(10/7)
+-- 1*x^(10/7)
|   +-- predecessors:   2*x^(6/5)
|   +-- successors:   oo
+-- oo
|   +-- predecessors:   1*x^(10/7)
|   +-- no successors&lt;/pre&gt;&lt;p&gt;As you might have noticed, the &amp;#8220;O&amp;#8221;-constructor that is used for the &lt;em&gt;PowerSeriesRing&lt;/em&gt; and related structures, can also be used here. In particular, $O(\mathit{expr})$ acts exactly as expected:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: expr
O(x^(3/7)) + 2*x^(6/5) + 1*x^(10/7)
sage: O(expr)
O(x^(10/7))&lt;/pre&gt;&lt;p&gt;Of course, the usual rules for computing with asymptotic expressions hold:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;sage: O(x) + O(x)
O(x)
sage: O(x) - O(x)
O(x)&lt;/pre&gt;&lt;p&gt;So far, so good. Our next step is making the &lt;em&gt;multivariate growth groups&lt;/em&gt; usable for the &lt;em&gt;AsymptoticRing&lt;/em&gt; and then improving the overall user interface of the ring.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content>
		<author>
			<name>Benjamin Hackl</name>
			<uri>http://benjamin-hackl.at/tag/gsoc15/</uri>
		</author>
		<source>
			<title type="html">GSoC15 – Benjamin Hackl</title>
			<link rel="self" href="http://benjamin-hackl.at/tag/gsoc15/feed/"/>
			<id>http://benjamin-hackl.at/tag/gsoc15/feed/</id>
			<updated>2016-03-04T16:30:22+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">New Boost Algorithms</title>
		<link href="http://borassisagemath.blogspot.com/2015/07/new-boost-algorithms.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-2595108397440560513</id>
		<updated>2015-07-09T12:51:47+00:00</updated>
		<content type="html">Hello!&lt;br /&gt;My Google Summer of Code project is continuing, and I am currently trying to include more Boost algorithms in Sage. In this post, I will make a list of the main algorithms I'm working on.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Clustering Coefficient&lt;/h4&gt;&lt;br /&gt;If two different people have a friend in common, there is a high chance that they will become friends: this is the property that the clustering coefficient tries to capture. For instance, if I pick two random people, very probably they will not know each other, but if I pick two of my acquaintances, very probably they will know each other. In this setting, the clustering coefficient of a person is the probability that two random acquaintances of this person know each other. In order to quantify this phenomenon, we can formalize everything in  terms of graphs: people are nodes and two people are connected if they  are acquaintances. Hence, we define the clustering coefficient of a vertex \(v\) in a graph  \(G=(V,E)\) as:&lt;br /&gt;$$\frac{2|\{(x,y) \in E:x,y \in N_v\}|}{\deg(v)(\deg(v)-1)}$$ where \(N_v\) is the set of neighbors of \(v\) and \(\deg(v)\) is the number of neighbors of \(v\). This is exactly the probability that two random neighbors of \(v\) are linked with an edge.&lt;br /&gt;My work has included in Sagemath the Boost algorithm to compute the clustering coefficient, which is more efficient that the previous algorithm, which was based on NetworkX:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: g = graphs.RandomGNM(20000,100000)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;sage: %timeit g.clustering_coeff(implementation='boost')&lt;/span&gt;&lt;br /&gt;&lt;span&gt;10 loops, best of 3: 258 ms per loop&lt;/span&gt;&lt;br /&gt;&lt;span&gt;sage: %timeit g.clustering_coeff(implementation='networkx')&lt;/span&gt;&lt;br /&gt;&lt;span&gt;1 loops, best of 3: 3.99 s per loop&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;But Nathann did better: he implemented a clustering coefficient algorithm from scratch, using Cython, and he managed to outperform the Boost algorithm, at least when the graph is dense. Congratulations, Nathann! However, when the graph is sparse, Boost algorithm still seems to be faster.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Dominator tree&lt;/h4&gt;&lt;br /&gt;Let us consider a road network, that is, a graph where vertices are street intersections, and edges are streets. The question is: if I close an intersection, where am I still able to go, assuming I am at home?&lt;br /&gt;The answer to this question can be summarized in a dominator tree. Assume that, in order to go from my home to my workplace, I can choose many different paths, but all these paths pass through the café, then they pass through the square (that is, if either the café or the square is closed, then there is no way I can go to work). In this case, in the dominator tree, the father of my workplace is the square, the father of the square is the café, and the father of the café is my home, that is also the root of the tree. More formally, given a graph \(G\), the dominator tree of \(G\) rooted at a vertex \(v\) is defined by connecting each vertex \(x\) with the last vertex \(y \neq x\) that belongs to each path from \(v\) to \(x\) (note that this vertex always exists, because \(v\) belongs to each path from \(v\) to \(x\)).&lt;br /&gt;Until now, Sagemath did not have a routine to compute the dominator tree: I have been able to include the Boost algorithm. Unfortunately, due to several suggestions and improvements in the code, the ticket is not closed, yet. Hopefully, it will be closed very soon!&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Cuthill-McKee ordering / King ordering&lt;/h4&gt;&lt;br /&gt;Let us consider a graph \(G=(V,E)\): a matrix \(M\) of size \(|V|\) can be associated to this graph, where \(M_{i,j}=1\) if and only if there is an edge between vertices \(i\) and \(j\).&lt;br /&gt;In some cases, this matrix can have specific properties, that can be exploited for many purposes, like speeding-up algorithms. One of this properties is bandwidth, which measures how far the matrix is from a diagonal matrix: it is defined as \(\max_{M_{i,j} \neq 0}|i-j|\). A small bandwidth might help in computing several properties of the graph, like eigenvalues and eigenvectors.&lt;br /&gt;Since the bandwidth depends on the order of vertices, we can try to permute them in order to obtain a smaller value: in Sage, we have a routine that performs this task. However, this routine is very slow, and it is prohibitive even for very small graphs (in any case, finding an optimal ordering is NP-hard).&lt;br /&gt;Hence, researchers have developed heuristics to compute good orderings: the most important ones are Cuthill-McKee ordering and King ordering. Boost contains both routines, but Sage does not: for this reason, I would like to insert these two functions. The code is almost ready, but part of it depends on the code of the dominator tree: as soon as the dominator tree is reviewed, I will open a ticket on these two routines!&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Dijkstra/Bellman-Ford/Johnson shortest paths&lt;/h4&gt;&lt;br /&gt;Let us consider again a road network. In this case, we are building a GPS software, which has to compute the shortest path between the place where we are and the destination. The textbook algorithm that performed this task is Dijkstra algorithm, which computes the distance between the starting point and any other reachable point (of course, there are more efficient algorithms involving a preprocessing, but Dijkstra is the most simple, and its running-time is asymptotically optimal). This algorithm is already implemented in Sagemath.&lt;br /&gt;Let's spice things up: what if that there are some streets with negative length? For instance, we like a street so much that we are willing to drive 100km more just to pass from that street, which is 50km long. It is like that street is -50km long!&lt;br /&gt;First of all, under these assumptions, a shortest path might not exist: if there is a cycle with negative length, we may drive along that cycle all the times we want, decreasing more and more the distance to the destination. At least, we have to assume that no negative cycle exists.&lt;br /&gt;Even with this assumption, Dijkstra algorithm does not work, and we have to perform Bellman-Ford algorithm, which is less efficient, but more general. Now, assume that we want something more: we are trying to compute the distance between all possible pairs of vertices. The first possibility is to run Bellman-Ford algorithm \(n\) times, where \(n\) is the number of nodes in the graph. But there is a better alternative: it is possible to perform Bellman-Ford algorithm only once, and then to modify the lengths of edges, so that all lengths are positive, and shortest paths are not changed. This way, we run Dijkstra algorithm \(n\) times on this modified graph, obtaining a better running time. This is Johnson algorithm.&lt;br /&gt;Both Bellman-Ford and Johnson algorithms are implemented in Boost and not in Sagemath. As soon as I manage to create weighted Boost graphs (that is, graphs where edges have a length), I will include also these two algorithm!</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2016-03-14T08:30:18+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Edge Connectivity through Boost Graph Library</title>
		<link href="http://borassisagemath.blogspot.com/2015/06/edge-connectivity-through-boost-graph_25.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-7547483421803460595</id>
		<updated>2015-06-25T00:56:40+00:00</updated>
		<content type="html">After two weeks, we have managed to interface Boost and Sagemath! &lt;br /&gt;&lt;br /&gt;However, the interface was not as simple as it seemed. The main problem we found is the genericity of Boost: almost all Boost algorithms work with several graph implementations, which differ in the data structures used to store edges and vertices. For instance, the code that implements breadth-first search works if the adjacency list of a vertex v is a vector, a list, a set, etc. This result is accomplished by using templates [1]. Unfortunately, the only way to interface Sagemath with C++ code is Cython, which is not template-friendly, yet. In particular, Cython provides genericity through fused types [2], whose support is still experimental, and which do not offer full integration with templates [3-5].&lt;br /&gt;&lt;br /&gt;After a thorough discussion with David, Nathann, and Martin (thank you very much!), we have found a solution: for the input, we have defined a fused type &quot;BoostGenGraph&quot;, including all Boost graph implementations, and all functions that interface Boost and Sagemath use this fused type. This way, for each algorithm, we may choose the most suitable graph implementation. For the output, whose type might be dependent on the input type, we use C++ to transform it into a &quot;standard&quot; type (vector, or struct).&lt;br /&gt;&lt;br /&gt;We like this solution because it is very clean, and it allows us to exploit Boost genericity without any copy-paste. Still, there are some drawbacks:&lt;br /&gt;1) Cython fused types do not allow nested calls of generic functions;&lt;br /&gt;2) Boost graphs cannot be converted to Python objects: they must be defined and deleted in the same Cython function;&lt;br /&gt;3) No variable can have a generic type, apart from the arguments of generic functions.&lt;br /&gt;&lt;br /&gt;These drawbacks will be overcome as soon as Cython makes templates and generic types interact: this way, we will be able create a much stronger interface, by writing a graph backend based on Boost, so that the user might create, convert, and modify Boost graphs directly from Python. However, for the moment, we will implement all algorithms using the current interface, which already provides genericity, and which has no drawback if the only goal is to &quot;steal&quot; algorithms from Boost.&lt;br /&gt;&lt;br /&gt;As a test, we have computed the edge connectivity of a graph through Boost: the code is available in ticket 18564 [6]. Since the algorithm provided by Sagemath is not optimal (it is based on linear programming), the difference in the running time is impressive, as shown by the following tests:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: G = graphs.RandomGNM(100,1000)&lt;br /&gt;sage: %timeit G.edge_connectivity()&lt;br /&gt;100 loops, best of 3: 1.42 ms per loop&lt;br /&gt;sage: %timeit G.edge_connectivity(implementation=&quot;sage&quot;)&lt;br /&gt;1 loops, best of 3: 11.3 s per loop&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: G = graphs.RandomBarabasiAlbert(300,3)&lt;br /&gt;sage: %timeit G.edge_connectivity(implementation=&quot;sage&quot;)&lt;br /&gt;1 loops, best of 3: 9.96 s per loop&lt;br /&gt;sage: %timeit G.edge_connectivity()&lt;br /&gt;100 loops, best of 3: 3.33 ms per loop&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Basically, on a random Erdos-Renyi graph with 100 vertices and 1000 edges, the new algorithm is 8,000 times faster, and on a random Barabasi-Albert graph with 300 nodes and average degree 3, the new algorithm is 3,000 times faster! This way, we can compute the edge connectivity of much bigger graphs, like a random Erdos-Renyi graph with 5,000 vertices and 50,000 edges:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;sage: G = graphs.RandomGNM(5,000, 50,000)&lt;br /&gt;sage: %timeit G.edge_connectivity()&lt;br /&gt;1 loops, best of 3: 16.2 s per loop&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The results obtained with this first algorithm are very promising: in the next days, we plan to interface several other algorithms, in order to improve both the number of available routines and the speed of Sagemath graph library!&lt;br /&gt;&lt;br /&gt;[1] https://en.wikipedia.org/wiki/Template_%28C%2B%2B%29&lt;br /&gt;[2] http://docs.cython.org/src/userguide/fusedtypes.html&lt;br /&gt;[3] https://groups.google.com/forum/#!topic/cython-users/qQpMo3hGQqI&lt;br /&gt;[4] https://groups.google.com/forum/#!searchin/cython-users/fused/cython-users/-7cHr6Iz00Y/Z8rS03P7-_4J&lt;br /&gt;[5] https://groups.google.com/forum/#!searchin/cython-users/fused$20template/cython-users/-7cHr6Iz00Y/Z8rS03P7-_4J&lt;br /&gt;[6] http://trac.sagemath.org/ticket/18564</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2016-03-14T08:30:18+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">On testing degeneracy of bi-matrix games</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/06/25/on_testing_degeneracy_of_games/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/06/25/on_testing_degeneracy_of_games/</id>
		<updated>2015-06-25T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;We (&lt;a href=&quot;https://plus.google.com/+JamesCampbell95/posts&quot;&gt;James Campbell&lt;/a&gt; and Vince Knight are writing this together) have been working
on implementing code in &lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sage&lt;/a&gt; to test if a game is
degenerate or not. In this post we’ll prove a simple result that is used in the
algorithm that we are/have implemented.&lt;/p&gt;

&lt;h2 id=&quot;bi-matrix-games&quot;&gt;Bi-Matrix games&lt;/h2&gt;

&lt;p&gt;For a general overview of these sorts of things take a look at &lt;a href=&quot;http://vknight.org/unpeudemath/code/2014/12/10/sneak-preview-of-game-theory-in-sage-3-of-3/&quot;&gt;this post from a
while ago on the subject of bi-matrix games in
Sage&lt;/a&gt;.
A bi-matrix is a matrix of tuples corresponding to payoffs for a 2 player Normal Form Game.
Rows represent strategies for the first player and columns represent strategies
for the second player, and each tuple of the bi-matrix corresponds to a tuple of
payoffs. Here is an example:&lt;/p&gt;



&lt;p&gt;We see that if the first player plays their third row strategy and the second
player their second column strategy then the first player gets a utility of 6
and the second player a utility of 1.&lt;/p&gt;

&lt;p&gt;This can also be written as two separate matrices.
A matrix \(A\) for Player 1 and \(B\) for Player 2.&lt;/p&gt;



&lt;p&gt;Here is how this can be constructed in Sage using the &lt;code&gt;NormalFormGame&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalFormGame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Normal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;following&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Currently, within Sage, we can obtain the Nash equilibria of games:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtain_nash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We see that this game has 3 Nash equilibria. For each, we see that the
supports (the number of non zero entries) of both players’ strategies are the
same size. This is, in fact, a theoretical certainty when games are &lt;strong&gt;non
degenerate&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If we modify the game slightly:&lt;/p&gt;



&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalFormGame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obtain_nash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We see that the second equilibrium has supports of different sizes. In fact,
 if the first player did play \((1,0,0)\) (in other words just play the
first row) the second player could play &lt;strong&gt;any mixture&lt;/strong&gt; of strategies as a best
response and not particularly \((2/3,1/3)\). This is because the game in
consideration is now &lt;strong&gt;degenerate&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;(Note that both of the games above are taken from
&lt;a href=&quot;https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CCEQFjAA&amp;url=http%3A%2F%2Fwww.cambridge.org%2Fjournals%2Fnisan%2Fdownloads%2FNisan_Non-printable.pdf&amp;ei=bymLVdTxBaS27gbYhILABg&amp;usg=AFQjCNGcYWvHGjECHZGGUuCMaENGCP2HYw&amp;sig2=w6RVpLM9DYILh2gbzOPRqw&amp;bvm=bv.96339352,bs.1,d.bGg&quot;&gt;Nisan et al. 2007 [pdf]&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-degenerate-game&quot;&gt;What is a degenerate game&lt;/h2&gt;

&lt;p&gt;A bimatrix game is called nondegenerate if the number of pure best responses to
a mixed strategy never exceeds the size of its support.
In a degenerate game, this definition is violated, for example if there is a
pure strategy that has two pure best responses (as in the example above), but
it is also possible to have a mixed strategy with support size \(k\) that
has \(k+1\) strategies that are a best response.&lt;/p&gt;

&lt;p&gt;Here is an example of this:&lt;/p&gt;



&lt;p&gt;If we consider the mixed strategy for player 2: \(y=(1/2,1/2)\), then the
utility to player 1 is given by:&lt;/p&gt;



&lt;p&gt;We see that there are 3 best responses to \(y\) and as \(y\) has support
size 2 this implies that the game above is degenerate.&lt;/p&gt;

&lt;h2 id=&quot;what-does-the-literature-say-about-degenerate-games&quot;&gt;What does the literature say about degenerate games&lt;/h2&gt;

&lt;p&gt;The original definition of degenerate games was given in &lt;a href=&quot;http://www.math.mcgill.ca/vetta/CS764.dir/lemke.pdf&quot;&gt;Lemke, Howson
1964 [pdf]&lt;/a&gt;
and their definition was dependent on the labeling polytope that they used for
their famous algorithm for the computation of equilibria (which is currently
being implemented in Sage!).
Further to this &lt;a href=&quot;https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CCEQFjAA&amp;url=http%3A%2F%2Fwww.cis.upenn.edu%2F~mkearns%2Fteaching%2Fcgt%2Fstengel.ps&amp;ei=HCmLVZ-vJOWM7Aa8_7kQ&amp;usg=AFQjCNGb_r3PDIvTBl4N3UXi55kDR_01OQ&amp;sig2=9yUZEl49EmM5nAUD95oOjg&amp;bvm=bv.96339352,bs.1,d.bGg&quot;&gt;Stengel
1999 [ps]&lt;/a&gt; offers a nice overview of a variety of
equivalent definitions.&lt;/p&gt;

&lt;p&gt;Sadly, all of these definitions require finding a particular mixed strategy
profile \((x, y)\) for which a particular condition holds.
To be able to implement a test for degeneracy based on any of these definitions
would require a continuous search over possible mixed strategy pairs.&lt;/p&gt;

&lt;p&gt;In the previous example (where we take \(y=(1/2,1/2)\) we could have
identified this \(y\) by looking at the utilities for each pure strategy for
player 1 against \(y=(y_1, 1-y_1)\):&lt;/p&gt;







&lt;p&gt;(\(r_i\) denotes row strategy \(i\) for player 1.)
A plot of this is shown:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/plot_for_degenerate_game_post.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can (in this instance) quickly search through values of \(y_1\) and
identify the point that has &lt;strong&gt;the most&lt;/strong&gt; best responses which gives the best
chance of passing the degeneracy condition (\(y_1=1/2\)).
This is not really practical from a generic point of view which leads to
this blog post: we have identified what the particular \(x, y\) is that
is sufficient to test.&lt;/p&gt;

&lt;h2 id=&quot;a-sufficient-mixed-strategy-to-test-for-degeneracy&quot;&gt;A sufficient mixed strategy to test for degeneracy&lt;/h2&gt;

&lt;p&gt;The definition of degeneracy can be written as:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Def.&lt;/strong&gt; A Normal Form Game is degenerate iff:&lt;/p&gt;

&lt;p&gt;There exists \(x\in \Delta X\) such that \( |S(x)| &amp;lt; |\sigma_2| \)
where \(\sigma_2\) is the support such that \( (xB)_j = \max(xB) \), for all
\(j \) in \( \sigma_2\).&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;There exists \(y\in \Delta Y\) such that \( |S(x)| &amp;lt; |\sigma_1| \)
where \(\sigma_1\) is the support such that \( (Ay)_i = \max(Ay) \), for all
\(i \) in \( \sigma_1\).&lt;/p&gt;

&lt;p&gt;(\(X\) and \(Y\) are the pure strategies for player 1 and 2 and \(\Delta X,
\Delta Y\) the corresponding mixed strategies spaces.&lt;/p&gt;

&lt;p&gt;The result we are implementing in Sage aims to remove the need to search
particular mixed strategies \(x, y\) (a continuous search) and replace
that by a search over supports (a discrete search).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt; A Normal Form Game is degenerate iff:&lt;/p&gt;

&lt;p&gt;There exists \( \sigma_1 \subseteq X \) and \( \sigma_2 \subseteq Y \)
such that \( |\sigma_1| &amp;lt; |\sigma_2| \) and \( S(x^*) = \sigma_1 \)
where \( x^* \) is a solution of \( (xB)_j = \max(xB) \), for
all \(j \) in \( \sigma_2 \) (note that a valid \(x^*\) is understood to
be a mixed strategy vector).&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;There exists \( \sigma_1 \subseteq X \) and \( \sigma_2 \subseteq Y \)
such that \( |\sigma_1| &amp;gt; |\sigma_2| \) and \( S(y^*) = \sigma_2 \)
where \( y^* \) is a solution of \( (Ay)_i = \max(Ay) \), for
all \(i \) in \( \sigma_1 \).&lt;/p&gt;

&lt;p&gt;Using the definition given above the proof is relatively straightforward but we
will include it below (mainly to try and convince ourselves that we haven’t made a
mistake).&lt;/p&gt;

&lt;p&gt;We will only consider the first part of each condition (the ones for the first
player). The result follows in the same way for the second player.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof \(\Leftarrow\)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Assume a game defined by \(A, B\) is degenerate, by the above &lt;strong&gt;definition&lt;/strong&gt;
without loss of generality this implies that there exists an
\(x\in \Delta X\) such that \( |S(x)| &amp;lt; |\sigma_2| \)
where \(\sigma_2\) is the support such that \( (xB)_j = \max(xB) \), for all
\(j \) in \( \sigma_2\).&lt;/p&gt;

&lt;p&gt;If we denote \(S(x)\) by \(\sigma_1\)
then the definition implies that \(|\sigma_1| &amp;lt; |\sigma_2| \)
and further more that \( (xB)_j = \max(xB) \), for all \(j \) in \( \sigma_2 \) as required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof \(\Rightarrow\)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we now assume that we have \(\sigma_1, \sigma_2, x^*\) as per the first part
of the theorem then we have \(|\sigma_1|&amp;lt;|\sigma_2|\) and taking \(x=x^*\)
implies that \(|S(x)|&amp;lt;|\sigma_2|\). Furthermore as \(x^*\) is a solution of
\( (xB)_j = \max(xB) \) the result follows (by the &lt;strong&gt;definition&lt;/strong&gt; given above).&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;This result implies that we simply need to consider all potential pairs of
supports. Depending on the relative size of the supports we can use one of the
two conditions of the result. If we ordered the supports by size the situation
for the two player game looks somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/diagram_for_search_space_for_post_on_degenerate_game.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that for an \(m\times n\) game there are \((2^m-1)\) potential supports
for player 1 (the size of the powerset of strategy set without the empty set)
and \((2^n-1)\) potential supports of for player 2.
Thus the rectangle drawn above has dimension \((2^m-1)\times(2^n-1)\).
Needless to say that our implementation will not be efficient (testing
degeneracy is after all an NP complete problem in linear programming (see &lt;a href=&quot;http://www-personal.umich.edu/~murty/np-comp_prob_lin_prog.pdf&quot;&gt;Chandrasekaran 1982 - [pdf]&lt;/a&gt;) but at least we
have identified exactly which mixed strategy we need to test for each support
pair.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Chandrasekaran, R., Santosh N. Kabadi, and Katta G. Murthy. “Some NP-complete
problems in linear programming.” Operations Research Letters 1.3 (1982):
101-104.
&lt;a href=&quot;http://www-personal.umich.edu/~murty/np-comp_prob_lin_prog.pdf&quot;&gt;[pdf]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lemke, Carlton E., and Joseph T. Howson, Jr. “Equilibrium points of bimatrix
games.” Journal of the Society for Industrial &amp;amp; Applied Mathematics 12.2
(1964): 413-423. &lt;a href=&quot;http://www.math.mcgill.ca/vetta/CS764.dir/lemke.pdf&quot;&gt;[pdf]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;N Nisan, T Roughgarden, E Tardos, VV Vazirani Vol. 1. Cambridge:
Cambridge University Press, 2007. &lt;a href=&quot;https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CCEQFjAA&amp;url=http%3A%2F%2Fwww.cambridge.org%2Fjournals%2Fnisan%2Fdownloads%2FNisan_Non-printable.pdf&amp;ei=bymLVdTxBaS27gbYhILABg&amp;usg=AFQjCNGcYWvHGjECHZGGUuCMaENGCP2HYw&amp;sig2=w6RVpLM9DYILh2gbzOPRqw&amp;bvm=bv.96339352,bs.1,d.bGg&quot;&gt;[pdf]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;von Stengel, B. “Computing equilibria for two person games.” Technical report.
&lt;a href=&quot;https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CCEQFjAA&amp;url=http%3A%2F%2Fwww.cis.upenn.edu%2F~mkearns%2Fteaching%2Fcgt%2Fstengel.ps&amp;ei=HCmLVZ-vJOWM7Aa8_7kQ&amp;usg=AFQjCNGb_r3PDIvTBl4N3UXi55kDR_01OQ&amp;sig2=9yUZEl49EmM5nAUD95oOjg&amp;bvm=bv.96339352,bs.1,d.bGg&quot;&gt;[ps]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Python, natural language processing and predicting funny</title>
		<link href="http://drvinceknight.github.io/unpeudemath/code/2015/06/14/natural-language-and-predicting-funny/"/>
		<id>http://drvinceknight.github.io/unpeudemath/code/2015/06/14/natural-language-and-predicting-funny/</id>
		<updated>2015-06-14T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Every year there is a big festival in Edinburgh called &lt;a href=&quot;https://tickets.edfringe.com/?gclid=Cj0KEQjwzPSrBRC_oOXfxPWP6t0BEiQARqav2KeTlfbBfcnFIHJN6llKStyz-2p1di-dm69gm88C3B0aAivP8P8HAQ&quot;&gt;the fringe
festival&lt;/a&gt;.
I blogged about this a while ago, &lt;a href=&quot;http://drvinceknight.blogspot.co.uk/2013/08/a-very-brief-and-shallow-analysis-of.html&quot;&gt;in that post I did a very basic bit of
natural language
processing&lt;/a&gt;
aiming to try and identify what made things funny.
In this blog post I’m going to push that a bit further by building a
classification model that aims to predict if a joke is funny or not.
(tldr: I don’t really succeed but but that’s mainly because I have very little
data - having more data would not necessarily guarantee success either but the code and approach is what’s worth taking from this post… 😪).&lt;/p&gt;

&lt;p&gt;If you want to skip the brief description and go straight to look at the code
you can find the &lt;a href=&quot;https://github.com/drvinceknight/EdinburghFringeJokes/blob/master/nlp-of-jokes.ipynb&quot;&gt;ipython notebook on github
here&lt;/a&gt; and &lt;a href=&quot;https://cloud.sagemath.com/projects/a4f27edc-8528-4c7f-adf7-b6c790e29349/files/nlp-of-jokes.html&quot;&gt;on cloud.sagemath here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;data&lt;/strong&gt; comes from a series of &lt;a href=&quot;http://www.bbc.co.uk/news/uk-scotland-edinburgh-east-fife-28838287&quot;&gt;BBC
articles&lt;/a&gt;
which reports (more or less every year since 2011?) the top ten jokes at the
fringe festival. This does in fact only give 60 odd jokes to work with…&lt;/p&gt;

&lt;p&gt;Here is the latest winner (by Tim Vine):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I decided to sell my Hoover… well it was just collecting dust.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After cleaning it up slightly I’ve thrown that all in a &lt;a href=&quot;https://github.com/drvinceknight/EdinburghFringeJokes/blob/master/jokes.json&quot;&gt;&lt;code&gt;json&lt;/code&gt; file here&lt;/a&gt;.
So in order to import the data in to a panda data frame I just run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pandas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'jokes.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Loading the json file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pandas is great, I’ve been used to creating my own bespoke classes for handling
data but in general just using pandas does the exact right job.
At this point I basically follow along with
&lt;a href=&quot;http://www.laurentluce.com/posts/twitter-sentiment-analysis-using-python-and-nltk/&quot;&gt;this post on sentiment analysis of twitter&lt;/a&gt; which makes use of the ridiculously powerful &lt;code&gt;nltk&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;nltk&lt;/code&gt; library to ‘tokenise’ and get rid of common words:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;commonwords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nltk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corpus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopwords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'english'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# &amp;lt;- Need to download the corpus: import nltk; nltk.download()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;commonwords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'VE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Adding a couple of things that need to be removed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tokenizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nltk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokenize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegexpTokenizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'\w+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# To be able to strip out unwanted things in strings&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string_to_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokenize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commonwords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Joke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Raw_joke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this requires downloading one of the awesome corpuses
(&lt;a href=&quot;https://www.google.co.uk/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;es_th=1&amp;ie=UTF-8#q=plural%20of%20corpus&amp;es_th=1&quot;&gt;thats apparently the right way to say that&lt;/a&gt;) from nltk.&lt;/p&gt;

&lt;p&gt;Here is how this looks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'I decided to sell my Hoover... well it was just collecting dust.'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which gives:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'DECIDED'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'SELL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'HOOVER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'WELL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'COLLECTING'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'DUST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;we-can-now-get-started-on-building-a-classifier&quot;&gt;We can now get started on building a classifier&lt;/h2&gt;

&lt;p&gt;Here is the general idea of what will be happening:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/description_of_ratio_learning_for_nlp_jokes.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First of all we need to build up the ‘features’ of each joke,
in other words pull the words out in to a nice easy format.&lt;/p&gt;

&lt;p&gt;To do that we need to find all the words from our training data set, another way of describing this is that we need to build up our dictionary:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_all_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    A function that gets all the words from the Joke column in a given dataframe&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;all_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jk&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Joke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;all_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_words&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;all_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_all_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# This uses all jokes before 2013 as our training data set.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We then build something that will tell us for each joke which of the overall words is in it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'contains(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Once we have done that, we just need to decide what we will call a &lt;strong&gt;funny&lt;/strong&gt; joke&lt;/em&gt;. For this purpose
We’ll use a &lt;code&gt;funny_threshold&lt;/code&gt; and any joke that ranks above the
&lt;code&gt;funny_threshold&lt;/code&gt; in any given year will be considered &lt;strong&gt;funny&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;funny_threshold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rank'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rank'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Funny'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rank'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funny_threshold&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we just need to create a tuple for each joke that puts the features mentioned earlier and a classification (if the joke was funny or not) together:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Labeled_Feature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Features'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Funny'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can now (&lt;strong&gt;in one line of code!!!!&lt;/strong&gt;) create a classifier:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nltk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NaiveBayesClassifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Labeled_Feature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This classifier will take into account all the words in a given joke and spit out if it’s funny or not.
It can also give us some indication as to what makes a joke funny or not:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show_most_informative_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is the output of that:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;Most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Informative&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Features&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;2.4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KNOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEOPLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRIEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOUGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This immediately gives us some information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If your joke is about &lt;code&gt;SEX&lt;/code&gt; is it more likely to &lt;em&gt;not&lt;/em&gt; be funny.&lt;/li&gt;
  &lt;li&gt;If your joke is about &lt;code&gt;FRIEND&lt;/code&gt;s is it more likely to &lt;em&gt;be&lt;/em&gt; funny.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all very nice but we can now (theoretically - again, I really don’t have enough data for this) start using the mathematical model to tell you if something is funny:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Why was 10 afraid of 7? Because 7 8 9'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_all_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That joke is apparently funny (the output of above is &lt;code&gt;True&lt;/code&gt;). The following joke however is apparently not (the output of below if &lt;code&gt;False&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Your mother is ...'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_all_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see in the &lt;a href=&quot;https://github.com/drvinceknight/EdinburghFringeJokes/blob/master/nlp-of-jokes.ipynb&quot;&gt;ipython notebook&lt;/a&gt;
it is then very easy to measure how good the predictions are
(I used the data from years before 2013 to predict 2014).&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;Here is a plot of the accuracy of the classifier for changing values of &lt;code&gt;funny_threshold&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/varying_values_of_funny_threshold.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll notice a couple of things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When the threshold is 0 or 1: the classifier works perfectly.
This makes sense: all the jokes are either funny or not so it’s very easy
for the classifier to do well.&lt;/li&gt;
  &lt;li&gt;There seems to be a couple of regions where the classifier does
particularly poorly: just after a value of 4. Indeed there are points where
the classifier does worse than flipping a coin.&lt;/li&gt;
  &lt;li&gt;At a value of 4, the classifier does particularly well!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, one final thing I’ll take a look at is what happens if I start
randomly selecting a portion of the entire data set to be the training set:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/description_of_random_ratio_learning_for_nlp_jokes.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Below are 10 plots that correspond to 50 repetitions of the above where I
randomly sample a ratio of the data set to be the training set:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally (although it’s really not helpful), here are all of those on a single plot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/joke_classification_moving_ratio_threshold-all.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First of all: all those plots are basically one line of &lt;a href=&quot;http://stanford.edu/~mwaskom/software/seaborn/&quot;&gt;&lt;code&gt;seaborn&lt;/code&gt; code&lt;/a&gt; which is ridiculously cool&lt;/strong&gt;. Seaborn is basically magic:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tsplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Second of all, it looks like the lower bound of the classifiers is around .5.
Most of them start of at .5, in other words they are as good as flipping a coin
before we let them learn from anything, which makes sense.
Finally it seems that the threshold of 4 classifier seems to be the only one that
gradually improves as more data is given to it. That’s perhaps indicating that
something interesting is happening there but that investigation would be for another day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All of the conclusions about the actual data should certainly not be taken seriously:
I simply do not have enough data.&lt;/strong&gt; But, the overall process and code is what is worth taking away.
&lt;strong&gt;It’s pretty neat that the variety of awesome python libraries
lets you do this sort of thing more or less out of the box.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please do take a look at &lt;a href=&quot;https://github.com/drvinceknight/EdinburghFringeJokes&quot;&gt;this github repository&lt;/a&gt;
but I’ve also just put the notebook on &lt;a href=&quot;https://cloud.sagemath.com/&quot;&gt;cloud.sagemath&lt;/a&gt; so assuming you
&lt;code&gt;pip install&lt;/code&gt; the libraries and get the data etc you can play around with this right in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.sagemath.com/projects/a4f27edc-8528-4c7f-adf7-b6c790e29349/files/nlp-of-jokes.html&quot;&gt;Here is the notebook on cloud.sagemath&lt;/a&gt;.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Performance Comparison of Different Graph Libraries</title>
		<link href="http://borassisagemath.blogspot.com/2015/06/performance-comparison-of-different.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-517109036063053537</id>
		<updated>2015-06-09T07:30:46+00:00</updated>
		<content type="html">As promised in the last post, I have compared the performances of several graph libraries, in order to choose which ones should be deployed with Sagemath. Here, I provide the main results of this analysis, while more details are available on &lt;a href=&quot;https://sites.google.com/a/imtlucca.it/borassi/unpublished-works/google-summer-of-code/library-comparison&quot;&gt;my website&lt;/a&gt; (see also the links below).&lt;br /&gt;The libraries chosen are the most famous graph libraries written in Python, C, or C++ (I have chosen these languages because they are easier to integrate in Sagemath, using Cython). Furthermore, I have excluded NetworkX, which is already deployed with Sagemath.&lt;br /&gt;First of all, I have to enforce that no graph library comparison can be completely fair, and also this comparison can be criticized, due to the large amount of available routines, to the constant evolution of libraries, and to many small differences in the outputs (for instance, one library might compute the value of a maximum s-t flow, another library might actually compute the flow, and a third one might compute all maximum flows). Despite this, I have tried to be as fair as possible, through a deeper and more detailed analysis than previous comparisons (&lt;a href=&quot;https://graph-tool.skewed.de/performance&quot;&gt;https://graph-tool.skewed.de/performance&lt;/a&gt;, &lt;a href=&quot;http://www.programmershare.com/3210372/&quot;&gt;http://www.programmershare.com/3210372/&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/pdf/1403.3005.pdf&quot;&gt;http://arxiv.org/pdf/1403.3005.pdf&lt;/a&gt;).&lt;br /&gt;The first comparison deals with the number of algorithms implemented. I have chosen a set of 107 possible algorithms, trying to cover all possible tasks that a graph library should perform (avoiding easy tasks that are common to all libraries, like outputting the number of nodes, the number of edges, the neighbors of a node, etc). In some cases, two tasks were collapsed in one, if the algorithms solving these tasks are very similar (for instance, computing a maximum flow and computing a minimum cut, computing vertex betweenness and edge betweenness, etc).&lt;br /&gt;The number of routines available for each library is plotted in the following chart, and a table containing all features is available in &lt;a href=&quot;https://sites.google.com/a/imtlucca.it/borassi/unpublished-works/google-summer-of-code/library-comparison/detailed-feature-comparison&quot;&gt;HTML&lt;/a&gt; or as a &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1Iu1hkQtRn9J-sgfZbQTu2RoXzyjoMEWP5-cm3nAwnWE/edit?usp=sharing&quot;&gt;Google Sheet&lt;/a&gt;.&lt;br /&gt;        &lt;br /&gt;The results show that Sagemath has more routines than all competitors (66), closely followed by igraph (62). All other libraries are very close to each other, having about 30 routines each. Furthermore, Sagemath could be improved in the fields of neighbor similarity measures (assortativity, bibcoupling, cocitation, etc), community detection, and random graph generators. For instance, igraph contains 29 routines that are not available in Sagemath.&lt;br /&gt;&lt;br /&gt;The second comparison analyzes the running-time of some of the algorithms implemented in the libraries. In particular, I have chosen 8 of the most common tasks in graph analysis: computing the diameter, computing the maximum flow between two vertices, finding connected components and strongly connected components, computing betweenness centrality, computing the clustering coefficient, computing the clique number, and generating a graph with the preferential attachment model. I have run each of these algorithms on 3 inputs, and I have considered the total execution time (excluding the time needed to load the graph). More details on this experiment are available &lt;a href=&quot;https://sites.google.com/a/imtlucca.it/borassi/unpublished-works/google-summer-of-code/library-comparison/detailed-performance-comparison&quot;&gt;here&lt;/a&gt;, and the results are also available in a &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1Iu1hkQtRn9J-sgfZbQTu2RoXzyjoMEWP5-cm3nAwnWE/edit?usp=sharing&quot;&gt;Google Sheet&lt;/a&gt;.&lt;br /&gt;In order to make the results more readable, I have plotted the ratio between the time needed by a given library and the minimum time needed by any library. If an algorithm was not implemented, or it needed more than 3 hours to complete, the corresponding bar is not shown.&lt;br /&gt;     &lt;br /&gt;Overall, the results show that NetworKit is the fastest library, or one of the fastest, in all routines that are implemented (apart from the generation of preferential attachment graphs, where it is very slow). Boost graph library is very close to NetworKit, and it also contains more routines. Also Sagemath is quite efficient in all tasks, apart from the computation of strongly connected components and the generation of a preferential attachment graph, where it needed more than 3 hours. However, in the latter case, the main problem was not speed but memory consumption.&lt;br /&gt;&lt;br /&gt;In conclusion, Sagemath can highly benefit from the possibility of using algorithms from other libraries. First of all, it might improve the number of algorithms offered, especially by including igraph, and it also might improve its performance, by including Boost, NetworKit, or other fast graph libraries.</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2016-03-14T08:30:18+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Comparison of Graph Libraries</title>
		<link href="http://borassisagemath.blogspot.com/2015/06/comparison-of-graph-libraries.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-5727768572864220659</id>
		<updated>2015-06-04T02:11:58+00:00</updated>
		<content type="html">Many times, people asked me &quot;Which is the best available graph library?&quot;, or &quot;Which graph library should I use to compute this, or that?&quot;.&lt;br /&gt;Well, personally I love to use Sage, but there are also several good alternatives. Then, the question becomes &quot;How could we improve Sage, so that people will choose it?&quot;.&lt;br /&gt;&lt;br /&gt;In my opinion, graph libraries are compared according to the following parameters:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;simplicity and documentation: people have little time, and the faster they learn how to use the library, the better;&lt;/li&gt;&lt;li&gt;number of routines available;&lt;/li&gt;&lt;li&gt;speed: sometimes, the input is very big, and the algorithms take much time to finish, so that a fast implementation is fundamental.&lt;/li&gt;&lt;/ol&gt;While it is very difficult to measure the first point, the others can be compared and improved. For this reason, in order to outperform other libraries, we should implement new features, and improve existing ones. You don't say!&lt;br /&gt;&lt;br /&gt;However, this answer is not satisfactory: in principle, we could add all features available in other libraries, but this is a huge translational work, and while we are doing this work the other libraries will change, making this effort a never-ending story.&lt;br /&gt;&lt;br /&gt;My project proposes an alternative: cooperating instead of competing. I will try to interface Sage with other libraries, and to use their algorithms when the Sage counterpart is not available, or less efficient. This way, with an affordable amount of work, we will be able to run all algorithms available in the best graph libraries!&lt;br /&gt;&lt;br /&gt;As a first step, I have compared all the most famous C, C++, and Python graph libraries according to points 2 and 3, in order to choose which libraries should be included. The next posts will analyze the results of this comparison.</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2016-03-14T08:30:18+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Google Summer of Code: let's start!</title>
		<link href="http://borassisagemath.blogspot.com/2015/06/google-summer-of-code-lets-start.html"/>
		<id>tag:blogger.com,1999:blog-8558001006126216932.post-6371615580569256662</id>
		<updated>2015-06-04T01:10:03+00:00</updated>
		<content type="html">This blog will follow my Google Summer of Code project, entitled &lt;i&gt;Performance Improvements for the Graph Module of Sagemath&lt;/i&gt;. The complete project is available &lt;a href=&quot;https://sites.google.com/a/imtlucca.it/borassi/unpublished-works/google-summer-of-code&quot;&gt;here&lt;/a&gt;, and related documents with partial results will be available on the same website.&lt;br /&gt;In this first post, I would like to thank my mentor David Coudert and Nathann Cohen, who helped me a lot in writing this project and understanding how the graph module of Sagemath works.&lt;br /&gt;With their help, and with the help of the Sage community, I hope it will be a useful and funny work! Let's start!</content>
		<author>
			<name>Michele Borassi</name>
			<email>noreply@blogger.com</email>
			<uri>http://borassisagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Performance Improvements for the Graph Module of Sagemath</title>
			<link rel="self" href="http://borassisagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8558001006126216932</id>
			<updated>2016-03-14T08:30:18+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-US">
		<title type="html">Asymptotic Expressions: Motivation</title>
		<link href="http://benjamin-hackl.at/2015/05/29/asymptotic-expressions-motivation/"/>
		<id>http://benjamin-hackl.at/?p=244</id>
		<updated>2015-05-29T01:34:40+00:00</updated>
		<content type="html">&lt;p&gt;\( \def\R{\mathbb{R}} \)So, as Google Summer of Code started on Monday, May 25th it is time to give a proper motivation for the project I have proposed. The working title of my project is &lt;b&gt;&lt;i&gt;(Multivariate) Asymptotic Expressions&lt;/i&gt;&lt;/b&gt;, and its overall goal is to bring &lt;em&gt;asymptotic expressions&lt;/em&gt; to SageMath.&lt;/p&gt;
&lt;h3&gt;What are A&lt;em&gt;symptotic Expressions?&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;A motivating answer for this question comes from the theory of &lt;a href=&quot;http://en.wikipedia.org/wiki/Taylor_series&quot;&gt;Taylor series&lt;/a&gt;. Assume that we have a sufficiently nice (in this case meaning smooth) function $f : \R \to \R$ that we want to approximate in a neighborhood of some point $x_0 \in \R$. Taylor&amp;#8217;s theorem allows us to write $f(x) = T_n(x) + R_n(x)$ where&lt;/p&gt;
&lt;p&gt;\[ T_n(x) = \sum_{j=0}^n \frac{f^{(j)}(x_0)}{j!}\cdot (x-x_0)^j = f(x_0) + f'(x_0)\cdot (x-x_0) + \cdots + \frac{f^{(n)}(x_0)}{n!}\cdot (x-x_0)^n,  \]&lt;/p&gt;
&lt;p&gt;and $R_n(x) = \frac{f^{(n+1)}(\xi)}{(n+1)!} \cdot (x-x_0)^{n+1}$, where $\xi$ lies in a neighborhood of $x_0$. Note that for $x\to x_0$, $R_n(x)$ &amp;#8220;behaves like&amp;#8221; $(x-x_0)^{n+1}$. In particular, we can certainly find a constant $C &amp;gt; 0$ such that $|R_n(x)| \leq C\cdot |x-x_0|^{n+1}$, or, in other words: for $x\to x_0$ the growth of the function $R_n(x)$ is bounded from above by the growth of $(x-x_0)^{n+1}$.&lt;/p&gt;
&lt;p&gt;The idea of bounding the growth of a function by the growth of another function when the argument approaches some number (or $\infty$) is the central idea behind the &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;big O notation&lt;/a&gt;. &lt;/em&gt;For function $f, g : \R \to \R$ we write $f(x) = O(g(x))$ for $x\to x_0$ if there is a constant $C &amp;gt; 0$ such that $|f(x)| \leq C\cdot |g(x)|$ for all $x$ in some neighborhood of $x_0$.&lt;/p&gt;
&lt;p&gt;A case that is particularly important is the case of $x_0 = \infty$, that is if we want to compare and/or characterize the behavior of some function for $x\to\infty$, which is also called the functions &lt;em&gt;asymptotic behavior&lt;/em&gt;. For example, consider the functions $\log x$, $x^3$ and $e^x$. All of them are growing unbounded for $x\to\infty$ &amp;#8212; however, their asymptotic behavior differs. This can be seen by considering pairwise quotients of these functions: $\frac{x^3}{e^x} \to 0$ for $x\to\infty$, and therefore the asymptotic growth of $x^3$ can be bounded above by the growth of $e^x$, meaning $x^3 = O(e^x)$ for $x\to\infty$.&lt;/p&gt;
&lt;p&gt;The analysis of a functions asymptotic behavior is important for many applications, for example when determining time and space complexity of algorithms in computer science, or for describing the growth of classes of combinatorial objects: take, for example, binary strings of length $2n$ that contain equally many zeros and ones. If $s_n$ denotes the number of such strings, then we have&lt;/p&gt;
&lt;p&gt;\[ s_n = \binom{2n}{n} = \frac{4^n}{\sqrt{n\pi}} \left(1 + O\left(\frac{1}{n}\right)\right) \quad\text{ for } n\to\infty. \]&lt;/p&gt;
&lt;p&gt;Expressions like these are &lt;em&gt;asymptotic expressions.&lt;/em&gt; When we consider asymptotic expressions in only one variable, everything works out nicely as a total order is induced. But as soon as multiple variables are involved, we don&amp;#8217;t have a total order any more. Consider, for example, $x^2 y$ and $xy^2$ when $x$ and $y$ approach $\infty$. These two elements cannot be compared to each other, which complicates computing with these expressions as they may contain multiple &amp;#8220;irreducible&amp;#8221; O-terms.&lt;/p&gt;
&lt;p&gt;The following univariate and multivariate examples shall demonstrate how computing with such expressions looks like (all variables are assumed to go to $\infty$):&lt;/p&gt;
&lt;p&gt;\[ x + O(x) = O(x),\quad x^2 \cdot (x + O(1)) = x^3 + O(x^2),\quad O(x^2) \cdot O(x^3) = O(x^5),  \]&lt;/p&gt;
&lt;p&gt;\[ x y + O(x^2 y) = O(x^2y),\quad (y \log y + O(y)) (x^2 y + O(4^x \sqrt{x})) =  x^2 y^2 \log y + O(x^2 y^2) + O(4^x \sqrt{x} y \log y).   \]&lt;/p&gt;
&lt;p&gt;Our plan is to provide an implementation based on which computations with these and more complicated expressions are possible.&lt;/p&gt;
&lt;h3&gt;Planned Structure&lt;/h3&gt;
&lt;p&gt;There are four core concepts of our implementation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/17601&quot;&gt;Asymptotic Growth Groups&lt;/a&gt;&lt;/strong&gt;:&lt;em&gt; &lt;/em&gt;These are multiplicative groups that contain &lt;em&gt;growth elements&lt;/em&gt; like $x^2$, $\log x$, $2^x \cdot x \cdot \log x$. For starters, only univariate power growth groups will be implemented.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/17715&quot;&gt;Asymptotic Term Monoids&lt;/a&gt;&lt;/strong&gt;: These monoids contain &lt;em&gt;asymptotic terms &lt;/em&gt;&amp;#8212; in essence, these are summands of asymptotic terms. Apart from exact term monoids (growth elements with a coefficient), we will also implement O-term monoids as well as a term monoid for a deviation of O-terms. Asymptotic terms have (in addition to their group operation, multiplication) &lt;em&gt;absorption &lt;/em&gt;as an additional operation: for example, O-terms are able to absorb all asymptotically &amp;#8220;smaller&amp;#8221; elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/17693&quot;&gt;Mutable Poset&lt;/a&gt;&lt;/strong&gt;: As we have mentioned above, due to the fact that multivariate asymptotic expressions do not have a total order with respect to their growth, we need a partially ordered set (&amp;#8220;Poset&amp;#8221;) that deals with this structure such that operations like absorbing terms can be performed efficiently. The mutable poset is the central data structure that asymptotic expressions are built upon.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/17716&quot;&gt;Asymptotic&lt;/a&gt;&lt;a href=&quot;http://trac.sagemath.org/ticket/17716&quot;&gt; Ring&lt;/a&gt;&lt;/strong&gt;: This is our top-level structure which is also supposed to be the main interaction object for users. The asymptotic ring contains the asymptotic expressions, i.e. intelligently managed sums of asymptotic terms. All common operations shall be possible here. Furthermore, the interface should be intelligent enough such that admissible expressions from the symbolic ring can be directly converted into elements of the asymptotic ring.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, this &amp;#8220;planned structure&amp;#8221; is rather superficial. However, this is only to supplement the motivation for my project with some ideas on the implementation. I&amp;#8217;ll go a lot more into the details of what I am currently implementing in the next few blog posts!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content>
		<author>
			<name>Benjamin Hackl</name>
			<uri>http://benjamin-hackl.at/tag/gsoc15/</uri>
		</author>
		<source>
			<title type="html">GSoC15 – Benjamin Hackl</title>
			<link rel="self" href="http://benjamin-hackl.at/tag/gsoc15/feed/"/>
			<id>http://benjamin-hackl.at/tag/gsoc15/feed/</id>
			<updated>2016-03-04T16:30:22+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Guiding principles for SageMath, Inc.</title>
		<link href="http://sagemath.blogspot.com/2015/05/guiding-principles-for-sagemath-inc.html"/>
		<id>tag:blogger.com,1999:blog-6365588202025292315.post-9002226548496308542</id>
		<updated>2015-05-27T13:03:52+00:00</updated>
		<content type="html">&lt;div class=&quot;salvus-editor-html-md-preview-content&quot;&gt;In February of this year (2015), I founded a Delaware C Corporation called &quot;SageMath, Inc.&quot;. &amp;nbsp;This is a first stab at the guiding principles for the company. &amp;nbsp; &amp;nbsp;It should help clarify the relationship between the company, the Sage project, and other projects like OpenDreamKit and Jupyter/IPython.&lt;br /&gt;&lt;h3 id=&quot;company-mission-statement-&quot;&gt;Company mission statement:&lt;/h3&gt;&lt;blockquote&gt;Make open source mathematical software ubiquitous.&lt;/blockquote&gt;This involves both creating the SageMathCloud website and supporting the development and distribution of the SageMath and other software, including Jupyter, Octave, Scilab, etc.  Anything open source.&lt;br /&gt;&lt;h3 id=&quot;company-principles-&quot;&gt;Company principles:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Absolutely all company funded software must be open source, under a &lt;strong&gt;GPLv3 &lt;i&gt;compatible&lt;/i&gt;&lt;/strong&gt; license.    We are a 100% open source company.&lt;br /&gt; &lt;/li&gt;&lt;li&gt;Company independence and self-determination is far more important than money.  A core principle is that SMI is not for sale at any price, and will not participate in any partnership (for cost) that would restrict our freedom. This means:&lt;br /&gt; &lt;ul&gt;&lt;li&gt;reject any offers from corp development from big companies to purchase or partner,&lt;/li&gt;&lt;li&gt;do not take any investment money unless absolutely necessary, and then only from the highest quality investors&lt;/li&gt;&lt;li&gt;do not take venture capital ever&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Be as open as possible about everything involving the company.  What should not be open (since it is dangerous):&lt;br /&gt; &lt;ul&gt;&lt;li&gt;security issues, passwords&lt;/li&gt;&lt;li&gt;finances (which could attract trolls)&lt;/li&gt;&lt;li&gt;private user data&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;What should be open:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;aggregate usage data, e.g., number of users.&lt;/li&gt;&lt;li&gt;aggregate data that could help other open source projects improve their development, e.g., common problems we observe with Jupyter notebooks should be provided to their team.&lt;/li&gt;&lt;li&gt;guiding principles&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;business-model&quot;&gt;Business model&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;SageMathCloud is freemium with the expectation that 2-5% of users pay.&lt;br /&gt; &lt;/li&gt;&lt;li&gt;Target audience: all potential users of cloud-based math-related software.&lt;br /&gt; &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;sagemathcloud-mission&quot;&gt;SageMathCloud mission&lt;/h3&gt;&lt;blockquote&gt;Make it as easy as possible to use open source mathematical software in the cloud.&lt;/blockquote&gt;This means:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Minimize onboard friction, so in less than 1 minute, you can create an account and be using Sage or Jupyter or LaTeX.  Morever, the UI should be simple and streamlined specifically for the tasks, while still having deep functionality to support expert users.  Also, everything persists and can be sorted, searched, used later, etc.&lt;br /&gt; &lt;/li&gt;&lt;li&gt;Minimize support friction, so one click from within SMC leads to a support forum, an easy way for admins to directly help, etc.  This is not at all implemented yet.  Also, a support marketplace where experts get paid to help non-experts (tutoring, etc.).&lt;br /&gt; &lt;/li&gt;&lt;li&gt;Minimize teaching friction, so &lt;em&gt;everything&lt;/em&gt; involving software related to teaching a course is as easy as possible, including managing a list of students, distributing and collecting homework, and automated grading and feedback.&lt;br /&gt; &lt;/li&gt;&lt;li&gt;Minimize pay friction, sign up for a $7 monthly membership, then simple clear pay-as-you-go functionality if you need more power.          &lt;br /&gt; &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content>
		<author>
			<name>William Stein</name>
			<email>noreply@blogger.com</email>
			<uri>http://sagemath.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Sage: Open Source Mathematics Software</title>
			<subtitle type="html">This is my blog about things related to Sage.</subtitle>
			<link rel="self" href="http://sagemath.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-6365588202025292315</id>
			<updated>2016-03-14T08:30:07+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-US">
		<title type="html">Google Summer of Code — Countdown</title>
		<link href="http://benjamin-hackl.at/2015/05/23/google-summer-of-code-countdown/"/>
		<id>http://benjamin-hackl.at/?p=109</id>
		<updated>2015-05-23T01:58:33+00:00</updated>
		<content type="html">&lt;p&gt;Today I received the welcome package for attending this year&amp;#8217;s &amp;#8220;Google Summer of Code&amp;#8221;! Actually, it&amp;#8217;s pretty cool; the following things were included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a blue notebook with a monochromatic GSoC 15 logo (in dark blue) printed on it&lt;/li&gt;
&lt;li&gt;a sticker with a colored GSoC 15 logo&lt;/li&gt;
&lt;li&gt;a pen that is both a blue ballpoint pen as well as a mechanical pencil (0.5)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a photo of all this stuff:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://benjamin-hackl.at/asdf-wp/wp-content/uploads/2015/05/gsoc_welcome.jpg&quot;&gt;&lt;img class=&quot; size-medium wp-image-118 aligncenter&quot; src=&quot;http://benjamin-hackl.at/asdf-wp/wp-content/uploads/2015/05/gsoc_welcome-225x300.jpg&quot; alt=&quot;gsoc_welcome&quot; width=&quot;225&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The work on our project (multivariate) Asymptotic Expressions (in cooperation with &lt;a href=&quot;http://danielkrenn.at&quot;&gt;Daniel Krenn&lt;/a&gt; and &lt;a href=&quot;http://wwwu.aau.at/cheuberg&quot;&gt;Clemens Heuberger&lt;/a&gt;) begins (or rather continues) on Monday, the 25th of May. Over the course of next week (probably in a $\varepsilon$-neighborhood of Monday) I will blog about the status quo, as well as about the motivation for the project. &lt;img src=&quot;http://benjamin-hackl.at/asdf-wp/wp-includes/images/smilies/simple-smile.png&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;</content>
		<author>
			<name>Benjamin Hackl</name>
			<uri>http://benjamin-hackl.at/tag/gsoc15/</uri>
		</author>
		<source>
			<title type="html">GSoC15 – Benjamin Hackl</title>
			<link rel="self" href="http://benjamin-hackl.at/tag/gsoc15/feed/"/>
			<id>http://benjamin-hackl.at/tag/gsoc15/feed/</id>
			<updated>2016-03-04T16:30:22+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Code on cake, poker and a number theory classification web app</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/05/04/code-on-cake-poker-and-a-number-theory-classification-webapp/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/05/04/code-on-cake-poker-and-a-number-theory-classification-webapp/</id>
		<updated>2015-05-04T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;I have just finished writing feedback and obtaining marks for my first year
students’ presentations. These presentations follow 11 weeks during which
students formed companies and worked together to come up with a ‘product’ which
had to involve mathematics and code (this semester comes just after 11 weeks of
learning Python and Sage). In this post I’ll briefly describe some of the great
things that the students came up with.&lt;/p&gt;

&lt;p&gt;I must say that I was blown away by the standard this year. Last year the
students did exceptionally well but this year the standard was even higher, I am
so grateful for the effort put in by more or less everyone.&lt;/p&gt;

&lt;p&gt;Some of the great projects included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A website that used a fitted utility function (obtained from questioning
family, friends, flatmates) to rank parking lots in terms of price and
distance from a given venue (the website was written in Django and the
function fitted using Sage).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A commando training app, with an actual reservist marine who is a student
of ours:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/venture.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A story based game with an original storyline stemming from the zodiac. The
presentation culminated in Geraint, Jason and I (who were the audience)
retaliating to their Nerf gun attack with our (hidden under the desk) Nerf guns (we had a hunch
that this group would ambush us…). The game mechanics itself was coded in
pure Python and the UI was almost written in Django (that
was the goal but they didn’t have the time to fully implement it).&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/cardiff_elite_four.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A Django site that had a graphical timeline of mathematics (on click you had
access to a quizz and info etc…). This was one I was
particularly excited about as it’s a tool I would love to use.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An outreach/educational package based around cryptography. They coded a
variety of cyphers in Python and also put together an excellent set of
teaching resources with really well drawn characters etc… They even threw in
my dog Auraya (the likeness of the drawing is pretty awesome :)):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/cryptogram.jpg&quot; alt=&quot;&quot; /&gt;
  &lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/auraya.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I ask my students to find an original way of showcasing their code. I don’t
actually know the right answer to that ‘challenge’. Most students showcase the
website and/or app, some will talk me through some code but this year one
group did something quite frankly awesome: &lt;strong&gt;code on cake&lt;/strong&gt;. Here’s some of
the code they wrote for their phone app (written with kivy):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/-1_cake.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One group built a fully functioning and hosted web app (after taking a look at
Django they decided that Flask was the way to go for this particular tool).
Their app takes in a natural number and classifies it against a number of
categories, go ahead and try it right now: &lt;a href=&quot;http://jayrobertvos.pythonanywhere.com/&quot;&gt;Categorising Numbers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One of the more fun presentations was for a poker simulation app that uses a
prime number representation of a hand of poker to simulate all possible
outcomes of a given state. This work remarkably fast and immediately spits out
(with neat graphics of the cards) the probability of winning given the current
cards. As well as an impressive app the students presented it very well and
invited me to play a game of poker (I lost, their mark was not affected…):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/team_super_awesome_funsies_selfie.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Here are a couple of screen shots of the app itself:&lt;/p&gt;

    &lt;p&gt;Home screen:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/oddson_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;The input card screen:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/oddson_0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am missing out a bunch of great projects (including an impressive &lt;em&gt;actual&lt;/em&gt;
business that I will be delighted to talk about more when appropriate). I am
very grateful to the efforts put in by all the students and wish them well
during their exams.&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">My 5 reasons why jekyll + github is a terrible teaching tool.</title>
		<link href="http://drvinceknight.github.io/unpeudemath/pedagogy/2015/04/06/my-5-reasons-why-jekyll-with-github-is-a-terrible-teaching-tool/"/>
		<id>http://drvinceknight.github.io/unpeudemath/pedagogy/2015/04/06/my-5-reasons-why-jekyll-with-github-is-a-terrible-teaching-tool/</id>
		<updated>2015-04-06T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;For the past year or so I have been using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; for all
my courses.
If you do not know, in a nutshell, jekyll is a ruby framework that lets you
write templates for pages and build nice websites using static markdown files
for your content.
Here I will describe what I think of jekyll from a pedagogic point of view, in 5 main points.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-the-tutorial-is-too-well-written-and-easy-to-follow&quot;&gt;1. Jekyll is terrible because the tutorial is too well written and easy to follow.&lt;/h2&gt;

&lt;p&gt;First of all, as an academic I enjoy when things are difficult to read and
follow.
The Jekyll tutorial can get you up and running with a jekyll site in less than 5
minutes.
It is far too clear and easy to follow.
This sort of clear and to the point
explanation is very dangerous from a pedagogic point of view as students might
stumble upon it and raise their expectations of the educational process they are
going through.&lt;/p&gt;

&lt;p&gt;In all seriousness, the tutorial is well written and clear, with a basic
knowledge of the command line you can modify the base site and have a website
deployed in less than 10 minutes.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-it-works-too-seamlessly-with-github&quot;&gt;2. Jekyll is terrible because it works too seamlessly with github.&lt;/h2&gt;

&lt;p&gt;First of all gh-pages takes care of the hosting.
Not having to use a complicated server saves far too much time.
As academics we have too much free time already, I do not like getting bored.&lt;/p&gt;

&lt;p&gt;Github promotes the sharing and openness of code, resources and processes.
Using a jekyll site in conjunction with github means that others can
easily see and comment on all the materials as well as potentially
improve them.
This openness is dangerous as it ensures that courses are living and breathing
things as opposed to a set of notes/problem sheets that sit safely in a drawer
somewhere.&lt;/p&gt;

&lt;p&gt;The fact that jekyll uses markdown is also a problem.
On github anyone can easily read and send a pull request (which improves things)
without really knowing markdown (let alone git).
This is very terrible indeed, &lt;a href=&quot;https://github.com/drvinceknight/Computing_for_mathematics/commit/c9370a3e2880e0d6d2d3a0f4e3bb90a306783787&quot;&gt;here for example is a pull request sent to me by a
student&lt;/a&gt;.
The student in question found a mistake in a question sheet and asked me about it,
right there in the lab I just said ‘go ahead and fix it :)’ (and they did).
Involving students in the process of fixing/improving their course materials
has the potential for utter chaos.
Furthermore normalising mistakes is another big problem: all students should be
terrified of making a mistake and/or trying things.&lt;/p&gt;

&lt;p&gt;Finally, having a personal site as a github project gives you a site at the
following url:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;username.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By simply having a &lt;code&gt;gh-pages&lt;/code&gt; branch for each class site, this will
automatically be served at:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;username.github.io/class-site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is far too sensible and flexible.
Furthermore the promotion of decentralisation of content is dangerous.
If one of my class sites breaks: none of my others will be affected!!!
How can I expect any free time with such a robust system?
This is dangerously efficient.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-it-is-too-flexible&quot;&gt;3. Jekyll is terrible because it is too flexible.&lt;/h2&gt;

&lt;p&gt;You can (if you want to) include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://disqus.com/&quot;&gt;A disqus.com&lt;/a&gt; board to a template for a page which means
that students can easily comment and talk to you about materials.
Furthermore you can also use this to add things to your materials in a
discussion based way, for example I have been able to far too easily to add a
picture of a whiteboard explaining something students have asked.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.mathjax.org/&quot;&gt;Mathjax&lt;/a&gt;. With some escaping this works out of the
box. Being able to include nicely rendered mathematics misaligns students’
expectations as to what is on the web.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://sagecell.sagemath.org/&quot;&gt;Sage cells&lt;/a&gt; can be easily popped in to
worksheets allowing students to immediately use code to illustrate/explain a
concept.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and various others: you can just include any html/javascript etc…&lt;/p&gt;

&lt;p&gt;This promotion of interactive and modern resources by Jekyll is truly terrible
as it gets students away from what teaching materials should really be about:
dusty notes in the bottom of a drawer (worked fine for me).&lt;/p&gt;

&lt;p&gt;The flexibility of Jekyll is also really terrible as it makes me forget the
restrictions imposed on me by whatever VLE we are supposed to use.
This is making me weak and soft, when someone takes the choice away from me and
I am forced to use the VLE, I most probably won’t be ready.&lt;/p&gt;

&lt;p&gt;(A jekyll + github setup also implis that a wiki immediately exists for a page
and I am also experimenting with a &lt;a href=&quot;https://gitter.im&quot;&gt;gitter.im&lt;/a&gt; room for each class).&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-it-gives-a-responsive-site-out-of-the-box&quot;&gt;4. Jekyll is terrible because it gives a responsive site out of the box.&lt;/h2&gt;

&lt;p&gt;Students should consume their materials exactly when and how we want them to.
The base jekyll site cames with a basic responsive framework, here is a photo of
one of my class sheets (which also again shows the disgustingly beautifully
rendered mathematics):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vknight.org/unpeudemath/assets/images/jekyll_site.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This responsive framework works right out of the box (you can also obviously use
further frameworks if you want to, see my point about flexibility) from the tutorial and this
encourages students to have access to the materials on whatever platform they
want whenever they want.
This cannot be a good thing.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-is-terrible-because-it-saves-me-too-much-time&quot;&gt;5. Jekyll is terrible because it saves me too much time.&lt;/h2&gt;

&lt;p&gt;The main point that is truly worrying about jekyll is how much time it saves me.
I have mentioned this before, as academics we need to constantly make sure we do
not get bored.
Jekyll does not help with this.&lt;/p&gt;

&lt;p&gt;I can edit my files using whatever system I want (I can even do this on github
directly if I wanted to), I push and the website is up to date.&lt;/p&gt;

&lt;p&gt;In the past I would have a lot of time taken up by compiling a LaTeX document
and uploading to our VLE.
I would sit back and worry about being bored before realising (thankfully) that
I had a typo and so needed to write, delete and upload again.&lt;/p&gt;

&lt;p&gt;Furthermore, I can easily use the github issue tracker to keep on top of to do
lists etc… (which I am actually beginning to do for more or less every aspect
of my life).
TAs can also easily fix/improve minor things without asking me to upload
whatever it is they wrote.&lt;/p&gt;

&lt;p&gt;Github + Jekyll works seamlessly and ensures that I have more time to respond to
student queries and think.
This time for reflection on teaching practice is dangerous: I might choose to do
things differently than how they have been done for the past 100 years.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;In case my tone is unclear: I am such a huge jekyll fan and think it is a
brilliant pedagogic tool.
There might well be various other static site generators and other options so please do
comment about them below :)&lt;/em&gt;)&lt;/p&gt;</content>
		<author>
			<name>Vince Knight</name>
			<uri>http://drvinceknight.github.io/unpeudemath/</uri>
		</author>
		<source>
			<title type="html">Un peu de math</title>
			<subtitle type="html">I post stuff here about game theory, queueing theory, pedagogy, Sage, Python and other things...</subtitle>
			<link rel="self" href="http://vknight.org/unpeudemath/feed.xml"/>
			<id>http://vknight.org/unpeudemath/feed.xml</id>
			<updated>2016-02-22T18:30:09+00:00</updated>
		</source>
	</entry>

</feed>
